{"version":3,"sources":["statecharts/delayed.cljc"],"mappings":"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","names":["statecharts$delayed$IScheduler$schedule$dyn","x__4509__auto__","m__4510__auto__","statecharts.delayed/schedule","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","statecharts$delayed$IScheduler$unschedule$dyn","statecharts.delayed/unschedule","statecharts.delayed/IScheduler","this","event","delay","cljs.core/PROTOCOL_SENTINEL","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","statecharts.delayed/Scheduler","statecharts.delayed/->Scheduler","dispatch","ids","clock","_","id","statecharts.clock/setTimeout","cljs.core.swap_BANG_","cljs.core/assoc","temp__5753__auto__","cljs.core/deref","cljs.core.get","statecharts.clock/clearTimeout","cljs.core/dissoc","statecharts.delayed/scheduler?","x","cljs.core/native-satisfies?","statecharts.delayed/make-scheduler","cljs.core.atom","statecharts.delayed/path-placeholder","statecharts.delayed/delay-fn-id","d","cljs.core/int?","statecharts.delayed/generate-delayed-events","txs","p1__12549#","cljs.core.mapv","cljs.core.dissoc","statecharts.delayed/derived-delay-info","delayed-transitions","seq__12550","cljs.core/seq","chunk__12551","count__12552","i__12553","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","dt","js/Error","cljs.core/contains?","cljs.core/group-by","cljs.core.map","p__12554","vec__12555","cljs.core.nth","cljs.core.reduce","accu","curr","cljs.core.merge_with","cljs.core/conj","statecharts.delayed/insert-delayed-transitions","node","after","cljs.core/not","map__12558","cljs.core/--destructure-map","entry","exit","on","cljs.core.into","vconcat","xs","ys","cljs.core.concat","cljs.core/vec","cljs.core.update","cljs.core/merge","statecharts.delayed/replace-path","path","form","clojure.walk/postwalk","cljs.core._EQ_","var_args","G__12560","statecharts.delayed/replace-delayed-place-holder","fsm","statecharts.delayed.replace_delayed_place_holder","replace-path","cljs.core.partial","G__12561","states","statecharts.utils/map-kv","cljs.core.conj"],"sourcesContent":["(ns statecharts.delayed\n  (:require [clojure.walk :refer [postwalk]]\n            [statecharts.clock :as clock]\n            [statecharts.utils :as u]))\n\n(defprotocol IScheduler\n  (schedule [this event delay])\n  (unschedule [this event]))\n\n(deftype Scheduler [dispatch ids clock]\n  IScheduler\n  (schedule [_ event delay]\n    (let [id (clock/setTimeout clock #(dispatch event) delay)]\n      (swap! ids assoc event id)))\n\n  (unschedule [_ event]\n    (when-let [id (get @ids event)]\n      (clock/clearTimeout clock id)\n      (swap! ids dissoc event))))\n\n(defn scheduler? [x]\n  (satisfies? IScheduler x))\n\n(defn make-scheduler [dispatch clock]\n  (Scheduler. dispatch (atom {}) clock))\n\n(def path-placeholder [:<path>])\n\n(defn delay-fn-id [d]\n  (if (int? d)\n    d\n    #?(:cljs (aget d \"name\")\n       :clj (str (type d)))))\n\n(defn generate-delayed-events [delay txs]\n  (let [event [:fsm/delay\n               path-placeholder\n               ;; When the delay is a context function, after each\n               ;; reload its value of change, causing the delayed\n               ;; event can't find a match in :on keys. To cope with\n               ;; this we extract the function name as the event\n               ;; element instead.\n               (delay-fn-id delay)]]\n    ;; (def vd1 delay)\n    {:entry {:action :fsm/schedule-event\n             :event-delay delay\n             :event event}\n     :exit {:action :fsm/unschedule-event\n            :event event}\n     :on [event (mapv #(dissoc % :delay) txs)]}))\n\n#_(generate-delayed-events 1000 [{:delay 1000 :target :s1 :guard :g1}\n                                 {:delay 1000 :target :s2}])\n\n#_(group-by odd? [1 2 3])\n\n;; statecharts.impl/T_DelayedTransition\n;; =>\n#_[:map\n   [:entry]\n   [:exit]\n   [:on]]\n(defn derived-delay-info [delayed-transitions]\n  (doseq [dt delayed-transitions]\n    (assert (contains? dt :delay)\n      (str \"no :delay key found in\" dt)))\n  (->> delayed-transitions\n       (group-by :delay)\n       ;; TODO: the transition's entry/exit shall be grouped by delay,\n       ;; otherwise a delay with multiple targets (e.g. with guards)\n       ;; would result in multiple entry/exit events.\n       (map (fn [[delay txs]]\n              (generate-delayed-events delay txs)))\n       (reduce (fn [accu curr]\n                 (merge-with conj accu curr))\n              {:entry [] :exit [] :on []})))\n\n#_(derived-delay-info [:s1] [{:delay 1000 :target :s1 :guard :g1}\n                             {:delay 2000 :target :s2}])\n\n(defn insert-delayed-transitions\n  \"Translate delayed transitions into internal entry/exit actions and\n  transitions.\"\n  [node]\n  ;; node\n  (let [after (:after node)]\n    (if-not after\n      node\n      (let [{:keys [entry exit on]} (derived-delay-info after)\n            on (into {} on)\n            vconcat (fn [xs ys]\n                      (-> (concat xs ys) vec))]\n        (-> node\n            (update :entry vconcat entry)\n            (update :exit vconcat exit)\n            (update :on merge on))))))\n\n(defn replace-path [path form]\n  (if (nil? form)\n    form\n    (postwalk (fn [x]\n                x\n                (if (= x path-placeholder)\n                  path\n                  x))\n              form)))\n\n(defn replace-delayed-place-holder\n  ([fsm]\n   (replace-delayed-place-holder fsm []))\n  ([node path]\n   (let [replace-path (partial replace-path path)]\n     (cond-> node\n       (:on node)\n       (update :on replace-path)\n\n       (:entry node)\n       (update :entry replace-path)\n\n       (:exit node)\n       (update :exit replace-path)\n\n       (:states node)\n       (update :states\n               (fn [states]\n                 (u/map-kv (fn [id node]\n                             [id\n                              (replace-delayed-place-holder node (conj path id))])\n                           states)))))))\n\n#_(replace-delayed-place-holder\n {:on {[:fsm/delay [:<path>] 1000] :s2}\n  :states {:s3 {:on {[:fsm/delay [:<path>] 1000] :s2}\n                :entry [{:fsm/type :schedule-event\n                         :fsm/delay 1000\n                         :fsm/event [:fsm/delay [:<path>] 1000]}]}}\n  :entry [{:fsm/type :schedule-event\n           :fsm/delay 1000\n           :fsm/event [:fsm/delay [:<path>] 1000]}]} [:root])\n"]}