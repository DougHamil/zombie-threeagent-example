shadow$provide.module$node_modules$three_nebula$build$esm$renderer$GPURenderer$common$ParticleBuffer$index=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _constants=require("module$node_modules$three_nebula$build$esm$renderer$GPURenderer$common$ParticleBuffer$constants");let THREE;class ParticleBuffer{constructor(maxParticles=_constants.DEFAULT_MAX_PARTICLES,three){THREE=three;this.maxParticles=maxParticles;this.createInterleavedBuffer().createBufferGeometry()}createInterleavedBuffer(){const arrayBuffer=
new ArrayBuffer(this.maxParticles*_constants.PARTICLE_BYTE_SIZE);this.interleavedBuffer=new THREE.InterleavedBuffer(new Float32Array(arrayBuffer),_constants.PARTICLE_BYTE_SIZE);return this}createBufferGeometry(){this.geometry=new THREE.BufferGeometry;const {interleavedBuffer,geometry}=this;Object.keys(_constants.ATTRIBUTE_TO_SIZE_MAP).reduce((offset,attribute)=>{const size=_constants.ATTRIBUTE_TO_SIZE_MAP[attribute];geometry.setAttribute(attribute,new THREE.InterleavedBufferAttribute(interleavedBuffer,
size,offset));return offset+size},0);return this}get buffer(){return this.interleavedBuffer}get stride(){return _constants.PARTICLE_BYTE_SIZE}}exports.default=ParticleBuffer}
//# sourceMappingURL=module$node_modules$three_nebula$build$esm$renderer$GPURenderer$common$ParticleBuffer$index.js.map
