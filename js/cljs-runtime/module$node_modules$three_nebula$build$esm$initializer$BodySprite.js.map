{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$initializer$BodySprite.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/three-nebula/build/esm/initializer/BodySprite.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$initializer$BodySprite\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _constants = require(\"./constants\");\n\nvar _Initializer = _interopRequireDefault(require(\"./Initializer\"));\n\nvar _types = require(\"./types\");\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\n/**\n * Sets the body property to be a THREE.Sprite on initialized particles.\n *\n * NOTE The texture map MUST be set on the SpriteMaterial in the TextureLoader.load\n * callback. Not doing so will cause WebGL buffer errors.\n */\nclass BodySprite extends _Initializer.default {\n  /**\n   * Constructs a BodySprite initializer.\n   *\n   * @param {object} THREE - The Web GL API we are using eg., THREE\n   * @param {string} texture - The sprite texture\n   * @param {object} materialProperties - The sprite material properties\n   * @throws {Error} If the TextureLoader fails to load the supplied texture\n   * @return void\n   */\n  constructor(THREE, texture, materialProperties = _constants.DEFAULT_MATERIAL_PROPERTIES, isEnabled = true) {\n    super(_types.INITIALIZER_TYPE_BODY_SPRITE, isEnabled);\n    const {\n      Sprite,\n      SpriteMaterial,\n      TextureLoader\n    } = THREE;\n    /**\n     * @desc The material properties for this object's SpriteMaterial\n     * NOTE This is required for testing purposes\n     * @type {object}\n     */\n\n    this.materialProperties = (0, _utils.withDefaults)(_constants.DEFAULT_MATERIAL_PROPERTIES, materialProperties);\n    new TextureLoader().load(texture, map => {\n      /**\n       * @desc The texture for the THREE.SpriteMaterial map.\n       * @type {Texture}\n       */\n      this.texture = map;\n      /**\n       * @desc THREE.SpriteMaterial instance.\n       * @type {SpriteMaterial}\n       */\n\n      this.material = new SpriteMaterial(_objectSpread(_objectSpread({}, {\n        map\n      }), this.materialProperties));\n      /**\n       * @desc THREE.Sprite instance.\n       * @type {Sprite}\n       */\n\n      this.sprite = new Sprite(this.material);\n    }, undefined, error => {\n      throw new Error(error);\n    });\n  }\n  /**\n   * Sets the particle body to the sprite.\n   *\n   * @param {Particle} particle - The particle to set the body of\n   * @return void\n   */\n\n\n  initialize(particle) {\n    particle.body = this.sprite;\n  }\n  /**\n   * Creates a BodySprite initializer from JSON.\n   *\n   * @param {object} json - The JSON to construct the instance from\n   * @param {object} THREE - The Web GL API we are using eg., THREE\n   * @param {string} json.texture - The sprite texture\n   * @param {object} json.materialProperties - The sprite material properties\n   * @return {BodySprite}\n   */\n\n\n  static fromJSON(json, THREE) {\n    const {\n      texture,\n      materialProperties = _constants.DEFAULT_JSON_MATERIAL_PROPERTIES,\n      isEnabled = true\n    } = json;\n\n    const ensureMappedBlendingMode = properties => {\n      const {\n        blending\n      } = properties;\n      return _objectSpread(_objectSpread({}, properties), {}, {\n        blending: blending ? _constants.SUPPORTED_MATERIAL_BLENDING_MODES[blending] : _constants.SUPPORTED_MATERIAL_BLENDING_MODES[_constants.DEFAULT_JSON_MATERIAL_PROPERTIES.blending]\n      });\n    };\n\n    return new BodySprite(THREE, texture, (0, _utils.withDefaults)(_constants.DEFAULT_JSON_MATERIAL_PROPERTIES, ensureMappedBlendingMode(materialProperties)), isEnabled);\n  }\n\n}\n\nexports.default = BodySprite;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_constants","_Initializer","_types","_utils","BodySprite","constructor","THREE","texture","materialProperties","DEFAULT_MATERIAL_PROPERTIES","isEnabled","INITIALIZER_TYPE_BODY_SPRITE","Sprite","SpriteMaterial","TextureLoader","withDefaults","load","map","material","sprite","undefined","error","Error","initialize","particle","body","fromJSON","json","DEFAULT_JSON_MATERIAL_PROPERTIES","blending","SUPPORTED_MATERIAL_BLENDING_MODES"]
}
