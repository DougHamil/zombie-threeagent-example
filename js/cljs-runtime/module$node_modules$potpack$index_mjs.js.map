{
"version":3,
"file":"module$node_modules$potpack$index_mjs.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/potpack/index.mjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$potpack$index_mjs\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = potpack;\n\nfunction potpack(boxes) {\n  // calculate total box area and maximum box width\n  let area = 0;\n  let maxWidth = 0;\n\n  for (const box of boxes) {\n    area += box.w * box.h;\n    maxWidth = Math.max(maxWidth, box.w);\n  } // sort the boxes for insertion by height, descending\n\n\n  boxes.sort((a, b) => b.h - a.h); // aim for a squarish resulting container,\n  // slightly adjusted for sub-100% space utilization\n\n  const startWidth = Math.max(Math.ceil(Math.sqrt(area / 0.95)), maxWidth); // start with a single empty space, unbounded at the bottom\n\n  const spaces = [{\n    x: 0,\n    y: 0,\n    w: startWidth,\n    h: Infinity\n  }];\n  let width = 0;\n  let height = 0;\n\n  for (const box of boxes) {\n    // look through spaces backwards so that we check smaller spaces first\n    for (let i = spaces.length - 1; i >= 0; i--) {\n      const space = spaces[i]; // look for empty spaces that can accommodate the current box\n\n      if (box.w > space.w || box.h > space.h) continue; // found the space; add the box to its top-left corner\n      // |-------|-------|\n      // |  box  |       |\n      // |_______|       |\n      // |         space |\n      // |_______________|\n\n      box.x = space.x;\n      box.y = space.y;\n      height = Math.max(height, box.y + box.h);\n      width = Math.max(width, box.x + box.w);\n\n      if (box.w === space.w && box.h === space.h) {\n        // space matches the box exactly; remove it\n        const last = spaces.pop();\n        if (i < spaces.length) spaces[i] = last;\n      } else if (box.h === space.h) {\n        // space matches the box height; update it accordingly\n        // |-------|---------------|\n        // |  box  | updated space |\n        // |_______|_______________|\n        space.x += box.w;\n        space.w -= box.w;\n      } else if (box.w === space.w) {\n        // space matches the box width; update it accordingly\n        // |---------------|\n        // |      box      |\n        // |_______________|\n        // | updated space |\n        // |_______________|\n        space.y += box.h;\n        space.h -= box.h;\n      } else {\n        // otherwise the box splits the space into two spaces\n        // |-------|-----------|\n        // |  box  | new space |\n        // |_______|___________|\n        // | updated space     |\n        // |___________________|\n        spaces.push({\n          x: space.x + box.w,\n          y: space.y,\n          w: space.w - box.w,\n          h: box.h\n        });\n        space.y += box.h;\n        space.h -= box.h;\n      }\n\n      break;\n    }\n  }\n\n  return {\n    w: width,\n    // container width\n    h: height,\n    // container height\n    fill: area / (width * height) || 0 // space utilization\n\n  };\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","potpack","boxes","area","maxWidth","box","w","h","Math","max","sort","a","b","spaces","x","y","startWidth","ceil","sqrt","Infinity","height","width","i","length","space","last","pop","push","fill"]
}
