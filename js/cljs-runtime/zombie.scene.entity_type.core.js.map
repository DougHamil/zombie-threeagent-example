{"version":3,"sources":["zombie/scene/entity_type/core.cljs"],"mappings":";;;AAOA,AAAA;;;;;;;AAAA,AAAA,CAAA,AAAA,qFAAAA,rFAASW;;AAAT,CAAA,AAAA,mGAAA,mBAAAV,tHAASU,8GAEEE,EAAEA;;AAFb,AAAA,IAAAX,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAEuBY;AAFvB,AAAA,YAAA,RAEWD;AAFX,AAGI,IAAME,SAAO,KAAAC;IACPC,OAAK,4CAAA,AAAAC,5CAACd,4DAAKe,+BAAUL;IACrBM,QAAM,AAACC,gCAAaJ;AAF1B,AAGE,oBAAMG;AAAN,AACE,AAAML,WAAOK;;AACb,CAAM,AAAiBL,uBAAQK;;AAFjC;;AAGAL;;;AATN,CAAA,AAAA,0GAAA,uBAAAV,jIAASM,qHAUIE,EAAEA,MAAkBS;;AAVjC,AAAA,IAAAhB,aAAAD;IAAAC,iBAAA,AAAAH,4BAAAG;WAAA,AAAAF,4CAAAE,eAAA,lEAU6CQ;AAV7C,AAAA,YAAA,RAUaD;AAVb,AAWI,IAAMO,QAAM,AAAiBE;AAA7B,AACE,oBAAMF;AAAN,AACE,IAAMH,OAAK,4CAAA,AAAAC,5CAACd,4DAAKe,+BAAUL;AAA3B,AACE,OAACS,iCAAcN,KAAKG;;AAFxB;;;;AAZN,CAAA,qDAAA,rDAAST;AAAT,AAAA,AAAA;;;AAAA,CAAA,2DAAA,3DAASA;;AAAT,CAAA,8DAAA,9DAASA;;AAAT,CAAA,mEAAA,WAAAJ,mBAAAC,qBAAAC,tHAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;iDAAA,jDAASI;AAAT,AAAA,YAAAD;;;AAASA,AAgBT,AAAA;;;;;;;AAAA,AAAA,CAAA,AAAA,oFAAAX,pFAAS0B;;AAAT,CAAA,AAAA,kGAAA,mBAAAF,rHAASE,6GAEEb,EAAEA;;AAFb,AAAA,IAAAY,aAAAD;IAAAC,iBAAA,AAAAtB,4BAAAsB;WAAA,AAAArB,4CAAAqB,eAAA,lEAEuBG;WAFvB,AAAAxB,4CAAAqB,eAAA,lEAE4BI;eAF5B,AAAAzB,4CAAAqB,eAAA,tEAEiCK;YAFjC,AAAA1B,4CAAAqB,eAAA,nEAE0CM;AAF1C,AAAA,YAAA,RAEWlB;AAFX,AAGI,IAAME,SAAO,KAAAC;IACPM,MAAI,KAAAU;AADV,AAEE,CAAM,AAAQV,WAAKM;;AACnB,CAAM,AAAQN,WAAK,iBAAAW,WAAA,AAAAf,gBAAwBC;IAAxBe,eAAC,iBAAAC,mBAAIN;AAAJ,AAAA,oBAAAM;AAAAA;;AAAA;;;AAAD,AAAA,QAAAD,6CAAAA,2CAAAD,YAAAC,uBAAAD;;;AACnB,oBAAMH;AAAN,AACE,CAAM,AAAWR,cAAKQ;;AADxB;;AAEA,oBAAMC;AAAN,AACE,CAAM,AAAST,YAAKS;;AADtB;;AAEA,AAAOT;;AACP,AAAMP,WAAOO;;AACbP;;;AAbN,CAAA,AAAA,yGAAA,zGAASW,oHAcIb,EAAEA,MAAkBS,IAAIT;;AAdrC,AAAA,YAAA,RAcaA;AAdb,AAeI,OAAU,cAAA,bAAM,AAAYS;;;AAfhC,CAAA,oDAAA,pDAASI;AAAT,AAAA,AAAA;;;AAAA,CAAA,0DAAA,1DAASA;;AAAT,CAAA,6DAAA,7DAASA;;AAAT,CAAA,kEAAA,WAAAnB,mBAAAC,qBAAAC,rHAASiB;AAAT,AAAA,OAAAhB,iBAAAF,qBAAA;;;AAAA;;;gDAAA,hDAASmB;AAAT,AAAA,YAAAD;;;AAASA,AAiBT,uCAAA,vCAAMU;AAAN,AAAA,kDAAA,sGAAA,hDACS,AAACT,sGACA,AAACf","names":["cljs.core/PROTOCOL_SENTINEL","p__13402","map__13403","cljs.core/--destructure-map","cljs.core.get","p__13404","map__13405","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","zombie.scene.entity-type.core/ModelEntity","zombie.scene.entity-type.core/->ModelEntity","_","type","parent","js/module$node_modules$three$build$three_module.Object3D","pool","cljs.core/deref","zombie.state.databases/assets","model","zombie.util.pooling/claim!","obj","zombie.util.pooling/return!","p__13406","map__13407","zombie.scene.entity-type.core/TextEntity","zombie.scene.entity-type.core/->TextEntity","text","font","anchor-x","color","js/module$node_modules$troika_three_text$dist$troika_three_text_esm.Text","G__13409","fexpr__13408","or__4212__auto__","zombie.scene.entity-type.core/create"],"sourcesContent":["(ns zombie.scene.entity-type.core\r\n  (:require [\"three\" :as three]\r\n            [\"troika-three-text\" :refer [Text]]\r\n            [zombie.state.databases :as db]\r\n            [zombie.util.pooling :as pools]\r\n            [threeagent.entity :refer [IEntityType]]))\r\n\r\n(deftype ModelEntity []\r\n  IEntityType\r\n  (create [_ _ {:keys [type]}]\r\n    (let [parent (three/Object3D.)\r\n          pool (get @db/assets type)\r\n          model (pools/claim! pool)]\r\n      (when model\r\n        (.add parent model)\r\n        (set! (.-modelInstance parent) model))\r\n      parent))\r\n  (destroy! [_ _ ^three/Object3D obj {:keys [type]}]\r\n    (let [model (.-modelInstance obj)]\r\n      (when model\r\n        (let [pool (get @db/assets type)]\r\n          (pools/return! pool model))))))\r\n\r\n(deftype TextEntity []\r\n  IEntityType\r\n  (create [_ _ {:keys [text font anchor-x color]}]\r\n    (let [parent (three/Object3D.)\r\n          obj (Text.)]\r\n      (set! (.-text obj) text)\r\n      (set! (.-font obj) ((or font :font/bebas) @db/assets))\r\n      (when anchor-x\r\n        (set! (.-anchorX obj) anchor-x))\r\n      (when color\r\n        (set! (.-color obj) color))\r\n      (.sync obj)\r\n      (.add parent obj)\r\n      parent))\r\n  (destroy! [_ _ ^three/Object3D obj _]\r\n    (.dispose (aget (.-children obj) 0))))\r\n\r\n(defn create []\r\n  {:text (->TextEntity)\r\n   :model (->ModelEntity)})\r\n"]}