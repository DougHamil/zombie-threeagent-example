{"version":3,"sources":["zombie/util/pooling.cljs"],"mappings":";;AAGA,2BAAA,3BAAMA,8DAAMC,MAAMC;AAAlB,AACE,IAAMC,OAAK,6CAAA,7CAACC;AAAZ,AACE,IAAAC,mBAAA,AAAAC,cAAU,AAACa,8CAAMlB;IAAjBM,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,cAAA,AAAAD,wDAAAE,lEAAQS;AAAR,AAAA,AACE,IAAME,cAAM,AAACC,iEAAoBnB;IAC3BgB,cAAE,CAAM,AAAcE,yBAAO,AAAclB;AADjD,AAEE,AAACoB,mDAAMnB,KAAKoB,gBAAM,AAAQH,iBAAOA;;AAHrC;AAAA,eAAAf;eAAAE;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAC,2BAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,uBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,wBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,cAAA,AAAAI,gBAAAX,1BAAQa;AAAR,AAAA,AACE,IAAME,cAAM,AAACC,iEAAoBnB;IAC3BgB,cAAE,CAAM,AAAcE,yBAAO,AAAclB;AADjD,AAEE,AAACoB,mDAAMnB,KAAKoB,gBAAM,AAAQH,iBAAOA;;AAHrC;AAAA,eAAA,AAAAH,eAAAZ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAIAF;;AAEJ,kCAAA,lCAAMqB,4EAAQrB;AAAd,AACE,IAAAO,qBAA0B,gBAAA,AAAAmB,hBAACb,gCAAOb;AAAlC,AAAA,oBAAAO;AAAA,AAAA,IAAAe,aAAAf;cAAA,AAAAgB,4CAAAD,WAAA,IAAA,rEAAYE;WAAZ,AAAAD,4CAAAD,WAAA,IAAA,lEAAoBG;AAApB,AACE,AAACN,mDAAMnB,KAAK2B,iBAAOH;;AACnBC;;AAFF;;;AAIF,mCAAA,nCAAMG,8EAAS5B,KAAKyB;AAApB,AACE,OAACN,mDAAMnB,KAAKoB,gBAAM,AAAQK,UAAMA;;AAElC,2BAAA,3BAAMI,8DAAM7B;AAAZ,AACE,uBAAA,AAAA0B,hBAACd,gCAAOZ","names":["zombie.util.pooling/pool","count","source","pool","cljs.core.atom","seq__10451","cljs.core/seq","chunk__10452","count__10453","i__10454","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","_","cljs.core.range","clone","js/module$node_modules$three$examples$jsm$utils$SkeletonUtils.clone","cljs.core.swap_BANG_","cljs.core/assoc","zombie.util.pooling/claim!","vec__10455","cljs.core.nth","item-id","item","cljs.core/deref","cljs.core/dissoc","zombie.util.pooling/return!","zombie.util.pooling/size"],"sourcesContent":["(ns zombie.util.pooling\r\n  (:require [\"three/examples/jsm/utils/SkeletonUtils\" :as SkeletonUtils]))\r\n\r\n(defn pool [count source]\r\n  (let [pool (atom {})]\r\n    (doseq [_ (range count)]\r\n      (let [clone (SkeletonUtils/clone source)\r\n            _ (set! (.-animations clone) (.-animations source))]\r\n        (swap! pool assoc (.-uuid clone) clone)))\r\n    pool))\r\n\r\n(defn claim! [pool]\r\n  (when-let [[item-id item] (first @pool)]\r\n    (swap! pool dissoc item-id)\r\n    item))\r\n\r\n(defn return! [pool item]\r\n  (swap! pool assoc (.-uuid item) item))\r\n\r\n(defn size [pool]\r\n  (count @pool))\r\n\r\n\r\n"]}