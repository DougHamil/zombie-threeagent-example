{"version":3,"sources":["zombie/scene/system/physics/body.cljs"],"mappings":"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","names":["zombie.scene.system.physics.body/v1","js/module$node_modules$three$build$three_module.Vector3","zombie.scene.system.physics.body/quat1","js/module$node_modules$three$build$three_module.Quaternion","zombie.scene.system.physics.body/euler1","js/module$node_modules$three$build$three_module.Euler","js/zombie","js/zombie.scene","js/zombie.scene.system","js/zombie.scene.system.physics","js/zombie.scene.system.physics.body","js/zombie.scene.system.physics.body.create-body*","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","cljs.core.get","fexpr__13083","cljs.core/MultiFn","cljs.core.symbol","zombie.scene.system.physics.body/create-body*","p__13086","map__13087","cljs.core/--destructure-map","scale","width","height","position","settings","vec__13088","cljs.core.nth","x","_","z","js/module$node_modules$matter_js$build$matter.Bodies","cljs.core/clj->js","p__13091","map__13092","radius","vec__13100","p__13106","map__13107","angle","model-type","map__13111","vec__13112","bb","cljs.core/deref","zombie.state.databases/model-colliders","min","max","w","h","px","pz","body","cljs.core.assoc","zombie.scene.system.physics.body/world-transform","world-scale","obj","p1__13118#","cljs.core.map","zombie.util.threejs/vector3->tuple","zombie.util.threejs/get-world-rotation","zombie.scene.system.physics.body/create-body","object","part-defs","map__13119","parts","p__13120","vec__13121","key","part-def","part","temp__5753__auto__","on-coll","cljs.core/to-array","parent","cljs.core/first","js/module$node_modules$matter_js$build$matter.Body"],"sourcesContent":["(ns zombie.scene.system.physics.body\r\n  (:require [\"matter-js\" :refer [Bodies Body]]\r\n            [\"three\" :as three]\r\n            [zombie.util.threejs :refer [vector3->tuple\r\n                                       get-world-rotation]]\r\n            [zombie.state.databases :as db]))\r\n\r\n(def ^:private v1 (three/Vector3.))\r\n(def ^:private quat1 (three/Quaternion.))\r\n(def ^:private euler1 (three/Euler.))\r\n\r\n(defmulti create-body* :type)\r\n\r\n(defmethod create-body* :rectangle [{:keys [scale width height position settings]}]\r\n  (let [[x _ z] position]\r\n    (.rectangle Bodies\r\n                x\r\n                z\r\n                (* scale width)\r\n                (* scale height)\r\n                (clj->js settings))))\r\n\r\n(defmethod create-body* :circle [{:keys [scale radius position settings]}]\r\n  (let [[x _ z] position]\r\n    (.circle Bodies\r\n             x\r\n             z\r\n             (* scale radius)\r\n             (clj->js settings))))\r\n\r\n(defmethod create-body* :model-bounding-box [{:keys [scale position angle model-type settings]}]\r\n  (let [{bb :bounding-box} (get @db/model-colliders model-type)\r\n        min ^three/Vector3 (.-min bb)\r\n        max ^three/Vector3 (.-max bb)\r\n        w (- (.-x max) (.-x min))\r\n        h (- (.-z max) (.-z min))\r\n        [px _ pz] position\r\n        body (.rectangle Bodies\r\n                         px\r\n                         pz\r\n                         (* scale w)\r\n                         (* scale h)\r\n                         (clj->js (assoc settings :angle angle)))]\r\n    (set! (.-originOffset body) [0 0])\r\n    body))\r\n\r\n(defn- world-transform [world-scale ^three/Object3D obj]\r\n  {:position (map #(* world-scale %)\r\n                  (vector3->tuple (.getWorldPosition obj v1)))\r\n   :angle (-> (get-world-rotation obj euler1)\r\n              (.reorder \"YXZ\")\r\n              (.-y))\r\n   :scale (* world-scale\r\n             (.-x (.getWorldScale obj v1)))})\r\n\r\n(defn create-body [world-scale ^three/Object3D object part-defs]\r\n  (let [{:keys [position angle scale]} (world-transform world-scale object)\r\n        parts (->> part-defs\r\n                   (map (fn [[key part-def]]\r\n                          (let [part ^Body (create-body* (assoc part-def\r\n                                                                :angle angle\r\n                                                                :object object\r\n                                                                :position position\r\n                                                                :scale scale))]\r\n                            (when-let [on-coll (:on-collision-start part-def)]\r\n                              (set! (.-onCollisionStart part) on-coll))\r\n                            (set! (.-key part) key)\r\n                            part)))\r\n                   (to-array))\r\n        parent (first parts)]\r\n    (.setParts Body parent parts)\r\n    {:body parent\r\n     :angle-offset angle}))\r\n"]}