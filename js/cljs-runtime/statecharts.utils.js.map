{"version":3,"sources":["statecharts/utils.cljc"],"mappings":";AAEA,kCAAA,lCAAMA,4EAAeC;AAArB,AACE,GACE,AAACC,wBAAQD;AACTA;;AAFF,GAIE,MAAA,LAAMA;AAJR;;AAAA,AAAA,0FAQGA;;;;;AAEL,qCAAA,rCAAME,kFAAkBF;AAAxB,AACE,GAAI,AAACG,qBAAKH;AACRA;;AADF,kDAAA,qDAESA;;;AAEX,2BAAA,3BAAMI,8DAAQC,EAAEC;AAAhB,uEAEO,AAACC,4CAAI,WAAAC,9HAEL,OAACK,6CAAK,AAACC,gBAAMR;AAFR,AAAA,IAAAG,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAME;QAAN,AAAAD,4CAAAD,WAAA,IAAA,/DAAQG;AAAR,AACE,QAACP,kCAAAA,uCAAAA,PAAEM,mBAAAA,jBAAEC,mBAAAA;GAFZN;;AAKP,6BAAA,7BAAMS,kEAAUV,EAAEC;AAAlB,uEAEO,AAACC,4CAAI,WAAAS,9HAEL,OAACH,6CAAK,AAACC,gBAAMR;AAFR,AAAA,IAAAW,aAAAD;QAAA,AAAAN,4CAAAO,WAAA,IAAA,/DAAMN;QAAN,AAAAD,4CAAAO,WAAA,IAAA,/DAAQL;AAAR,AAAA,0FACGD,EAAE,CAACN,kCAAAA,qCAAAA,LAAEO,iBAAAA;GAFbN;;AAKP,gCAAA,hCAAMY,wEAAab,EAAEC;AAArB,uEAEO,AAACC,4CAAI,WAAAY,9HAEL,OAACN,6CAAK,AAACC,gBAAMR;AAFR,AAAA,IAAAc,aAAAD;QAAA,AAAAT,4CAAAU,WAAA,IAAA,/DAAMT;QAAN,AAAAD,4CAAAU,WAAA,IAAA,/DAAQR;AAAR,AAAA,0FACGD,EAAE,CAACN,kCAAAA,uCAAAA,PAAEM,mBAAAA,jBAAEC,mBAAAA;GAFfN;;AAKP,gCAAA,hCAAMe,wEAAaC,KAAKhB;AAAxB,uEAEO,AAACiB,+CAAO,WAAAC,jIAER,OAACX,6CAAK,AAACC,gBAAMR;AAFL,AAAA,IAAAmB,aAAAD;QAAA,AAAAd,4CAAAe,WAAA,IAAA,/DAAMC;QAAN,AAAAhB,4CAAAe,WAAA,IAAA,/DAAQb;AAAR,AACE,QAACU,qCAAAA,wCAAAA,LAAKV,oBAAAA;GAFhBN;;AAKP,+BAAA,/BAAMqB,sEAAYL,KAAKM;AAAvB,AACE,2EAAKA,pDACA,AAACC,+CAAOP,/DACRQ;;AAEP,+BAAA,/BAAMC,sEAAYH;AAAlB,AACE,OAACrB,4CAAIyB,iBAAOJ,KAAK,AAACK;;AAEpB;;;gCAAA,hCAAMC,wEAEHlC;AAFH,AAGE,GAAI,6CAAA,7CAACmC,iDAAI,AAACC,gBAAMpC;AACd,OAAC8B,gBAAM9B;;AACPA","names":["statecharts.utils/ensure-vector","x","cljs.core/vector?","statecharts.utils/ensure-event-map","cljs.core/map?","statecharts.utils/map-kv","f","m","cljs.core.map","p__12531","vec__12532","cljs.core.nth","k","v","cljs.core.into","cljs.core/empty","statecharts.utils/map-vals","p__12535","vec__12536","statecharts.utils/map-kv-vals","p__12539","vec__12540","statecharts.utils/remove-vals","pred","cljs.core.remove","p__12543","vec__12544","_","statecharts.utils/find-first","coll","cljs.core.filter","cljs.core/first","statecharts.utils/with-index","cljs.core/vector","cljs.core.range","statecharts.utils/devectorize","cljs.core._EQ_","cljs.core/count"],"sourcesContent":["(ns statecharts.utils)\n\n(defn ensure-vector [x]\n  (cond\n    (vector? x)\n    x\n\n    (nil? x)\n    []\n\n    :else\n    [x]))\n\n(defn ensure-event-map [x]\n  (if (map? x)\n    x\n    {:type x}))\n\n(defn map-kv [f m]\n  (->> m\n       (map (fn [[k v]]\n              (f k v)))\n       (into (empty m))))\n\n(defn map-vals [f m]\n  (->> m\n       (map (fn [[k v]]\n              [k (f v)]))\n       (into (empty m))))\n\n(defn map-kv-vals [f m]\n  (->> m\n       (map (fn [[k v]]\n              [k (f k v)]))\n       (into (empty m))))\n\n(defn remove-vals [pred m]\n  (->> m\n       (remove (fn [[_ v]]\n                 (pred v)))\n       (into (empty m))))\n\n(defn find-first [pred coll]\n  (->> coll\n       (filter pred)\n       first))\n\n(defn with-index [coll]\n  (map vector coll (range)))\n\n(defn devectorize\n  \"Return the first element of x if x is a one-element vector.\"\n  [x]\n  (if (= 1 (count x))\n    (first x)\n    x))\n"]}