{"version":3,"sources":["zombie/scene/system/particle.cljs"],"mappings":"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","names":["zombie.scene.system.particle/*next-particle-id*","zombie.scene.system.particle/v1","js/module$node_modules$three$build$three_module.Vector3","zombie.scene.system.particle/v2","zombie.scene.system.particle/e1","js/module$node_modules$three$build$three_module.Euler","zombie.scene.system.particle/create-text-body*","text","color","font-size","obj","js/module$node_modules$troika_three_text$dist$troika_three_text_esm.Text","cljs.core/deref","zombie.state.databases/assets","zombie.scene.system.particle/create-text-body","cljs.core/memoize","zombie.scene.system.particle/create-sprite-body","texture","mat","js/module$node_modules$three$build$three_module.SpriteMaterial","js/module$node_modules$three$build$three_module.Sprite","p__13008","vec__13009","cljs.core.nth","zombie.scene.system.particle/tuple->nebula-vector","x","y","z","js/module$node_modules$three_nebula$build$esm$index.Vector3D","zombie.scene.system.particle/look-at-rotation","source-pos","target-obj","pos","look-dir","zombie.util.threejs/tuple->vector3","zombie.util.threejs/direction-tuple->rotation-tuple","zombie.util.threejs/vector3->tuple","js/zombie","js/zombie.scene","js/zombie.scene.system","js/zombie.scene.system.particle","js/zombie.scene.system.particle.create-emitter","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","cljs.core.get","fexpr__13012","cljs.core/MultiFn","cljs.core.symbol","zombie.scene.system.particle/create-emitter","p__13013","map__13014","cljs.core/--destructure-map","speed","spread","position","cam","zombie.state.databases/entity-objects","rot","rotate","js/module$node_modules$three_nebula$build$esm$index.Rotate","js/module$node_modules$three_nebula$build$esm$index.Emitter","js/module$node_modules$three_nebula$build$esm$index.Rate","js/module$node_modules$three_nebula$build$esm$index.Span","js/module$node_modules$three_nebula$build$esm$index.Position","js/module$node_modules$three_nebula$build$esm$index.PointZone","js/module$node_modules$three_nebula$build$esm$index.VectorVelocity","or__4212__auto__","js/module$node_modules$three_nebula$build$esm$index.Mass","js/module$node_modules$three_nebula$build$esm$index.Body","js/module$node_modules$three_nebula$build$esm$index.Life","cljs.core/to-array","js/module$node_modules$three_nebula$build$esm$index.Alpha","p__13028","map__13029","direction","scale","dir","js/module$node_modules$three_nebula$build$esm$index.Radius","js/module$node_modules$three_nebula$build$esm$index.RadialVelocity","js/module$node_modules$three_nebula$build$esm$index.Scale","js/module$node_modules$three_nebula$build$esm$index.Gravity","js/module$node_modules$three_nebula$build$esm$index.Color","js/module$node_modules$three$build$three_module.Color","p__13031","map__13032","p__13033","map__13034","p__13035","map__13036","vec__13037","px","py","pz","js/module$node_modules$three_nebula$build$esm$index.SphereZone","js/module$node_modules$three_nebula$build$esm$index.Attraction","_","js/module$node_modules$three_nebula$build$esm$index.RandomDrift","zombie.scene.system.particle/create-system","container","system","js/module$node_modules$three_nebula$build$esm$index.System","renderer","js/module$node_modules$three_nebula$build$esm$index.MeshRenderer","js/module$node_modules$three$build$three_module","zombie.scene.system.particle/on-spawn-particle-system","cfg","cljs.core.swap_BANG_","zombie.state.databases/particles","cljs.core/assoc","cljs.core/PROTOCOL_SENTINEL","p__13040","map__13041","p__13042","map__13043","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","zombie.scene.system.particle/ParticleSystem","zombie.scene.system.particle/->ParticleSystem","bus","local-state","threejs-scene","zombie.util.messaging/on","cljs.core/reset!","_key","on-dead","loop?","world-pos","world-rot","zombie.util.threejs/get-world-rotation","emitter","cljs.core.assoc","cljs.core/assoc-in","_cfg","temp__5753__auto__","cljs.core.get_in","delta-time","zombie.scene.system.particle/create","event-bus"],"sourcesContent":["(ns zombie.scene.system.particle\r\n  (:require [threeagent.system :refer [ISystem]]\r\n            [\"three\" :as three]\r\n            [\"troika-three-text\" :as troika]\r\n            [\"three-nebula\" :as n]\r\n            [zombie.util.messaging :as message]\r\n            [zombie.util.threejs :refer [vector3->tuple\r\n                                       tuple->vector3\r\n                                       direction-tuple->rotation-tuple\r\n                                       get-world-rotation]]\r\n            [zombie.state.databases :as db]))\r\n\r\n(def ^:private ^:dynamic *next-particle-id* 0)\r\n(def ^:private v1 (three/Vector3.))\r\n(def ^:private v2 (three/Vector3.))\r\n(def ^:private e1 (three/Euler.))\r\n\r\n(defn- create-text-body* [text color font-size]\r\n  (let [obj (troika/Text.)]\r\n    (when color\r\n      (set! (.-color obj) color))\r\n    (set! (.-text obj) text)\r\n    (set! (.-font obj) (:font/bebas @db/assets))\r\n    (set! (.-fontSize obj) font-size)\r\n    obj))\r\n\r\n(def create-text-body (memoize create-text-body*))\r\n\r\n(defn- create-sprite-body []\r\n  (let [texture (:texture/particle-circle-fade @db/assets)\r\n        mat (three/SpriteMaterial. #js {:map texture})]\r\n    (three/Sprite. mat)))\r\n\r\n(defn- tuple->nebula-vector [[x y z]]\r\n  (n/Vector3D. x y z))\r\n\r\n(defn- look-at-rotation [source-pos ^three/Object3D target-obj]\r\n  (let [pos (.getWorldPosition target-obj v2)\r\n        look-dir (-> pos\r\n                     (.sub (tuple->vector3 source-pos))\r\n                     (.normalize))]\r\n    (direction-tuple->rotation-tuple (vector3->tuple look-dir))))\r\n\r\n(defmulti create-emitter :type)\r\n\r\n(defmethod create-emitter :floating-text\r\n  [{color :color\r\n    speed :speed\r\n    spread :spread\r\n    position :position\r\n    font-size :font-size\r\n    text :text}]\r\n  (let [cam (get @db/entity-objects \"camera\")\r\n        rot (look-at-rotation position cam)\r\n        rotate (n/Rotate. (tuple->nebula-vector rot))]\r\n    (-> (n/Emitter.)\r\n        (.setRate (n/Rate. (n/Span. 1 1) (n/Span. 1)))\r\n        (.setInitializers #js [(n/Position. (n/PointZone. 0 0))\r\n                               (n/VectorVelocity. (n/Vector3D. 0 (or speed 2) 0)\r\n                                                  (or spread 0))\r\n                               (n/Mass. 1)\r\n                               (n/Body. (create-text-body text color (or font-size 0.8)))\r\n                               (n/Life. 1)])\r\n        (.setBehaviours (to-array [(n/Alpha. 1.0 0.0)\r\n                                   rotate])))))\r\n  \r\n(defmethod create-emitter :wood-explosion\r\n  [{:keys [direction scale]}]\r\n  (let [dir (tuple->nebula-vector (or direction [0 1 0]))\r\n        scale (* 0.005 (or scale 1.0))]\r\n    (-> (n/Emitter.)\r\n        (.setRate (n/Rate. (n/Span. 5 5) (n/Span. 1)))\r\n        (.setInitializers #js [(n/Position. (n/PointZone. 0 0))\r\n                               (n/Mass. 1)\r\n                               (n/Radius. 0.2 0.2)\r\n                               (n/Life. 1)\r\n                               (n/RadialVelocity. 20 dir 25)])\r\n        (.setBehaviours #js [(n/Alpha. 1 0.0)\r\n                             (n/Scale. scale scale)\r\n                             (n/Gravity. 0.9)\r\n                             (n/Color. (three/Color. 0x964B00) (three/Color. 0x964B00))]))))\r\n\r\n(defmethod create-emitter :blood-fountain ;; Metal AF\r\n  [{:keys [direction scale]}]\r\n  (let [dir (tuple->nebula-vector (or direction [0 1 0]))\r\n        scale (* 0.005 (or scale 1.0))]\r\n    (-> (n/Emitter.)\r\n        (.setRate (n/Rate. (n/Span. 5 5) (n/Span. 1)))\r\n        (.setInitializers #js [(n/Position. (n/PointZone. 0 0))\r\n                               (n/Mass. 1)\r\n                               (n/Radius. 0.2 0.2)\r\n                               (n/Life. 1)\r\n                               (n/RadialVelocity. 20 dir 25)])\r\n        (.setBehaviours #js [(n/Alpha. 1 0.0)\r\n                             (n/Scale. scale scale)\r\n                             (n/Gravity. 0.9)\r\n                             (n/Color. (three/Color. 0xAA0000) (three/Color. 0xAA0000))]))))\r\n\r\n(defmethod create-emitter :impact-sparks\r\n  [{:keys [direction]}]\r\n  (let [dir (tuple->nebula-vector (or direction [0 0 1]))]\r\n    (-> (n/Emitter.)\r\n        (.setRate (n/Rate. (n/Span. 5 5) (n/Span. 1)))\r\n        (.setInitializers #js [(n/Position. (n/PointZone. 0 0))\r\n                               (n/Mass. 1)\r\n                               (n/Radius. 0.1 0.1)\r\n                               (n/Life. 0.2)\r\n                               (n/RadialVelocity. 20 dir 20)])\r\n        (.setBehaviours #js [(n/Alpha. 0.5 1.0)\r\n                             (n/Scale. 0.002 0.002)\r\n                             (n/Color. (three/Color. 0xFFFF00) (three/Color. 0xFFFF00))]))))\r\n\r\n(defmethod create-emitter :moths\r\n  [{[px py pz] :as position :position}]\r\n  (-> (n/Emitter.)\r\n      (.setRate (n/Rate. (n/Span. 1 1) (n/Span. 0.2 0.2)))\r\n      (.setInitializers #js [(n/Position. (n/SphereZone. px py pz 0.5))\r\n                             (n/Radius. 0.1 0.1)\r\n                             (n/VectorVelocity. (n/Vector3D. 0 1.0 0) 180)\r\n                             (n/Body. (create-sprite-body))\r\n                             (n/Life. 2.5)\r\n                             (n/Mass. 1)])\r\n      (.setBehaviours #js [(n/Alpha. 0.4 0.0)\r\n                           (n/Scale. 0.08 0.001)\r\n                           (n/Rotate. 0.5 0.0 1)\r\n                           (n/Attraction. (tuple->vector3 position) 0.05 3)\r\n                           ;(n/RandomDrift. 0.05 0 0.05 0.2)\r\n                           (n/Color. (three/Color. 0xF9B800) (three/Color. 0xF9B800))])))\r\n\r\n(defmethod create-emitter :smoke-trail-loop\r\n  [_]\r\n  (-> (n/Emitter.)\r\n      (.setRate (n/Rate. (n/Span. 1 1) (n/Span. 0.3 0.3)))\r\n      (.setInitializers #js [(n/Position. (n/PointZone. 0 0 0))\r\n                             (n/Radius. 0.1 0.1)\r\n                             (n/VectorVelocity. (n/Vector3D. 0 0.3 0) 1)\r\n                             (n/Body. (create-sprite-body))\r\n                             (n/Life. 1.5)\r\n                             (n/Mass. 1)])\r\n      (.setBehaviours #js [(n/Alpha. 0.4 0.0)\r\n                           (n/Scale. 0.001 (n/Span. 0.3 0.4))\r\n                           (n/Rotate. 0.5 0.0 1)\r\n                           (n/RandomDrift. 0.05 0 0.05 0.2)\r\n                           (n/Color. (three/Color. 0xEEEEEE) (three/Color. 0xBBBBBB))])))\r\n\r\n\r\n(defn- create-system [container]\r\n  (let [system (n/System.)\r\n        renderer (n/MeshRenderer. container three)]\r\n    (.addRenderer system renderer)\r\n    system))\r\n\r\n(defn- on-spawn-particle-system [cfg]\r\n  (set! *next-particle-id* (inc *next-particle-id*))\r\n  (swap! db/particles assoc *next-particle-id* cfg))\r\n\r\n(deftype ParticleSystem [bus local-state]\r\n  ISystem\r\n  (init [_ {:keys [threejs-scene]}]\r\n    (let [system (create-system threejs-scene)]\r\n      (message/on bus :particles/spawn on-spawn-particle-system)\r\n      (reset! local-state {:system system})))\r\n  (destroy [_ _]\r\n    (.destroy (:system @local-state)))\r\n  (on-entity-added [_ _ _key ^three/Object3D obj {:keys [on-dead\r\n                                                         loop?] :as cfg}]\r\n    (let [world-pos (.getWorldPosition obj v1)\r\n          world-rot (get-world-rotation obj e1)\r\n          system ^n/System (:system @local-state)\r\n          emitter ^n/Emitter (create-emitter (assoc cfg\r\n                                                    :position (vector3->tuple world-pos)\r\n                                                    :rotation (vector3->tuple world-rot)))]\r\n      (.setPosition emitter (.clone world-pos))\r\n      (.setRotation emitter world-rot)\r\n      (.addEmitter system emitter)\r\n      (swap! local-state assoc-in [:emitters obj] emitter)\r\n      (if loop?\r\n        (.emit emitter)\r\n        (.emit emitter 1 0.5))\r\n      (when on-dead\r\n        (.addOnEmitterDeadEventListener emitter on-dead))))\r\n  (on-entity-removed [_ _ _key obj _cfg]\r\n    (when-let [emitter (get-in @local-state [:emitters obj])]\r\n      (.destroy emitter)))\r\n  (tick [_ delta-time]\r\n    (.update ^n/System (:system @local-state)\r\n             delta-time)))\r\n\r\n(defn create [event-bus]\r\n  (->ParticleSystem event-bus (atom {})))\r\n"]}