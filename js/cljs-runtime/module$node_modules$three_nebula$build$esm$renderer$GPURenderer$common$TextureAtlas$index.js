shadow$provide.module$node_modules$three_nebula$build$esm$renderer$GPURenderer$common$TextureAtlas$index=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _types=require("module$node_modules$three_nebula$build$esm$renderer$types"),_constants=require("module$node_modules$three_nebula$build$esm$renderer$GPURenderer$common$TextureAtlas$constants"),_constants2=require("module$node_modules$three_nebula$build$esm$constants$index"),
_potpack=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require("module$node_modules$potpack$index_mjs"));class TextureAtlas{constructor(renderer,shouldDebug){const {three:THREE,type:rendererType}=renderer,data=new Float32Array(4*_constants.DATA_TEXTURE_SIZE),ctx=this.ctx=document.createElement("canvas").getContext("2d"),{canvas}=ctx;this.shouldDebug=shouldDebug;this.rendererType=rendererType;this.indexData=data;this.canvas=canvas;this.entries=[];rendererType===_types.RENDERER_TYPE_GPU_DESKTOP&&
(this.atlasIndex=new THREE.DataTexture(data,_constants.DATA_TEXTURE_SIZE,1,THREE.RGBAFormat,THREE.FloatType));canvas.width=canvas.height=_constants.DATA_TEXTURE_SIZE;shouldDebug&&this.debug(canvas,ctx);this.atlasTexture=new THREE.CanvasTexture(canvas);this.atlasTexture.flipY=!1;renderer.material.uniforms.uTexture.value=this.atlasTexture;rendererType===_types.RENDERER_TYPE_GPU_DESKTOP&&(renderer.material.uniforms.atlasIndex.value=this.atlasIndex);renderer.material.uniformsNeedUpdate=!0}log(...args){_constants2.__DEV__&&
console.log(...args)}debug(){const {canvas,ctx}=this,halfmax=canvas.width;ctx.fillStyle="purple";ctx.fillRect(0,0,halfmax,halfmax);ctx.fillStyle="green";ctx.fillRect(0,halfmax,halfmax,halfmax);ctx.fillStyle="blue";ctx.fillRect(halfmax,0,halfmax,halfmax);ctx.fillStyle="orange";ctx.fillRect(halfmax,halfmax,halfmax,halfmax);ctx.fillStyle="yellow";ctx.font=canvas.width+"px Verdana";ctx.fillText("top row",100,500);ctx.fillStyle="pink";ctx.fillText("bottom row",100,1500);canvas.style.position="absolute";
canvas.style.width=canvas.style.height="300px";canvas.style.left=canvas.style.top="0px";canvas.style.zIndex=100;document.body.appendChild(canvas)}addTexture(texture){this.log("Adding texture to atlas:",texture.uuid);texture.textureIndex=this.entries.length;this.entries.push({texture});this.needsUpdate=!0}update(){if(this.needsUpdate){var {entries,canvas,indexData,ctx,atlasIndex,atlasTexture,rendererType}=this;for(var i=0;i<entries.length;i++)if(!entries[i].texture.image)return;this.needsUpdate=!1;
for(i=0;i<entries.length;i++){var e=entries[i],{texture}=e;const {width,height}=texture.image;e.w=width;e.h=height}i=(0,_potpack.default)(entries);this.log("Rebuilt atlas:",i);if(canvas.width!=i.w||canvas.height!=i.h)canvas.width=i.w,canvas.height=i.h;for(i=0;i<entries.length;i++)e=this.entries[i],texture=4*e.texture.textureIndex,rendererType===_types.RENDERER_TYPE_GPU_DESKTOP&&(indexData[texture+0]=e.x/canvas.width,indexData[texture+1]=e.y/canvas.height,indexData[texture+2]=(e.x+e.w)/canvas.width,
indexData[texture+3]=(e.y+e.h)/canvas.height),rendererType===_types.RENDERER_TYPE_GPU_MOBILE&&(indexData[texture+0]=e.x/(canvas.width+1),indexData[texture+1]=e.y/(canvas.height+1),indexData[texture+2]=(e.x+e.w)/(canvas.width+1),indexData[texture+3]=(e.y+e.h)/(canvas.height+1)),ctx.drawImage(e.texture.image,e.x,e.y,e.w,e.h);rendererType===_types.RENDERER_TYPE_GPU_DESKTOP&&(atlasIndex.needsUpdate=!0);atlasTexture.needsUpdate=!0}}destroy(){const {atlasIndex,atlasTexture,canvas}=this;atlasTexture.dispose();
atlasIndex&&atlasIndex.dispose();this.shouldDebug&&canvas.remove();this.entries=[]}}exports.default=TextureAtlas}
//# sourceMappingURL=module$node_modules$three_nebula$build$esm$renderer$GPURenderer$common$TextureAtlas$index.js.map
