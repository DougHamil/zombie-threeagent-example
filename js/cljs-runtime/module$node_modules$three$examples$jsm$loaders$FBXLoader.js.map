{
"version":3,
"file":"module$node_modules$three$examples$jsm$loaders$FBXLoader.js",
"lineCount":121,
"mappings":"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",
"sources":["node_modules/three/examples/jsm/loaders/FBXLoader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three$examples$jsm$loaders$FBXLoader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FBXLoader = void 0;\n\nvar _three = require(\"three\");\n\nvar fflate = _interopRequireWildcard(require(\"../libs/fflate.module.js\"));\n\nvar _NURBSCurve = require(\"../curves/NURBSCurve.js\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\nlet fbxTree;\nlet connections;\nlet sceneGraph;\n\nclass FBXLoader extends _three.Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? _three.LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new _three.FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error('THREE.FBXLoader: Unknown format.');\n      }\n\n      if (getFbxVersion(FBXText) < 7000) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n      }\n\n      fbxTree = new TextParser().parse(FBXText);\n    } // console.log( fbxTree );\n\n\n    const textureLoader = new _three.TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n\n} // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\n\n\nexports.FBXLoader = FBXLoader;\n\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  } // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n\n\n  parseConnections() {\n    const connectionMap = new Map();\n\n    if ('Connections' in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function (rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n\n        const parentRelationship = {\n          ID: toID,\n          relationship: relationship\n        };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n\n        const childRelationship = {\n          ID: fromID,\n          relationship: relationship\n        };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n\n    return connectionMap;\n  } // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n\n\n  parseImages() {\n    const images = {};\n    const blobs = {};\n\n    if ('Video' in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n        if ('Content' in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n    }\n\n    return images;\n  } // Parse embedded image data in FBXTree.Video.Content\n\n\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n    let type;\n\n    switch (extension) {\n      case 'bmp':\n        type = 'image/bmp';\n        break;\n\n      case 'jpg':\n      case 'jpeg':\n        type = 'image/jpeg';\n        break;\n\n      case 'png':\n        type = 'image/png';\n        break;\n\n      case 'tif':\n        type = 'image/tiff';\n        break;\n\n      case 'tga':\n        if (this.manager.getHandler('.tga') === null) {\n          console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n        }\n\n        type = 'image/tga';\n        break;\n\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n\n    if (typeof content === 'string') {\n      // ASCII format\n      return 'data:' + type + ';base64,' + content;\n    } else {\n      // Binary Format\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], {\n        type: type\n      }));\n    }\n  } // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n\n\n  parseTextures(images) {\n    const textureMap = new Map();\n\n    if ('Texture' in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n\n    return textureMap;\n  } // Parse individual node in FBXTree.Objects.Texture\n\n\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n    // 0: repeat(default), 1: clamp\n\n    texture.wrapS = valueU === 0 ? _three.RepeatWrapping : _three.ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? _three.RepeatWrapping : _three.ClampToEdgeWrapping;\n\n    if ('Scaling' in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n\n    return texture;\n  } // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\n\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n\n    if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n      fileName = images[children[0].ID];\n\n      if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n        this.textureLoader.setPath(undefined);\n      }\n    }\n\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n\n    if (extension === 'tga') {\n      const loader = this.manager.getHandler('.tga');\n\n      if (loader === null) {\n        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new _three.Texture();\n      } else {\n        loader.setPath(this.textureLoader.path);\n        texture = loader.load(fileName);\n      }\n    } else if (extension === 'psd') {\n      console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n      texture = new _three.Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  } // Parse nodes in FBXTree.Objects.Material\n\n\n  parseMaterials(textureMap) {\n    const materialMap = new Map();\n\n    if ('Material' in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null) materialMap.set(parseInt(nodeID), material);\n      }\n    }\n\n    return materialMap;\n  } // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n\n\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n    if (typeof type === 'object') {\n      type = type.value;\n    } // Ignore unused materials which don't have any connections.\n\n\n    if (!connections.has(ID)) return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n\n    switch (type.toLowerCase()) {\n      case 'phong':\n        material = new _three.MeshPhongMaterial();\n        break;\n\n      case 'lambert':\n        material = new _three.MeshLambertMaterial();\n        break;\n\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new _three.MeshPhongMaterial();\n        break;\n    }\n\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  } // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n\n\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n\n    if (materialNode.Diffuse) {\n      parameters.color = new _three.Color().fromArray(materialNode.Diffuse.value);\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n      // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n      parameters.color = new _three.Color().fromArray(materialNode.DiffuseColor.value);\n    }\n\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n\n    if (materialNode.Emissive) {\n      parameters.emissive = new _three.Color().fromArray(materialNode.Emissive.value);\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n      // The blender exporter exports emissive color here instead of in materialNode.Emissive\n      parameters.emissive = new _three.Color().fromArray(materialNode.EmissiveColor.value);\n    }\n\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n\n    if (parameters.opacity < 1.0) {\n      parameters.transparent = true;\n    }\n\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n\n    if (materialNode.Specular) {\n      parameters.specular = new _three.Color().fromArray(materialNode.Specular.value);\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n      // The blender exporter exports specular color here instead of in materialNode.Specular\n      parameters.specular = new _three.Color().fromArray(materialNode.SpecularColor.value);\n    }\n\n    const scope = this;\n    connections.get(ID).children.forEach(function (child) {\n      const type = child.relationship;\n\n      switch (type) {\n        case 'Bump':\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'Maya|TEX_ao_map':\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'DiffuseColor':\n        case 'Maya|TEX_color_map':\n          parameters.map = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.map !== undefined) {\n            parameters.map.encoding = _three.sRGBEncoding;\n          }\n\n          break;\n\n        case 'DisplacementColor':\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'EmissiveColor':\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.emissiveMap !== undefined) {\n            parameters.emissiveMap.encoding = _three.sRGBEncoding;\n          }\n\n          break;\n\n        case 'NormalMap':\n        case 'Maya|TEX_normal_map':\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'ReflectionColor':\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.envMap !== undefined) {\n            parameters.envMap.mapping = _three.EquirectangularReflectionMapping;\n            parameters.envMap.encoding = _three.sRGBEncoding;\n          }\n\n          break;\n\n        case 'SpecularColor':\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.specularMap !== undefined) {\n            parameters.specularMap.encoding = _three.sRGBEncoding;\n          }\n\n          break;\n\n        case 'TransparentColor':\n        case 'TransparencyFactor':\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n\n        case 'AmbientColor':\n        case 'ShininessExponent': // AKA glossiness map\n\n        case 'SpecularFactor': // AKA specularLevel\n\n        case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n        default:\n          console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n          break;\n      }\n    });\n    return parameters;\n  } // get a texture from the textureMap for use by a material.\n\n\n  getTexture(textureMap, id) {\n    // if the texture is a layered texture, just use the first layer and issue a warning\n    if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n      id = connections.get(id).children[0].ID;\n    }\n\n    return textureMap.get(id);\n  } // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\n\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n\n    if ('Deformer' in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n\n        if (deformerNode.attrType === 'Skin') {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n          if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === 'BlendShape') {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n          if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n\n    return {\n      skeletons: skeletons,\n      morphTargets: morphTargets\n    };\n  } // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n\n\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function (child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== 'Cluster') return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new _three.Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n\n      };\n\n      if ('Indexes' in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones: rawBones,\n      bones: []\n    };\n  } // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\n\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n        return child.relationship === undefined;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n\n    return rawMorphTargets;\n  } // create the main Group() to be returned by the loader\n\n\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new _three.Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function (model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function (connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== undefined) parent.add(model);\n      });\n\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.createAmbientLight();\n    sceneGraph.traverse(function (node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n\n    sceneGraph.animations = animations;\n  } // parse nodes in FBXTree.Objects.Model\n\n\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = new Map();\n    const modelNodes = fbxTree.Objects.Model;\n\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n\n      if (!model) {\n        switch (node.attrType) {\n          case 'Camera':\n            model = this.createCamera(relationships);\n            break;\n\n          case 'Light':\n            model = this.createLight(relationships);\n            break;\n\n          case 'Mesh':\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n\n          case 'NurbsCurve':\n            model = this.createCurve(relationships, geometryMap);\n            break;\n\n          case 'LimbNode':\n          case 'Root':\n            model = new _three.Bone();\n            break;\n\n          case 'Null':\n          default:\n            model = new _three.Group();\n            break;\n        }\n\n        model.name = node.attrName ? _three.PropertyBinding.sanitizeNodeName(node.attrName) : '';\n        model.ID = id;\n      }\n\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n\n    return modelMap;\n  }\n\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function (parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new _three.Bone();\n            bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n            bone.name = name ? _three.PropertyBinding.sanitizeNodeName(name) : '';\n            bone.ID = id;\n            skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n            // duplicate the bone here and and it as a child of the first bone\n\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  } // create a PerspectiveCamera or OrthographicCamera\n\n\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n      if (attr !== undefined) {\n        cameraAttribute = attr;\n      }\n    });\n\n    if (cameraAttribute === undefined) {\n      model = new _three.Object3D();\n    } else {\n      let type = 0;\n\n      if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n\n      let nearClippingPlane = 1;\n\n      if (cameraAttribute.NearPlane !== undefined) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n      }\n\n      let farClippingPlane = 1000;\n\n      if (cameraAttribute.FarPlane !== undefined) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n      }\n\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n\n      if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n\n      const aspect = width / height;\n      let fov = 45;\n\n      if (cameraAttribute.FieldOfView !== undefined) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n      switch (type) {\n        case 0:\n          // Perspective\n          model = new _three.PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null) model.setFocalLength(focalLength);\n          break;\n\n        case 1:\n          // Orthographic\n          model = new _three.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n          model = new _three.Object3D();\n          break;\n      }\n    }\n\n    return model;\n  } // Create a DirectionalLight, PointLight or SpotLight\n\n\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n      if (attr !== undefined) {\n        lightAttribute = attr;\n      }\n    });\n\n    if (lightAttribute === undefined) {\n      model = new _three.Object3D();\n    } else {\n      let type; // LightType can be undefined for Point lights\n\n      if (lightAttribute.LightType === undefined) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n\n      let color = 0xffffff;\n\n      if (lightAttribute.Color !== undefined) {\n        color = new _three.Color().fromArray(lightAttribute.Color.value);\n      }\n\n      let intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n      if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n\n      let distance = 0;\n\n      if (lightAttribute.FarAttenuationEnd !== undefined) {\n        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n\n      const decay = 1;\n\n      switch (type) {\n        case 0:\n          // Point\n          model = new _three.PointLight(color, intensity, distance, decay);\n          break;\n\n        case 1:\n          // Directional\n          model = new _three.DirectionalLight(color, intensity);\n          break;\n\n        case 2:\n          // Spot\n          let angle = Math.PI / 3;\n\n          if (lightAttribute.InnerAngle !== undefined) {\n            angle = _three.MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n\n          let penumbra = 0;\n\n          if (lightAttribute.OuterAngle !== undefined) {\n            // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n            // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n            // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n            penumbra = _three.MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n\n          model = new _three.SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n          model = new _three.PointLight(color, intensity);\n          break;\n      }\n\n      if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n\n    return model;\n  }\n\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = []; // get geometry and materials(s) from connections\n\n    relationships.children.forEach(function (child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new _three.MeshPhongMaterial({\n        color: 0xcccccc\n      });\n      materials.push(material);\n    }\n\n    if ('color' in geometry.attributes) {\n      materials.forEach(function (material) {\n        material.vertexColors = true;\n      });\n    }\n\n    if (geometry.FBX_Deformer) {\n      model = new _three.SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new _three.Mesh(geometry, material);\n    }\n\n    return model;\n  }\n\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function (geo, child) {\n      if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n      return geo;\n    }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n    const material = new _three.LineBasicMaterial({\n      color: 0x3300ff,\n      linewidth: 1\n    });\n    return new _three.Line(geometry, material);\n  } // parse the model node for transform data\n\n\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n    if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n    if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n    if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n    if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n    if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n    if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n    if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n\n  setLookAtProperties(model, modelNode) {\n    if ('LookAtProperty' in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function (child) {\n        if (child.relationship === 'LookAtProperty') {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n\n          if ('Lcl_Translation' in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n            if (model.target !== undefined) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              // Cameras and other Object3Ds\n              model.lookAt(new _three.Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function (parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function (geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new _three.Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n\n  parsePoseNodes() {\n    const bindMatrices = {};\n\n    if ('Pose' in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === 'BindPose') {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function (poseNode) {\n              bindMatrices[poseNode.Node] = new _three.Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new _three.Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n\n    return bindMatrices;\n  } // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\n\n  createAmbientLight() {\n    if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n      const r = ambientColor[0];\n      const g = ambientColor[1];\n      const b = ambientColor[2];\n\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new _three.Color(r, g, b);\n        sceneGraph.add(new _three.AmbientLight(color, 1));\n      }\n    }\n  }\n\n} // parse Geometry data from FBXTree and return map of BufferGeometries\n\n\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = new Map();\n\n    if ('Geometry' in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n\n    return geometryMap;\n  } // Parse single node in FBXTree.Objects.Geometry\n\n\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case 'Mesh':\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n        break;\n\n      case 'NurbsCurve':\n        return this.parseNurbsGeometry(geoNode);\n        break;\n    }\n  } // Parse single node mesh geometry in FBXTree.Objects.Geometry\n\n\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function (parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    }); // don't create geometry if it is not associated with any models\n\n    if (modelNodes.length === 0) return;\n    const skeleton = relationships.children.reduce(function (skeleton, child) {\n      if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n      return skeleton;\n    }, null);\n    relationships.children.forEach(function (child) {\n      if (deformers.morphTargets[child.ID] !== undefined) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    }); // Assume one model and get the preRotation from that\n    // if there is more than one model associated with the geometry this may cause problems\n\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n    if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n    if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  } // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\n\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new _three.BufferGeometry();\n    if (geoNode.attrName) geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new _three.Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute('position', positionAttribute);\n\n    if (buffers.colors.length > 0) {\n      geo.setAttribute('color', new _three.Float32BufferAttribute(buffers.colors, 3));\n    }\n\n    if (skeleton) {\n      geo.setAttribute('skinIndex', new _three.Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute('skinWeight', new _three.Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n      geo.FBX_Deformer = skeleton;\n    }\n\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new _three.Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new _three.Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute('normal', normalAttribute);\n    }\n\n    buffers.uvs.forEach(function (uvBuffer, i) {\n      // subsequent uv buffers are called 'uv1', 'uv2', ...\n      let name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n      if (i === 0) {\n        name = 'uv';\n      }\n\n      geo.setAttribute(name, new _three.Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n\n    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n      // Convert the material indices of each vertex into rendering groups on the geometry.\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function (currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      }); // the loop above doesn't add the last group, do that here.\n\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      } // case where there are multiple materials but the whole geometry is only\n      // using one of them\n\n\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n\n        i++;\n      }\n    }\n\n    geoInfo.weightTable = {};\n\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function (rawBone, i) {\n        // loop over the bone's vertex indices and weights\n        rawBone.indices.forEach(function (index, j) {\n          if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n\n    return geoInfo;\n  }\n\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false; // these will hold data for a single face\n\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false; // Face index and vertex index arrays are combined in a single array\n      // A cube with quad faces looks like this:\n      // PolygonVertexIndex: *24 {\n      //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n      //  }\n      // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n      // to find index of last vertex bit shift the index: ^ - 1\n\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n        endOfFace = true;\n      }\n\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n          geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n            displayedWeightsWarning = true;\n          }\n\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function (weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        } // if the weight array is shorter than 4 pad with 0s\n\n\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n\n          if (faceUVs[i] === undefined) {\n            faceUVs[i] = [];\n          }\n\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n\n      faceLength++;\n\n      if (endOfFace) {\n        scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n        polygonIndex++;\n        faceLength = 0; // reset arrays for the next face\n\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  } // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\n\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0]);\n        buffers.vertexWeights.push(faceWeights[1]);\n        buffers.vertexWeights.push(faceWeights[2]);\n        buffers.vertexWeights.push(faceWeights[3]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i * 4]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[0]);\n        buffers.weightsIndices.push(faceWeightIndices[1]);\n        buffers.weightsIndices.push(faceWeightIndices[2]);\n        buffers.weightsIndices.push(faceWeightIndices[3]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n      }\n\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0]);\n        buffers.colors.push(faceColors[1]);\n        buffers.colors.push(faceColors[2]);\n        buffers.colors.push(faceColors[(i - 1) * 3]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n        buffers.colors.push(faceColors[i * 3]);\n        buffers.colors.push(faceColors[i * 3 + 1]);\n        buffers.colors.push(faceColors[i * 3 + 2]);\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0]);\n        buffers.normal.push(faceNormals[1]);\n        buffers.normal.push(faceNormals[2]);\n        buffers.normal.push(faceNormals[(i - 1) * 3]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n        buffers.normal.push(faceNormals[i * 3]);\n        buffers.normal.push(faceNormals[i * 3 + 1]);\n        buffers.normal.push(faceNormals[i * 3 + 2]);\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, j) {\n          if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][0]);\n          buffers.uvs[j].push(faceUVs[j][1]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i * 2]);\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n        });\n      }\n    }\n  }\n\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0) return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n    const scope = this;\n    morphTargets.forEach(function (morphTarget) {\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n\n        if (morphGeoNode !== undefined) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  } // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n\n\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    } // TODO: add morph normal support\n\n\n    const morphGeoInfo = {\n      vertexIndices: vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new _three.Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  } // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\n\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      if ('NormalIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if ('NormalsIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n\n    return {\n      dataSize: 3,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\n\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n\n    return {\n      dataSize: 2,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\n\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n\n    return {\n      dataSize: 4,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\n\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n\n    if (mappingType === 'NoMappingInformation') {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: 'AllSame',\n        referenceType: referenceType\n      };\n    }\n\n    const materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n    // we expect.So we create an intermediate buffer that points to the index in the buffer,\n    // for conforming with the other functions we've written for other data.\n\n    const materialIndices = [];\n\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\n\n  parseNurbsGeometry(geoNode) {\n    if (_NURBSCurve.NURBSCurve === undefined) {\n      console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n      return new _three.BufferGeometry();\n    }\n\n    const order = parseInt(geoNode.Order);\n\n    if (isNaN(order)) {\n      console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n      return new _three.BufferGeometry();\n    }\n\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new _three.Vector4().fromArray(pointsValues, i));\n    }\n\n    let startKnot, endKnot;\n\n    if (geoNode.Form === 'Closed') {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === 'Periodic') {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n\n    const curve = new _NURBSCurve.NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const points = curve.getPoints(controlPoints.length * 12);\n    return new _three.BufferGeometry().setFromPoints(points);\n  }\n\n} // parse animation data from FBXTree\n\n\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n\n    if (rawClips !== undefined) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n\n    return animationClips;\n  }\n\n  parseClips() {\n    // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n    // if this is undefined we can safely assume there are no animations\n    if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  } // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n\n\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = new Map();\n\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n\n    return curveNodesMap;\n  } // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n\n\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n    // e.g. position times: [0, 0.4, 0. 8]\n    // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n    // clearly, this should be optimised to\n    // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n    // this shows up in nearly every FBX file, and generally time array is length > 100\n\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n\n      if (relationships !== undefined) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n        }\n      }\n    }\n  } // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\n\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = new Map();\n\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n\n      if (connection !== undefined) {\n        // all the animationCurveNodes used in the layer\n        const children = connection.children;\n        children.forEach(function (child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n            if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n\n                if (modelID !== undefined) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n\n                  if (rawModel === undefined) {\n                    console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                    return;\n                  }\n\n                  const node = {\n                    modelName: rawModel.attrName ? _three.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function (child) {\n                    if (child.ID === rawModel.id) {\n                      node.transform = child.matrix;\n                      if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform) node.transform = new _three.Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                  // animation value as well\n\n                  if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                  if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n\n              if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? _three.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n\n    return layersMap;\n  } // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n\n\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n    const rawClips = {};\n\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n\n      if (children.length > 1) {\n        // it seems like stacks will always be associated with a single layer. But just in case there are files\n        // where there are multiple layers per stack, we'll display a warning\n        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n      }\n\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer: layer\n      };\n    }\n\n    return rawClips;\n  }\n\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function (rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new _three.AnimationClip(rawClip.name, -1, tracks);\n  }\n\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new _three.Vector3();\n    let initialRotation = new _three.Quaternion();\n    let initialScale = new _three.Vector3();\n    if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n    initialPosition = initialPosition.toArray();\n    initialRotation = new _three.Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n    initialScale = initialScale.toArray();\n\n    if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n      if (positionTrack !== undefined) tracks.push(positionTrack);\n    }\n\n    if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n      if (rotationTrack !== undefined) tracks.push(rotationTrack);\n    }\n\n    if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n      if (scaleTrack !== undefined) tracks.push(scaleTrack);\n    }\n\n    if (rawTracks.DeformPercent !== undefined) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== undefined) tracks.push(morphTrack);\n    }\n\n    return tracks;\n  }\n\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new _three.VectorKeyframeTrack(modelName + '.' + type, times, values);\n  }\n\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== undefined) {\n      this.interpolateRotations(curves.x);\n      curves.x.values = curves.x.values.map(_three.MathUtils.degToRad);\n    }\n\n    if (curves.y !== undefined) {\n      this.interpolateRotations(curves.y);\n      curves.y.values = curves.y.values.map(_three.MathUtils.degToRad);\n    }\n\n    if (curves.z !== undefined) {\n      this.interpolateRotations(curves.z);\n      curves.z.values = curves.z.values.map(_three.MathUtils.degToRad);\n    }\n\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n\n    if (preRotation !== undefined) {\n      preRotation = preRotation.map(_three.MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new _three.Euler().fromArray(preRotation);\n      preRotation = new _three.Quaternion().setFromEuler(preRotation);\n    }\n\n    if (postRotation !== undefined) {\n      postRotation = postRotation.map(_three.MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new _three.Euler().fromArray(postRotation);\n      postRotation = new _three.Quaternion().setFromEuler(postRotation).invert();\n    }\n\n    const quaternion = new _three.Quaternion();\n    const euler = new _three.Euler();\n    const quaternionValues = [];\n\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== undefined) quaternion.premultiply(preRotation);\n      if (postRotation !== undefined) quaternion.multiply(postRotation);\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n\n    return new _three.QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n  }\n\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function (val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new _three.NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n  } // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n\n\n  getTimesForAllAxes(curves) {\n    let times = []; // first join together the times for each axis, if defined\n\n    if (curves.x !== undefined) times = times.concat(curves.x.times);\n    if (curves.y !== undefined) times = times.concat(curves.y.times);\n    if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n    times = times.sort(function (a, b) {\n      return a - b;\n    }); // and remove duplicates\n\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n\n      times = times.slice(0, targetIndex);\n    }\n\n    return times;\n  }\n\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function (time) {\n      if (curves.x) xIndex = curves.x.times.indexOf(time);\n      if (curves.y) yIndex = curves.y.times.indexOf(time);\n      if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        // otherwise use the x value from the previous frame\n        values.push(prevValue[0]);\n      }\n\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  } // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n\n\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1];\n      const valuesSpan = curve.values[i] - initialValue;\n      const absoluteSpan = Math.abs(valuesSpan);\n\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180;\n        const step = valuesSpan / numSubIntervals;\n        let nextValue = initialValue + step;\n        const initialTime = curve.times[i - 1];\n        const timeSpan = curve.times[i] - initialTime;\n        const interval = timeSpan / numSubIntervals;\n        let nextTime = initialTime + interval;\n        const interpolatedTimes = [];\n        const interpolatedValues = [];\n\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime);\n          nextTime += interval;\n          interpolatedValues.push(nextValue);\n          nextValue += step;\n        }\n\n        curve.times = inject(curve.times, i, interpolatedTimes);\n        curve.values = inject(curve.values, i, interpolatedValues);\n      }\n    }\n  }\n\n} // parse an FBX file in ASCII format\n\n\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n\n  getCurrentProp() {\n    return this.currentProp;\n  }\n\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = '';\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function (line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty) return;\n      const matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n      const matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n      const matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        // large arrays are split over multiple lines terminated with a ',' character\n        // if this is encountered the line needs to be joined to the previous line\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n    const nodeAttrs = property[2].split(',').map(function (attr) {\n      return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n    });\n    const node = {\n      name: nodeName\n    };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode(); // a top node\n\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      // a subnode\n      // if the subnode already exists, append it\n      if (nodeName in currentNode) {\n        // special case Pose needs PoseNodes as an array\n        if (nodeName === 'PoseNode') {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== undefined) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n\n        if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === 'number') {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== 'Properties70') {\n        if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n      }\n    }\n\n    if (typeof attrs.id === 'number') node.id = attrs.id;\n    if (attrs.name !== '') node.attrName = attrs.name;\n    if (attrs.type !== '') node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n\n    if (attrs[0] !== '') {\n      id = parseInt(attrs[0]);\n\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n\n    let name = '',\n        type = '';\n\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, '');\n      type = attrs[2];\n    }\n\n    return {\n      id: id,\n      name: name,\n      type: type\n    };\n  }\n\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n    let propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n    //\tContent: ,\n    //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n    if (propName === 'Content' && propValue === ',') {\n      propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n    }\n\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n\n    if (parentName === 'Properties70') {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    } // Connections\n\n\n    if (propName === 'C') {\n      const connProps = propValue.split(',').slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(',').slice(3);\n      rest = rest.map(function (elem) {\n        return elem.trim().replace(/^\"/, '');\n      });\n      propName = 'connections';\n      propValue = [from, to];\n      append(propValue, rest);\n\n      if (currentNode[propName] === undefined) {\n        currentNode[propName] = [];\n      }\n    } // Node\n\n\n    if (propName === 'Node') currentNode.id = propValue; // connections\n\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n    }\n\n    this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n    if (propName === 'a' && propValue.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n    // so convert the string to an array\n\n    if (line.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  } // parse \"Property70\"\n\n\n  parseNodeSpecialProperty(line, propName, propValue) {\n    // split this\n    // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n    // into array like below\n    // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n    const props = propValue.split('\",').map(function (prop) {\n      return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n    switch (innerPropType1) {\n      case 'int':\n      case 'enum':\n      case 'bool':\n      case 'ULongLong':\n      case 'double':\n      case 'Number':\n      case 'FieldOfView':\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n\n      case 'Color':\n      case 'ColorRGB':\n      case 'Vector3D':\n      case 'Lcl_Translation':\n      case 'Lcl_Rotation':\n      case 'Lcl_Scaling':\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    } // CAUTION: these props must append to parent's parent\n\n\n    this.getPrevNode()[innerPropName] = {\n      'type': innerPropType1,\n      'type2': innerPropType2,\n      'flag': innerPropFlag,\n      'value': innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n\n} // Parse an FBX file in Binary format\n\n\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23); // skip magic 23 bytes\n\n    const version = reader.getUint32();\n\n    if (version < 6400) {\n      throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n    }\n\n    const allNodes = new FBXTree();\n\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null) allNodes.add(node.name, node);\n    }\n\n    return allNodes;\n  } // Check if reader has reached the end of content.\n\n\n  endOfContent(reader) {\n    // footer size: 160bytes + 16-byte alignment padding\n    // - 16bytes: magic\n    // - padding til 16-byte alignment (at least 1byte?)\n    //\t(seems like some exporters embed fixed 15 or 16bytes?)\n    // - 4bytes: magic\n    // - 4bytes: version\n    // - 120bytes: zero\n    // - 16bytes: magic\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  } // recursively parse nodes until the end of the file is reached\n\n\n  parseNode(reader, version) {\n    const node = {}; // The first three data sizes depends on version.\n\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n    if (endOffset === 0) return null;\n    const propertyList = [];\n\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n\n    const id = propertyList.length > 0 ? propertyList[0] : '';\n    const attrName = propertyList.length > 1 ? propertyList[1] : '';\n    const attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n    // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null) this.parseSubNode(name, node, subNode);\n    }\n\n    node.propertyList = propertyList; // raw property list used by parent\n\n    if (typeof id === 'number') node.id = id;\n    if (attrName !== '') node.attrName = attrName;\n    if (attrType !== '') node.attrType = attrType;\n    if (name !== '') node.name = name;\n    return node;\n  }\n\n  parseSubNode(name, node, subNode) {\n    // special case: child node is single property\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === 'Connections' && subNode.name === 'C') {\n      const array = [];\n      subNode.propertyList.forEach(function (property, i) {\n        // first Connection is FBX type (OO, OP, etc.). We'll discard these\n        if (i !== 0) array.push(property);\n      });\n\n      if (node.connections === undefined) {\n        node.connections = [];\n      }\n\n      node.connections.push(array);\n    } else if (subNode.name === 'Properties70') {\n      const keys = Object.keys(subNode);\n      keys.forEach(function (key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === 'Properties70' && subNode.name === 'P') {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n      if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n\n      if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      } // this will be copied to parent, see above\n\n\n      node[innerPropName] = {\n        'type': innerPropType1,\n        'type2': innerPropType2,\n        'flag': innerPropFlag,\n        'value': innerPropValue\n      };\n    } else if (node[subNode.name] === undefined) {\n      if (typeof subNode.id === 'number') {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === 'PoseNode') {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === undefined) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n\n    switch (type) {\n      case 'C':\n        return reader.getBoolean();\n\n      case 'D':\n        return reader.getFloat64();\n\n      case 'F':\n        return reader.getFloat32();\n\n      case 'I':\n        return reader.getInt32();\n\n      case 'L':\n        return reader.getInt64();\n\n      case 'R':\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n\n      case 'S':\n        length = reader.getUint32();\n        return reader.getString(length);\n\n      case 'Y':\n        return reader.getInt16();\n\n      case 'b':\n      case 'c':\n      case 'd':\n      case 'f':\n      case 'i':\n      case 'l':\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n        const compressedLength = reader.getUint32();\n\n        if (encoding === 0) {\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader.getBooleanArray(arrayLength);\n\n            case 'd':\n              return reader.getFloat64Array(arrayLength);\n\n            case 'f':\n              return reader.getFloat32Array(arrayLength);\n\n            case 'i':\n              return reader.getInt32Array(arrayLength);\n\n            case 'l':\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n\n        if (typeof fflate === 'undefined') {\n          console.error('THREE.FBXLoader: External library fflate.min.js required.');\n        }\n\n        const data = fflate.unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n        const reader2 = new BinaryReader(data.buffer);\n\n        switch (type) {\n          case 'b':\n          case 'c':\n            return reader2.getBooleanArray(arrayLength);\n\n          case 'd':\n            return reader2.getFloat64Array(arrayLength);\n\n          case 'f':\n            return reader2.getFloat32Array(arrayLength);\n\n          case 'i':\n            return reader2.getInt32Array(arrayLength);\n\n          case 'l':\n            return reader2.getInt64Array(arrayLength);\n        }\n\n      default:\n        throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n    }\n  }\n\n}\n\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n\n  getOffset() {\n    return this.offset;\n  }\n\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n\n  skip(length) {\n    this.offset += length;\n  } // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n\n\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n\n  getBooleanArray(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n\n    return a;\n  }\n\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  getInt32Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n\n    return a;\n  }\n\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  } // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n\n\n  getInt64() {\n    let low, high;\n\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    } // calculate negative value\n\n\n    if (high & 0x80000000) {\n      high = ~high & 0xFFFFFFFF;\n      low = ~low & 0xFFFFFFFF;\n      if (low === 0xFFFFFFFF) high = high + 1 & 0xFFFFFFFF;\n      low = low + 1 & 0xFFFFFFFF;\n      return -(high * 0x100000000 + low);\n    }\n\n    return high * 0x100000000 + low;\n  }\n\n  getInt64Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n\n    return a;\n  } // Note: see getInt64() comment\n\n\n  getUint64() {\n    let low, high;\n\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n\n    return high * 0x100000000 + low;\n  }\n\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  getFloat32Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n\n    return a;\n  }\n\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n\n  getFloat64Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n\n    return a;\n  }\n\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n\n  getString(size) {\n    // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n    let a = [];\n\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8();\n    }\n\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0) a = a.slice(0, nullByte);\n    return _three.LoaderUtils.decodeText(new Uint8Array(a));\n  }\n\n} // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\n\n\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n\n} // ************** UTILITY FUNCTIONS **************\n\n\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\n\nfunction isFbxFormatASCII(text) {\n  const CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n  let cursor = 0;\n\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n} // Converts FBX ticks into real time seconds.\n\n\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000;\n}\n\nconst dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex;\n      break;\n\n    case 'ByPolygon':\n      index = polygonIndex;\n      break;\n\n    case 'ByVertice':\n      index = vertexIndex;\n      break;\n\n    case 'AllSame':\n      index = infoObject.indices[0];\n      break;\n\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n  }\n\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\n\nconst tempEuler = new _three.Euler();\nconst tempVec = new _three.Vector3(); // generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\nfunction generateTransform(transformData) {\n  const lTranslationM = new _three.Matrix4();\n  const lPreRotationM = new _three.Matrix4();\n  const lRotationM = new _three.Matrix4();\n  const lPostRotationM = new _three.Matrix4();\n  const lScalingM = new _three.Matrix4();\n  const lScalingPivotM = new _three.Matrix4();\n  const lScalingOffsetM = new _three.Matrix4();\n  const lRotationOffsetM = new _three.Matrix4();\n  const lRotationPivotM = new _three.Matrix4();\n  const lParentGX = new _three.Matrix4();\n  const lParentLX = new _three.Matrix4();\n  const lGlobalT = new _three.Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(_three.MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(_three.MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(_three.MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n\n  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n  const lParentGRM = new _three.Matrix4();\n  lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n  const lParentTM = new _three.Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new _three.Matrix4();\n\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new _three.Matrix4().scale(new _three.Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = lParentLSM.clone().invert();\n    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n\n  const lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  const lScalingPivotM_inv = lScalingPivotM.clone().invert(); // Calculate the local transform matrix\n\n  let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new _three.Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS); // from global to local\n\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n} // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = ['ZYX', // -> XYZ extrinsic\n  'YZX', // -> XZY extrinsic\n  'XZY', // -> YZX extrinsic\n  'ZXY', // -> YXZ extrinsic\n  'YXZ', // -> ZXY extrinsic\n  'XYZ' // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n    return enums[0];\n  }\n\n  return enums[order];\n} // Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\n\n\nfunction parseNumberArray(value) {\n  const array = value.split(',').map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\n\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0;\n  if (to === undefined) to = buffer.byteLength;\n  return _three.LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\n\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\n\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n\n  return a;\n} // inject array a2 into array a1 at index\n\n\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_getRequireWildcardCache","WeakMap","cache","getFbxVersion","text","match","versionRegExp","parseInt","version","Error","convertFBXTimeToSeconds","time","getData","polygonVertexIndex","polygonIndex","vertexIndex","infoObject","index","mappingType","indices","console","warn","referenceType","from","dataSize","dataArray","buffer","to","i","j","a","b","generateTransform","transformData","lTranslationM","_three","Matrix4","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","inheritType","translation","setPosition","tempVec","fromArray","preRotation","array","map","MathUtils","degToRad","push","eulerOrder","makeRotationFromEuler","tempEuler","rotation","postRotation","invert","scale","scalingOffset","scalingPivot","rotationOffset","rotationPivot","parentMatrixWorld","copy","parentMatrix","lLRM","clone","multiply","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGRSM","lParentGSM","lGlobalRS","lParentLSM_inv","lParentLSM","setFromMatrixScale","Vector3","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","premultiply","getEulerOrder","order","enums","parseNumberArray","value","split","val","parseFloat","convertArrayBufferToString","undefined","byteLength","LoaderUtils","decodeText","Uint8Array","append","length","l","inject","a1","a2","slice","concat","Object","defineProperty","FBXLoader","fflate","_interopRequireWildcard","obj","__esModule","default","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_NURBSCurve","fbxTree","connections","sceneGraph","Loader","constructor","manager","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","FileLoader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","parse","e","error","itemError","FBXBuffer","CORRECT","BinaryParser","FBXText","cursor","result","offset","TextParser","textureLoader","TextureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","Connections","forEach","rawConnection","fromID","toID","relationship","parents","children","parentRelationship","ID","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","RelativeFilename","Filename","base64Content","Content","ArrayBuffer","image","parseImage","filename","pop","content","fileName","extension","lastIndexOf","toLowerCase","type","getHandler","window","URL","createObjectURL","Blob","textureMap","textureNodes","Texture","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueV","wrapS","valueU","RepeatWrapping","ClampToEdgeWrapping","wrapT","values","Scaling","repeat","x","y","currentPath","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","MeshPhongMaterial","MeshLambertMaterial","setValues","BumpFactor","bumpScale","Diffuse","color","Color","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","encoding","sRGBEncoding","displacementMap","emissiveMap","normalMap","envMap","mapping","EquirectangularReflectionMapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","weights","transformLink","TransformLink","Indexes","Weights","bones","rawMorphTargets","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","Group","modelMap","parseModels","modelNodes","Model","model","setLookAtProperties","modelNode","connection","parent","add","bindSkeleton","createAmbientLight","traverse","node","userData","matrix","matrixWorld","transform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","Bone","PropertyBinding","sanitizeNodeName","getTransformData","bone","subBone","cameraAttribute","attr","NodeAttribute","Object3D","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","PerspectiveCamera","setFocalLength","OrthographicCamera","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","PointLight","decay","DirectionalLight","angle","Math","PI","InnerAngle","penumbra","OuterAngle","max","SpotLight","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","SkinnedMesh","normalizeSkinWeights","Mesh","reduce","geo","LineBasicMaterial","linewidth","Line","InheritType","RotationOrder","Lcl_Translation","PreRotation","Lcl_Rotation","PostRotation","Lcl_Scaling","ScalingOffset","ScalingPivot","RotationOffset","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","Skeleton","BindPoseNode","Pose","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","AmbientLight","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","BufferGeometry","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","Float32BufferAttribute","vertex","setAttribute","colors","Uint16BufferAttribute","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","Matrix3","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","weight","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","endOfFace","weightIndices","data","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","morphTargetsRelative","morphAttributes","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphBuffers","morphGeoInfo","NormalNode","MappingInformationType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","NURBSCurve","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","Vector4","endKnot","Form","startKnot","points","getPoints","curve","setFromPoints","animationClips","rawClips","parseClips","clip","addClip","rawClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","curveNode","curves","rawCurves","animationCurve","times","KeyTime","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","generateTracks","AnimationClip","Quaternion","decompose","toArray","setFromQuaternion","Euler","T","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","VectorKeyframeTrack","interpolateRotations","setFromEuler","quaternion","euler","quaternionValues","QuaternionKeyframeTrack","morphNum","getObjectByName","morphTargetDictionary","NumberKeyframeTrack","sort","targetIndex","lastValue","currentValue","xIndex","yIndex","zIndex","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","interval","nextTime","interpolatedTimes","interpolatedValues","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parseNodeSpecialProperty","connProps","rest","elem","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","reader","BinaryReader","skip","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","unzlibSync","reader2","littleEndian","dv","DataView","low","high","nullByte"]
}
