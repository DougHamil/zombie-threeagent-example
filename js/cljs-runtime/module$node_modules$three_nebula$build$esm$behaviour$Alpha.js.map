{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$behaviour$Alpha.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/three-nebula/build/esm/behaviour/Alpha.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$behaviour$Alpha\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _math = require(\"../math\");\n\nvar _Behaviour = _interopRequireDefault(require(\"./Behaviour\"));\n\nvar _constants = require(\"./constants\");\n\nvar _ease = require(\"../ease\");\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Behaviour that applies an alpha transition effect to particles.\n *\n */\nclass Alpha extends _Behaviour.default {\n  /**\n   * Constructs an Alpha behaviour instance.\n   *\n   * @param {number} alphaA - The starting alpha value\n   * @param {?number} alphaB - The ending alpha value\n   * @param {number} life - The life of the behaviour\n   * @param {function} easing - The easing equation to use for transforms\n   * @param {boolean} [isEnabled=true] - Determines if the behaviour will be applied or not\n   * @return void\n   */\n  constructor(alphaA = 1, alphaB = null, life, easing, isEnabled = true) {\n    super(life, easing, _types.BEHAVIOUR_TYPE_ALPHA, isEnabled);\n    /**\n     * @desc The starting alpha value\n     * @type {number|Span}\n     */\n\n    this.alphaA = alphaA;\n    /**\n     * @desc The ending alpha value\n     * @type {number|Span}\n     */\n\n    this.alphaB = alphaB;\n    this.reset(alphaA, alphaB);\n  }\n  /**\n   * Gets the _same property which determines if the alpha are the same.\n   *\n   * @return {boolean}\n   */\n\n\n  get same() {\n    return this._same;\n  }\n  /**\n   * Sets the _same property which determines if the alpha are the same.\n   *\n   * @param {boolean} same\n   * @return {boolean}\n   */\n\n\n  set same(same) {\n    /**\n     * @type {boolean}\n     */\n    this._same = same;\n  }\n  /**\n   * Resets the behaviour properties.\n   *\n   * @param {number} alphaA - the starting alpha value\n   * @param {?number} alphaB - the ending alpha value\n   * @param {number} life - the life of the behaviour\n   * @param {function} easing - the easing equation to use for transforms\n   * @return void\n   */\n\n\n  reset(alphaA = 1, alphaB = null, life, easing) {\n    this.same = alphaB === null || alphaB === undefined ? true : false;\n    this.alphaA = (0, _math.createSpan)(alphaA);\n    this.alphaB = (0, _math.createSpan)(alphaB);\n    life && super.reset(life, easing);\n  }\n  /**\n   * Initializes the behaviour on a particle.\n   *\n   * @param {object} particle - the particle to initialize the behaviour on\n   * @return void\n   */\n\n\n  initialize(particle) {\n    particle.useAlpha = true;\n    particle.transform.alphaA = this.alphaA.getValue();\n    particle.transform.alphaB = this.same ? particle.transform.alphaA : this.alphaB.getValue();\n  }\n  /**\n   * Mutates the target's alpha/opacity property.\n   *\n   * @param {object} particle - the particle to apply the behaviour to\n   * @param {number} time - engine time\n   * @param {integer} index - the particle index\n   * @return void\n   */\n\n\n  mutate(particle, time, index) {\n    this.energize(particle, time, index);\n    particle.alpha = _math.MathUtils.lerp(particle.transform.alphaA, particle.transform.alphaB, this.energy);\n\n    if (particle.alpha < _constants.PARTICLE_ALPHA_THRESHOLD) {\n      particle.alpha = 0;\n    }\n  }\n  /**\n   * Creates a Body initializer from JSON.\n   *\n   * @param {object} json - The JSON to construct the instance from.\n   * @property {number} json.alphaA - The starting alpha value\n   * @property {number} json.alphaB - The ending alpha value\n   * @property {number} json.life - The life of the behaviour\n   * @property {string} json.easing - The easing equation to use for transforms\n   * @return {Body}\n   */\n\n\n  static fromJSON(json) {\n    const {\n      alphaA,\n      alphaB,\n      life,\n      easing,\n      isEnabled = true\n    } = json;\n    return new Alpha(alphaA, alphaB, life, (0, _ease.getEasingByName)(easing), isEnabled);\n  }\n\n}\n\nexports.default = Alpha;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","_math","_Behaviour","_interopRequireDefault","obj","__esModule","_constants","_ease","_types","Alpha","constructor","alphaA","alphaB","life","easing","isEnabled","BEHAVIOUR_TYPE_ALPHA","reset","_same","same","undefined","createSpan","initialize","particle","useAlpha","transform","getValue","mutate","time","index","energize","alpha","MathUtils","lerp","energy","PARTICLE_ALPHA_THRESHOLD","fromJSON","json","getEasingByName"]
}
