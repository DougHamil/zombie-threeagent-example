{"version":3,"sources":["threeagent/impl/virtual_scene.cljs"],"mappings":"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","names":["js/threeagent","js/threeagent.impl","js/threeagent.impl.virtual-scene","js/threeagent.impl.virtual-scene.non-component-keys","threeagent.impl.virtual-scene/non-component-keys","var_args","G__9596","threeagent.impl.virtual-scene/print-tree","js/Error","node","threeagent.impl.virtual_scene.print_tree","p","is-reactive","cljs.core/seq","cljs.core.println","seq__9597","chunk__9598","count__9599","i__9600","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","child","cljs.core/es6-iterator-seq","G__9602","threeagent.impl.virtual-scene/node->path","threeagent.impl.virtual_scene.node__GT_path","path","cljs.core.conj","cljs.core/reverse","threeagent.impl.virtual-scene/get-key","key","meta","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","threeagent.impl.virtual-scene/RenderQueueEntry","threeagent.impl.virtual-scene/->RenderQueueEntry","renderFn","forceReplace","threeagent.impl.virtual-scene/Node","threeagent.impl.virtual-scene/->Node","context","parent","depth","id","data","dirty","render","reaction","children","portalPath","_this","cljs.core._EQ_","f","seq__9603","chunk__9604","count__9605","i__9606","threeagent.impl.virtual-scene/Scene","threeagent.impl.virtual-scene/->Scene","root","renderQueue","_","render-fn","force-replace?","threeagent.impl.virtual-scene/get-in-node","cljs.core/empty?","cljs.core/rest","threeagent.impl.virtual-scene/get-in-scene","scene","threeagent.impl.virtual-scene/on-react!","ctx","threeagent.impl.virtual-scene/extract-comp-config","config","c","cljs.core/transient","cljs.core/persistent!","p1__9607#","p2__9608#","cljs.core.reduce","cljs.core.dissoc_BANG_","threeagent.impl.virtual-scene/node-data","comp-key","comp-config","js/threeagent.impl.virtual-scene.->node","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","cljs.core.get","fexpr__9609","cljs.core/MultiFn","cljs.core.symbol","threeagent.impl.virtual-scene/->node","p__9610","vec__9611","seq__9612","first__9613","_scene","_context","_parent","_key","l","r","cljs.core/Keyword","cljs.core/fn?","cljs.core/map?","cljs.core/sequential?","form","js/console.error","_form","p__9614","vec__9615","seq__9616","first__9617","cljs.core.filter","cljs.core/some?","children-map","js/Map","cljs.core/meta","seq__9618","chunk__9619","count__9620","i__9621","vec__9628","cljs.core.nth","vec__9631","idx","medley.core.indexed","child-node","p__9634","vec__9635","seq__9636","first__9637","subcontext","rest","cljs.core.merge","cljs.core/with-meta","cljs.core.into","vec__9638","seq__9639","first__9640","rs","first-child","metadata","or__4212__auto__","seq__9641","chunk__9642","count__9643","i__9644","vec__9651","vec__9654","threeagent.impl.virtual-scene/fn->render-fn","original-meta","args","cljs.core.apply","vec__9657","seq__9658","first__9659","outer-reaction-ctx","cljs.core/clj->js","inner-reaction-ctx","outer-render-fn","outer-result","reagent.ratom/run-in-reaction","cljs.core.partial","inner-render-fn","inner-result","default-render-fn","result","js/threeagent.impl.virtual-scene.->node-shallow","fexpr__9660","threeagent.impl.virtual-scene/->node-shallow","p__9661","vec__9662","seq__9663","first__9664","p__9665","vec__9666","seq__9667","first__9668","m","threeagent.impl.virtual-scene/valid-child?","p__9671","vec__9672","seq__9673","first__9674","p1__9670#","p2__9669#","cljs.core.map_indexed","cljs.core/PersistentVector","vec__9677","seq__9678","first__9679","p1__9676#","p2__9675#","threeagent.impl.virtual-scene/dispose-node!","reactions","seq__9680","chunk__9681","count__9682","i__9683","reagent.ratom/dispose!","threeagent.impl.virtual-scene/add-node!","parent-node","changelog","threeagent.impl.virtual-scene/remove-node!","threeagent.impl.virtual-scene/replace-node!","new-form","new-node","threeagent.impl.virtual-scene/diff-fn?","original-fn","cljs.core.not_EQ_","threeagent.impl.virtual-scene/same-args?","threeagent.impl.virtual-scene/update-child-node!","threeagent.impl.virtual-scene/update-node!","force-rerender?","map__9684","cljs.core/--destructure-map","old-data","old-context","old-portal-path","parent-context","current-keys","cljs.core/set","rendered-form","shallow-node","new-data","children-keys","new-portal-path","new-context","new-keys","cljs.core.map","dropped-keys","clojure.set.difference","seq__9685","chunk__9686","count__9687","i__9688","child-key","seq__9689","chunk__9690","count__9691","i__9692","vec__9699","vec__9702","child-form","temp__5751__auto__","threeagent.impl.virtual-scene/render-node!","threeagent.impl.virtual-scene/render!","reagent.core/flush","queue","entry","threeagent.impl.virtual-scene/destroy!","threeagent.impl.virtual-scene/create","root-fn","js/goog.structs.PriorityQueue","root-node"],"sourcesContent":["(ns threeagent.impl.virtual-scene\n  (:require [medley.core :as medley]\n            [clojure.set :as set]\n            [reagent.ratom :as ratom]\n            [reagent.core :as reagent])\n  (:import [goog.structs PriorityQueue]))\n\n(defonce ^:private non-component-keys #{:position :rotation :scale})\n\n(defn print-tree\n  ([^Node node]\n   (print-tree node \"\"))\n  ([^Node node p]\n   (let [is-reactive (and (some? (.-reactions node))\n                          (seq (.-reactions node)))]\n     (println p \"|-\"\n              (.-key node)\n              (str \"comp:\" (:component-key (.-data node)))\n              (str \"id:\" (:id (.-data node)))\n              (str \"dirty:\" (.-dirty node))\n              (str \"reactive:\" is-reactive))\n     (doseq [child (es6-iterator-seq (.values (.-children node)))]\n       (print-tree child (str p \"\\t\"))))))\n\n(defn node->path\n  ([node]\n   (node->path [] node))\n  ([path node]\n   (if node\n     (recur (conj path (.-key node)) (.-parent node))\n     (reverse path))))\n\n(defn get-key [key meta] (:key meta key))\n\n(deftype RenderQueueEntry [^Node node ^js renderFn ^js forceReplace]\n  Object)\n\n(deftype Node [context ^Node parent depth id key meta data dirty render reaction children portalPath]\n  Object\n  (terminal? [_this]\n    (= 0 (.-size children)))\n  (for-each-child [_this f]\n    (doseq [child (es6-iterator-seq (.values children))]\n      (f child))))\n\n(deftype Scene [root renderQueue]\n  Object\n  (enqueueForRender [_ ^Node node ^js render-fn ^js force-replace?]\n    (set! (.-dirty node) true)\n    (.enqueue renderQueue (.-depth node) (RenderQueueEntry. node render-fn force-replace?))))\n\n(defn get-in-node [^Node node path]\n  (if (empty? path)\n    node\n    (recur (.get (.-children node) (first path)) (rest path))))\n\n(defn get-in-scene [^Scene scene path] (get-in-node (.-root scene) (rest path)))\n\n(defn- on-react! [render-fn ctx]\n  (let [node ^Node (.-node ctx)\n        scene ^Scene (.-scene ctx)]\n    (.enqueueForRender scene node render-fn ^js (.-forceReplace ctx))))\n\n(defn- extract-comp-config [config]\n  (let [c (transient config)]\n    (persistent! (reduce #(dissoc! %1 %2) c non-component-keys))))\n\n(defn- node-data [comp-key comp-config]\n  {:position (:position comp-config [0 0 0])\n   :rotation (:rotation comp-config [0 0 0])\n   :scale (:scale comp-config [1.0 1.0 1.0])\n   :cast-shadow (:cast-shadow comp-config false)\n   :receive-shadow (:receive-shadow comp-config false)\n   :id (:id comp-config)\n   :component-key comp-key\n   :component-config (extract-comp-config comp-config)}) ;(apply dissoc comp-config non-component-keys)})\n\n(defmulti ->node (fn [^Scene _scene _context ^Node _parent _key [l & r]]\n                   (cond\n                     (= :> l) :portal\n                     (keyword? l) :keyword\n                     (fn? l) :fn\n                     (map? l) :context\n                     (sequential? l) :seq\n                     (and (nil? l) (nil? r)) :empty-list\n                     :else nil)))\n\n(defmethod ->node :default [_scene _context _parent _key form]\n  (js/console.error \"Invalid object form:\" (str form)))\n\n(defmethod ->node :empty-list [_scene _context _parent _key _form])\n\n(defmethod ->node :portal [scene context parent key [_ path & children :as form]]\n  (let [depth (if parent\n                (inc (.-depth parent))\n                0)\n        children (filter some? children)\n        children-map (js/Map.)\n        node (Node. context parent depth nil key (meta form) nil false nil nil children-map path)]\n    (when (not (or (string? key)\n                   (number? key)))\n      (throw (str \"^:key must be a string or number, found: \" key)))\n    (doseq [[idx child] (medley/indexed children)]\n      (when-let [child-node (->node scene context node idx child)]\n        (.set children-map (.-key child-node) child-node)))\n    node))\n\n(defmethod ->node :context [scene context parent key [subcontext & rest]]\n  (->node scene (merge context subcontext) parent key rest))\n\n(defmethod ->node :seq [scene context parent key form]\n  (->node scene context parent key (with-meta (into [:object] form) (meta form))))\n\n(defmethod ->node :keyword [scene context parent key form]\n  (let [[comp-key & rs] form\n        first-child (first rs)\n        metadata (meta form)\n        key (or (:key metadata) key)\n        comp-config (if (map? first-child) first-child {})\n        children (filter some? (if (map? first-child) (rest rs) rs))\n        children-map (js/Map.)\n        data (node-data comp-key comp-config)\n        depth (if parent\n                (inc (.-depth parent))\n                0)\n        node (Node. context parent depth (:id comp-config) key metadata data false nil nil children-map nil)]\n    (when (not (or (string? key)\n                   (number? key)))\n      (throw (str \"^:key must be a string or number, found: \" key)))\n    (doseq [[idx child] (medley/indexed children)]\n      (when-let [child-node (->node scene context node idx child)]\n        (.set children-map (.-key child-node) child-node)))\n    node))\n\n(defn- fn->render-fn [original-meta f]\n  (fn [& args]\n    (with-meta\n      [:object (apply f args)]\n      original-meta)))\n\n(defmethod ->node :fn [scene context parent key form]\n  (let [key (or (:key (meta form)) key)\n        [f & args] form\n        original-meta (meta form)\n        outer-reaction-ctx ^js (clj->js {:scene nil :node nil :reaction nil :forceReplace false})\n        inner-reaction-ctx ^js (clj->js {:scene nil :node nil :reaction nil})\n        outer-render-fn (fn->render-fn original-meta f)\n        outer-result (ratom/run-in-reaction #(apply f args)\n                                            outer-reaction-ctx\n                                            \"reaction\"\n                                            (partial on-react! outer-render-fn)\n                                            {:no-cache true})\n        inner-render-fn (when (fn? outer-result)\n                          (fn->render-fn original-meta outer-result))\n        inner-result (when (fn? outer-result)\n                       (ratom/run-in-reaction #(apply outer-result args)\n                                              inner-reaction-ctx\n                                              \"reaction\"\n                                              (partial on-react! inner-render-fn)\n                                              {:no-cache true}))\n        default-render-fn (or inner-render-fn outer-render-fn)\n        result (or inner-result outer-result)\n        node ^Node (->node scene context parent key (with-meta [:object result] original-meta))]\n    (when inner-render-fn\n      (set! (.-forceReplace outer-reaction-ctx) true))\n    (set! (.-originalFn node) f)\n    (set! (.-defaultRenderFn node) default-render-fn)\n    (set! (.-form node) form)\n    (set! (.-lastForm node) form)\n    (set! (.-reactions node) (array))\n    (when-let [reaction (.-reaction outer-reaction-ctx)]\n      (set! (.-scene outer-reaction-ctx) scene)\n      (set! (.-node outer-reaction-ctx) node)\n      (.push (.-reactions node) reaction))\n    (when-let [reaction (.-reaction inner-reaction-ctx)]\n      (set! (.-scene inner-reaction-ctx) scene)\n      (set! (.-node inner-reaction-ctx) node)\n      (.push (.-reactions node) reaction))\n    node))\n\n(defmulti ->node-shallow (fn [_key _context [l & r]]\n                           (cond\n                             (fn? l) :fn\n                             (= :> l) :portal\n                             (keyword? l) :keyword\n                             (map? l) :context\n                             (sequential? l) :seq\n                             (and (nil? l) (nil? r)) :empty-list\n                             :else nil)))\n\n(defmethod ->node-shallow :empty-list [_key _context _form])\n\n(defmethod ->node-shallow :context [key context [subcontext & rest]]\n  (->node-shallow key (merge context subcontext) rest))\n\n(defmethod ->node-shallow :fn [key context form]\n  {:key key\n   :context context\n   :data (node-data :object {})\n   :form form\n   :children-keys [[0 form]]})\n\n(defmethod ->node-shallow :seq [key context form]\n  (when-not (empty? form)\n    (let [m (meta form)]\n      (->node-shallow (get-key key m) context (with-meta (into [:object] form) m)))))\n\n(defn- valid-child? [child]\n  (and (some? child) (seq child)))\n\n(defmethod ->node-shallow :portal [key context [_ path & children :as form]]\n  (let [children (filter valid-child? children)]\n   {:key key\n    :context context\n    :data {}\n    :portal-path path\n    :form form\n    :children-keys (map-indexed #(vector (or (:key (meta %2)) %1) %2)\n                                children)}))\n  \n\n(defmethod ->node-shallow :keyword [key context form]\n  (let [[comp-key & rs] form\n        first-child (first rs)\n        comp-config (if (map? first-child) first-child {})\n        children (filter valid-child?\n                         (if (map? first-child) (rest rs) rs))]\n    {:key key\n     :context context\n     :data (node-data comp-key comp-config)\n     :form form\n     :children-keys (map-indexed #(vector (or (:key (meta %2)) %1) %2)\n                                 children)}))\n\n(defn- dispose-node! [^Node node]\n  (set! (.-disposed node) true)\n  (when-let [reactions (.-reactions node)]\n    (doseq [r reactions]\n      (ratom/dispose! r)))\n  (.for-each-child node dispose-node!))\n\n(defn- add-node! [^Scene scene context ^Node parent-node key form changelog]\n  (when-let [node (->node scene context parent-node key form)]\n    (.push changelog [node :add nil (.-data node)])\n    node))\n\n(defn- remove-node! [^Node node changelog]\n  (.push changelog [node :remove (.-data node) nil])\n  (set! (.-dirty node) false)\n  (dispose-node! node))\n\n(defn- replace-node! [^Scene scene ^Node node new-form changelog]\n  (let [parent (.-parent node)\n        context (if parent (.-context parent)\n                    {})\n        key (.-key node)]\n    (remove-node! node changelog)\n    (let [new-node (add-node! scene context parent key new-form changelog)]\n      (.set (.-children parent) key new-node))))\n\n(defn- diff-fn? [^Node node new-form]\n  (let [original-fn (.-originalFn node)]\n    (and (some? original-fn)\n         (not= original-fn (first new-form)))))\n\n(defn- same-args? [^Node node new-form]\n  (= (.-lastForm node)\n     new-form))\n\n(declare update-node!)\n\n(defn- update-child-node! [^Scene scene ^Node node new-form changelog]\n  (if (diff-fn? node new-form)\n    ;; Completely different render function, replace\n    (replace-node! scene node new-form changelog)\n    ;; Same form, re-render using the saved render-fn\n    (let [render-fn (.-defaultRenderFn node)]\n      (update-node! scene node new-form render-fn changelog false))))\n\n(defn- update-node! [^Scene scene ^Node node new-form ^js render-fn changelog force-rerender?]\n  (when (or force-rerender?\n            (not (same-args? node new-form)))\n    (let [key (.-key node)\n          children (.-children node)\n          parent (.-parent node)\n          old-data (.-data node)\n          old-context (.-context node)\n          old-portal-path (.-portalPath node)\n          parent-context (if parent\n                           (.-context parent)\n                           {})\n\n          current-keys (set (es6-iterator-seq (.keys children)))\n          rendered-form (if render-fn\n                          (apply render-fn (rest new-form))\n                          new-form)\n          shallow-node (->node-shallow key parent-context rendered-form)\n          {new-data :data\n           children-keys :children-keys\n           new-portal-path :portal-path\n           new-context :context} shallow-node\n          new-keys (set (map first children-keys))\n          dropped-keys (set/difference current-keys new-keys)]\n      (cond\n        (not= new-context old-context)\n        (replace-node! scene node new-form changelog)\n\n        (not= new-portal-path old-portal-path)\n        (replace-node! scene node new-form changelog)\n\n        :else\n        (do\n          (set! (.-data node) new-data)\n          (set! (.-meta node) (meta new-form))\n          (set! (.-lastForm node) new-form)\n          (.push changelog [node :update old-data new-data])\n          ;; Remove children that no longer exist\n          (doseq [child-key dropped-keys]\n            (let [child-node (.get children child-key)]\n              (remove-node! child-node changelog))\n            (.delete children child-key))\n          ;; Update existing children and add new children\n          (doseq [[child-key child-form] (:children-keys shallow-node)]\n            (if-let [child (.get children child-key)]\n              ;; Update existing child\n              (update-child-node! scene child child-form changelog)\n              ;; Add new child\n              (when-let [child-node (add-node! scene old-context node child-key child-form changelog)]\n                (.set children child-key child-node)))))))))\n\n(defn- render-node! [^Scene scene ^Node node ^js render-fn force-replace? changelog]\n  (let [new-form (.-form node)]\n    (if (or force-replace?\n            (diff-fn? node new-form))\n      (do\n        (set! (.-dirty node) false)\n        ;; Completely different render function, replace\n        (replace-node! scene node new-form changelog))\n      ;; Same function, re-render using the supplied render-fn\n      (do\n        (set! (.-dirty node) false)\n        (update-node! scene node new-form render-fn changelog true)))))\n\n(defn render! [^Scene scene changelog]\n  (reagent/flush)\n  (let [queue (.-renderQueue scene)]\n    (loop [entry ^RenderQueueEntry (.dequeue queue)]\n      (when entry\n        (when-let [node ^Node (.-node entry)]\n          (when-not (.-disposed node)\n            (render-node! scene node (.-renderFn entry) (.-forceReplace entry) changelog))\n          (recur ^RenderQueueEntry (.dequeue queue)))))))\n\n(defn destroy! [^Scene scene]\n  (dispose-node! (.-root scene)))\n\n(defn create [root-fn]\n  (let [scene (Scene. nil (PriorityQueue.))\n        root-node (->node scene {} nil 0 [root-fn])]\n    (set! (.-root scene) root-node)\n    scene))\n"]}