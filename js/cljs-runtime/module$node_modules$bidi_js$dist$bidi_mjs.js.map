{
"version":3,
"file":"module$node_modules$bidi_js$dist$bidi_mjs.js",
"lineCount":40,
"mappings":"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",
"sources":["node_modules/bidi-js/dist/bidi.mjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$bidi_js$dist$bidi_mjs\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction bidiFactory() {\n  var bidi = function (exports) {\n    // Bidi character types data, auto generated\n    var DATA = {\n      \"R\": \"13k,1a,2,3,3,2+1j,ch+16,a+1,5+2,2+n,5,a,4,6+16,4+3,h+1b,4mo,179q,2+9,2+11,2i9+7y,2+68,4,3+4,5+13,4+3,2+4k,3+29,8+cf,1t+7z,w+17,3+3m,1t+3z,16o1+5r,8+30,8+mc,29+1r,29+4v,75+73\",\n      \"EN\": \"1c+9,3d+1,6,187+9,513,4+5,7+9,sf+j,175h+9,qw+q,161f+1d,4xt+a,25i+9\",\n      \"ES\": \"17,2,6dp+1,f+1,av,16vr,mx+1,4o,2\",\n      \"ET\": \"z+2,3h+3,b+1,ym,3e+1,2o,p4+1,8,6u,7c,g6,1wc,1n9+4,30+1b,2n,6d,qhx+1,h0m,a+1,49+2,63+1,4+1,6bb+3,12jj\",\n      \"AN\": \"16o+5,2j+9,2+1,35,ed,1ff2+9,87+u\",\n      \"CS\": \"18,2+1,b,2u,12k,55v,l,17v0,2,3,53,2+1,b\",\n      \"B\": \"a,3,f+2,2v,690\",\n      \"S\": \"9,2,k\",\n      \"WS\": \"c,k,4f4,1vk+a,u,1j,335\",\n      \"ON\": \"x+1,4+4,h+5,r+5,r+3,z,5+3,2+1,2+1,5,2+2,3+4,o,w,ci+1,8+d,3+d,6+8,2+g,39+1,9,6+1,2,33,b8,3+1,3c+1,7+1,5r,b,7h+3,sa+5,2,3i+6,jg+3,ur+9,2v,ij+1,9g+9,7+a,8m,4+1,49+x,14u,2+2,c+2,e+2,e+2,e+1,i+n,e+e,2+p,u+2,e+2,36+1,2+3,2+1,b,2+2,6+5,2,2,2,h+1,5+4,6+3,3+f,16+2,5+3l,3+81,1y+p,2+40,q+a,m+13,2r+ch,2+9e,75+hf,3+v,2+2w,6e+5,f+6,75+2a,1a+p,2+2g,d+5x,r+b,6+3,4+o,g,6+1,6+2,2k+1,4,2j,5h+z,1m+1,1e+f,t+2,1f+e,d+3,4o+3,2s+1,w,535+1r,h3l+1i,93+2,2s,b+1,3l+x,2v,4g+3,21+3,kz+1,g5v+1,5a,j+9,n+v,2,3,2+8,2+1,3+2,2,3,46+1,4+4,h+5,r+5,r+a,3h+2,4+6,b+4,78,1r+24,4+c,4,1hb,ey+6,103+j,16j+c,1ux+7,5+g,fsh,jdq+1t,4,57+2e,p1,1m,1m,1m,1m,4kt+1,7j+17,5+2r,d+e,3+e,2+e,2+10,m+4,w,1n+5,1q,4z+5,4b+rb,9+c,4+c,4+37,d+2g,8+b,l+b,5+1j,9+9,7+13,9+t,3+1,27+3c,2+29,2+3q,d+d,3+4,4+2,6+6,a+o,8+6,a+2,e+6,16+42,2+1i\",\n      \"BN\": \"0+8,6+d,2s+5,2+p,e,4m9,1kt+2,2b+5,5+5,17q9+v,7k,6p+8,6+1,119d+3,440+7,96s+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+75,6p+2rz,1ben+1,1ekf+1,1ekf+1\",\n      \"NSM\": \"lc+33,7o+6,7c+18,2,2+1,2+1,2,21+a,1d+k,h,2u+6,3+5,3+1,2+3,10,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,g+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+g,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,k1+w,2db+2,3y,2p+v,ff+3,30+1,n9x+3,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,r2,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+5,3+1,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2d+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,f0c+4,1o+6,t5,1s+3,2a,f5l+1,43t+2,i+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,gzhy+6n\",\n      \"AL\": \"16w,3,2,e+1b,z+2,2+2s,g+1,8+1,b+m,2+t,s+2i,c+e,4h+f,1d+1e,1bwe+dp,3+3z,x+c,2+1,35+3y,2rm+z,5+7,b+5,dt+l,c+u,17nl+27,1t+27,4x+6n,3+d\",\n      \"LRO\": \"6ct\",\n      \"RLO\": \"6cu\",\n      \"LRE\": \"6cq\",\n      \"RLE\": \"6cr\",\n      \"PDF\": \"6cs\",\n      \"LRI\": \"6ee\",\n      \"RLI\": \"6ef\",\n      \"FSI\": \"6eg\",\n      \"PDI\": \"6eh\"\n    };\n    var TYPES = {};\n    var TYPES_TO_NAMES = {};\n    TYPES.L = 1; //L is the default\n\n    TYPES_TO_NAMES[1] = 'L';\n    Object.keys(DATA).forEach(function (type, i) {\n      TYPES[type] = 1 << i + 1;\n      TYPES_TO_NAMES[TYPES[type]] = type;\n    });\n    Object.freeze(TYPES);\n    var ISOLATE_INIT_TYPES = TYPES.LRI | TYPES.RLI | TYPES.FSI;\n    var STRONG_TYPES = TYPES.L | TYPES.R | TYPES.AL;\n    var NEUTRAL_ISOLATE_TYPES = TYPES.B | TYPES.S | TYPES.WS | TYPES.ON | TYPES.FSI | TYPES.LRI | TYPES.RLI | TYPES.PDI;\n    var BN_LIKE_TYPES = TYPES.BN | TYPES.RLE | TYPES.LRE | TYPES.RLO | TYPES.LRO | TYPES.PDF;\n    var TRAILING_TYPES = TYPES.S | TYPES.WS | TYPES.B | ISOLATE_INIT_TYPES | TYPES.PDI | BN_LIKE_TYPES;\n    var map = null;\n\n    function parseData() {\n      if (!map) {\n        //const start = performance.now()\n        map = new Map();\n\n        var loop = function (type) {\n          if (DATA.hasOwnProperty(type)) {\n            var lastCode = 0;\n            DATA[type].split(',').forEach(function (range) {\n              var ref = range.split('+');\n              var skip = ref[0];\n              var step = ref[1];\n              skip = parseInt(skip, 36);\n              step = step ? parseInt(step, 36) : 0;\n              map.set(lastCode += skip, TYPES[type]);\n\n              for (var i = 0; i < step; i++) {\n                map.set(++lastCode, TYPES[type]);\n              }\n            });\n          }\n        };\n\n        for (var type in DATA) loop(type); //console.log(`char types parsed in ${performance.now() - start}ms`)\n\n      }\n    }\n    /**\n     * @param {string} char\n     * @return {number}\n     */\n\n\n    function getBidiCharType(char) {\n      parseData();\n      return map.get(char.codePointAt(0)) || TYPES.L;\n    }\n\n    function getBidiCharTypeName(char) {\n      return TYPES_TO_NAMES[getBidiCharType(char)];\n    } // Bidi bracket pairs data, auto generated\n\n\n    var data$1 = {\n      \"pairs\": \"14>1,1e>2,u>2,2wt>1,1>1,1ge>1,1wp>1,1j>1,f>1,hm>1,1>1,u>1,u6>1,1>1,+5,28>1,w>1,1>1,+3,b8>1,1>1,+3,1>3,-1>-1,3>1,1>1,+2,1s>1,1>1,x>1,th>1,1>1,+2,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,4q>1,1e>2,u>2,2>1,+1\",\n      \"canonical\": \"6f1>-6dx,6dy>-6dx,6ec>-6ed,6ee>-6ed,6ww>2jj,-2ji>2jj,14r4>-1e7l,1e7m>-1e7l,1e7m>-1e5c,1e5d>-1e5b,1e5c>-14qx,14qy>-14qx,14vn>-1ecg,1ech>-1ecg,1edu>-1ecg,1eci>-1ecg,1eda>-1ecg,1eci>-1ecg,1eci>-168q,168r>-168q,168s>-14ye,14yf>-14ye\"\n    };\n    /**\n     * Parses an string that holds encoded codepoint mappings, e.g. for bracket pairs or\n     * mirroring characters, as encoded by scripts/generateBidiData.js. Returns an object\n     * holding the `map`, and optionally a `reverseMap` if `includeReverse:true`.\n     * @param {string} encodedString\n     * @param {boolean} includeReverse - true if you want reverseMap in the output\n     * @return {{map: Map<number, number>, reverseMap?: Map<number, number>}}\n     */\n\n    function parseCharacterMap(encodedString, includeReverse) {\n      var radix = 36;\n      var lastCode = 0;\n      var map = new Map();\n      var reverseMap = includeReverse && new Map();\n      var prevPair;\n      encodedString.split(',').forEach(function visit(entry) {\n        if (entry.indexOf('+') !== -1) {\n          for (var i = +entry; i--;) {\n            visit(prevPair);\n          }\n        } else {\n          prevPair = entry;\n          var ref = entry.split('>');\n          var a = ref[0];\n          var b = ref[1];\n          a = String.fromCodePoint(lastCode += parseInt(a, radix));\n          b = String.fromCodePoint(lastCode += parseInt(b, radix));\n          map.set(a, b);\n          includeReverse && reverseMap.set(b, a);\n        }\n      });\n      return {\n        map: map,\n        reverseMap: reverseMap\n      };\n    }\n\n    var openToClose, closeToOpen, canonical;\n\n    function parse$1() {\n      if (!openToClose) {\n        //const start = performance.now()\n        var ref = parseCharacterMap(data$1.pairs, true);\n        var map = ref.map;\n        var reverseMap = ref.reverseMap;\n        openToClose = map;\n        closeToOpen = reverseMap;\n        canonical = parseCharacterMap(data$1.canonical, false).map; //console.log(`brackets parsed in ${performance.now() - start}ms`)\n      }\n    }\n\n    function openingToClosingBracket(char) {\n      parse$1();\n      return openToClose.get(char) || null;\n    }\n\n    function closingToOpeningBracket(char) {\n      parse$1();\n      return closeToOpen.get(char) || null;\n    }\n\n    function getCanonicalBracket(char) {\n      parse$1();\n      return canonical.get(char) || null;\n    } // Local type aliases\n\n\n    var TYPE_L = TYPES.L;\n    var TYPE_R = TYPES.R;\n    var TYPE_EN = TYPES.EN;\n    var TYPE_ES = TYPES.ES;\n    var TYPE_ET = TYPES.ET;\n    var TYPE_AN = TYPES.AN;\n    var TYPE_CS = TYPES.CS;\n    var TYPE_B = TYPES.B;\n    var TYPE_S = TYPES.S;\n    var TYPE_ON = TYPES.ON;\n    var TYPE_BN = TYPES.BN;\n    var TYPE_NSM = TYPES.NSM;\n    var TYPE_AL = TYPES.AL;\n    var TYPE_LRO = TYPES.LRO;\n    var TYPE_RLO = TYPES.RLO;\n    var TYPE_LRE = TYPES.LRE;\n    var TYPE_RLE = TYPES.RLE;\n    var TYPE_PDF = TYPES.PDF;\n    var TYPE_LRI = TYPES.LRI;\n    var TYPE_RLI = TYPES.RLI;\n    var TYPE_FSI = TYPES.FSI;\n    var TYPE_PDI = TYPES.PDI;\n    /**\n     * @typedef {object} GetEmbeddingLevelsResult\n     * @property {{start, end, level}[]} paragraphs\n     * @property {Uint8Array} levels\n     */\n\n    /**\n     * This function applies the Bidirectional Algorithm to a string, returning the resolved embedding levels\n     * in a single Uint8Array plus a list of objects holding each paragraph's start and end indices and resolved\n     * base embedding level.\n     *\n     * @param {string} string - The input string\n     * @param {\"ltr\"|\"rtl\"|\"auto\"} [baseDirection] - Use \"ltr\" or \"rtl\" to force a base paragraph direction,\n     *        otherwise a direction will be chosen automatically from each paragraph's contents.\n     * @return {GetEmbeddingLevelsResult}\n     */\n\n    function getEmbeddingLevels(string, baseDirection) {\n      var MAX_DEPTH = 125; // Start by mapping all characters to their unicode type, as a bitmask integer\n\n      var charTypes = new Uint32Array(string.length);\n\n      for (var i = 0; i < string.length; i++) {\n        charTypes[i] = getBidiCharType(string[i]);\n      }\n\n      var charTypeCounts = new Map(); //will be cleared at start of each paragraph\n\n      function changeCharType(i, type) {\n        var oldType = charTypes[i];\n        charTypes[i] = type;\n        charTypeCounts.set(oldType, charTypeCounts.get(oldType) - 1);\n\n        if (oldType & NEUTRAL_ISOLATE_TYPES) {\n          charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) - 1);\n        }\n\n        charTypeCounts.set(type, (charTypeCounts.get(type) || 0) + 1);\n\n        if (type & NEUTRAL_ISOLATE_TYPES) {\n          charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);\n        }\n      }\n\n      var embedLevels = new Uint8Array(string.length);\n      var isolationPairs = new Map(); //init->pdi and pdi->init\n      // === 3.3.1 The Paragraph Level ===\n      // 3.3.1 P1: Split the text into paragraphs\n\n      var paragraphs = []; // [{start, end, level}, ...]\n\n      var paragraph = null;\n\n      for (var i$1 = 0; i$1 < string.length; i$1++) {\n        if (!paragraph) {\n          paragraphs.push(paragraph = {\n            start: i$1,\n            end: string.length - 1,\n            // 3.3.1 P2-P3: Determine the paragraph level\n            level: baseDirection === 'rtl' ? 1 : baseDirection === 'ltr' ? 0 : determineAutoEmbedLevel(i$1, false)\n          });\n        }\n\n        if (charTypes[i$1] & TYPE_B) {\n          paragraph.end = i$1;\n          paragraph = null;\n        }\n      }\n\n      var FORMATTING_TYPES = TYPE_RLE | TYPE_LRE | TYPE_RLO | TYPE_LRO | ISOLATE_INIT_TYPES | TYPE_PDI | TYPE_PDF | TYPE_B;\n\n      var nextEven = function (n) {\n        return n + (n & 1 ? 1 : 2);\n      };\n\n      var nextOdd = function (n) {\n        return n + (n & 1 ? 2 : 1);\n      }; // Everything from here on will operate per paragraph.\n\n\n      for (var paraIdx = 0; paraIdx < paragraphs.length; paraIdx++) {\n        paragraph = paragraphs[paraIdx];\n        var statusStack = [{\n          _level: paragraph.level,\n          _override: 0,\n          //0=neutral, 1=L, 2=R\n          _isolate: 0 //bool\n\n        }];\n        var stackTop = void 0;\n        var overflowIsolateCount = 0;\n        var overflowEmbeddingCount = 0;\n        var validIsolateCount = 0;\n        charTypeCounts.clear(); // === 3.3.2 Explicit Levels and Directions ===\n\n        for (var i$2 = paragraph.start; i$2 <= paragraph.end; i$2++) {\n          var charType = charTypes[i$2];\n          stackTop = statusStack[statusStack.length - 1]; // Set initial counts\n\n          charTypeCounts.set(charType, (charTypeCounts.get(charType) || 0) + 1);\n\n          if (charType & NEUTRAL_ISOLATE_TYPES) {\n            charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);\n          } // Explicit Embeddings: 3.3.2 X2 - X3\n\n\n          if (charType & FORMATTING_TYPES) {\n            //prefilter all formatters\n            if (charType & (TYPE_RLE | TYPE_LRE)) {\n              embedLevels[i$2] = stackTop._level; // 5.2\n\n              var level = (charType === TYPE_RLE ? nextOdd : nextEven)(stackTop._level);\n\n              if (level <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {\n                statusStack.push({\n                  _level: level,\n                  _override: 0,\n                  _isolate: 0\n                });\n              } else if (!overflowIsolateCount) {\n                overflowEmbeddingCount++;\n              }\n            } // Explicit Overrides: 3.3.2 X4 - X5\n            else if (charType & (TYPE_RLO | TYPE_LRO)) {\n                embedLevels[i$2] = stackTop._level; // 5.2\n\n                var level$1 = (charType === TYPE_RLO ? nextOdd : nextEven)(stackTop._level);\n\n                if (level$1 <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {\n                  statusStack.push({\n                    _level: level$1,\n                    _override: charType & TYPE_RLO ? TYPE_R : TYPE_L,\n                    _isolate: 0\n                  });\n                } else if (!overflowIsolateCount) {\n                  overflowEmbeddingCount++;\n                }\n              } // Isolates: 3.3.2 X5a - X5c\n              else if (charType & ISOLATE_INIT_TYPES) {\n                  // X5c - FSI becomes either RLI or LRI\n                  if (charType & TYPE_FSI) {\n                    charType = determineAutoEmbedLevel(i$2 + 1, true) === 1 ? TYPE_RLI : TYPE_LRI;\n                  }\n\n                  embedLevels[i$2] = stackTop._level;\n\n                  if (stackTop._override) {\n                    changeCharType(i$2, stackTop._override);\n                  }\n\n                  var level$2 = (charType === TYPE_RLI ? nextOdd : nextEven)(stackTop._level);\n\n                  if (level$2 <= MAX_DEPTH && overflowIsolateCount === 0 && overflowEmbeddingCount === 0) {\n                    validIsolateCount++;\n                    statusStack.push({\n                      _level: level$2,\n                      _override: 0,\n                      _isolate: 1,\n                      _isolInitIndex: i$2\n                    });\n                  } else {\n                    overflowIsolateCount++;\n                  }\n                } // Terminating Isolates: 3.3.2 X6a\n                else if (charType & TYPE_PDI) {\n                    if (overflowIsolateCount > 0) {\n                      overflowIsolateCount--;\n                    } else if (validIsolateCount > 0) {\n                      overflowEmbeddingCount = 0;\n\n                      while (!statusStack[statusStack.length - 1]._isolate) {\n                        statusStack.pop();\n                      } // Add to isolation pairs bidirectional mapping:\n\n\n                      var isolInitIndex = statusStack[statusStack.length - 1]._isolInitIndex;\n\n                      if (isolInitIndex != null) {\n                        isolationPairs.set(isolInitIndex, i$2);\n                        isolationPairs.set(i$2, isolInitIndex);\n                      }\n\n                      statusStack.pop();\n                      validIsolateCount--;\n                    }\n\n                    stackTop = statusStack[statusStack.length - 1];\n                    embedLevels[i$2] = stackTop._level;\n\n                    if (stackTop._override) {\n                      changeCharType(i$2, stackTop._override);\n                    }\n                  } // Terminating Embeddings and Overrides: 3.3.2 X7\n                  else if (charType & TYPE_PDF) {\n                      if (overflowIsolateCount === 0) {\n                        if (overflowEmbeddingCount > 0) {\n                          overflowEmbeddingCount--;\n                        } else if (!stackTop._isolate && statusStack.length > 1) {\n                          statusStack.pop();\n                          stackTop = statusStack[statusStack.length - 1];\n                        }\n                      }\n\n                      embedLevels[i$2] = stackTop._level; // 5.2\n                    } // End of Paragraph: 3.3.2 X8\n                    else if (charType & TYPE_B) {\n                        embedLevels[i$2] = paragraph.level;\n                      }\n          } // Non-formatting characters: 3.3.2 X6\n          else {\n              embedLevels[i$2] = stackTop._level; // NOTE: This exclusion of BN seems to go against what section 5.2 says, but is required for test passage\n\n              if (stackTop._override && charType !== TYPE_BN) {\n                changeCharType(i$2, stackTop._override);\n              }\n            }\n        } // === 3.3.3 Preparations for Implicit Processing ===\n        // Remove all RLE, LRE, RLO, LRO, PDF, and BN characters: 3.3.3 X9\n        // Note: Due to section 5.2, we won't remove them, but we'll use the BN_LIKE_TYPES bitset to\n        // easily ignore them all from here on out.\n        // 3.3.3 X10\n        // Compute the set of isolating run sequences as specified by BD13\n\n\n        var levelRuns = [];\n        var currentRun = null;\n\n        for (var i$3 = paragraph.start; i$3 <= paragraph.end; i$3++) {\n          var charType$1 = charTypes[i$3];\n\n          if (!(charType$1 & BN_LIKE_TYPES)) {\n            var lvl = embedLevels[i$3];\n            var isIsolInit = charType$1 & ISOLATE_INIT_TYPES;\n            var isPDI = charType$1 === TYPE_PDI;\n\n            if (currentRun && lvl === currentRun._level) {\n              currentRun._end = i$3;\n              currentRun._endsWithIsolInit = isIsolInit;\n            } else {\n              levelRuns.push(currentRun = {\n                _start: i$3,\n                _end: i$3,\n                _level: lvl,\n                _startsWithPDI: isPDI,\n                _endsWithIsolInit: isIsolInit\n              });\n            }\n          }\n        }\n\n        var isolatingRunSeqs = []; // [{seqIndices: [], sosType: L|R, eosType: L|R}]\n\n        for (var runIdx = 0; runIdx < levelRuns.length; runIdx++) {\n          var run = levelRuns[runIdx];\n\n          if (!run._startsWithPDI || run._startsWithPDI && !isolationPairs.has(run._start)) {\n            var seqRuns = [currentRun = run];\n\n            for (var pdiIndex = void 0; currentRun && currentRun._endsWithIsolInit && (pdiIndex = isolationPairs.get(currentRun._end)) != null;) {\n              for (var i$4 = runIdx + 1; i$4 < levelRuns.length; i$4++) {\n                if (levelRuns[i$4]._start === pdiIndex) {\n                  seqRuns.push(currentRun = levelRuns[i$4]);\n                  break;\n                }\n              }\n            } // build flat list of indices across all runs:\n\n\n            var seqIndices = [];\n\n            for (var i$5 = 0; i$5 < seqRuns.length; i$5++) {\n              var run$1 = seqRuns[i$5];\n\n              for (var j = run$1._start; j <= run$1._end; j++) {\n                seqIndices.push(j);\n              }\n            } // determine the sos/eos types:\n\n\n            var firstLevel = embedLevels[seqIndices[0]];\n            var prevLevel = paragraph.level;\n\n            for (var i$6 = seqIndices[0] - 1; i$6 >= 0; i$6--) {\n              if (!(charTypes[i$6] & BN_LIKE_TYPES)) {\n                //5.2\n                prevLevel = embedLevels[i$6];\n                break;\n              }\n            }\n\n            var lastIndex = seqIndices[seqIndices.length - 1];\n            var lastLevel = embedLevels[lastIndex];\n            var nextLevel = paragraph.level;\n\n            if (!(charTypes[lastIndex] & ISOLATE_INIT_TYPES)) {\n              for (var i$7 = lastIndex + 1; i$7 <= paragraph.end; i$7++) {\n                if (!(charTypes[i$7] & BN_LIKE_TYPES)) {\n                  //5.2\n                  nextLevel = embedLevels[i$7];\n                  break;\n                }\n              }\n            }\n\n            isolatingRunSeqs.push({\n              _seqIndices: seqIndices,\n              _sosType: Math.max(prevLevel, firstLevel) % 2 ? TYPE_R : TYPE_L,\n              _eosType: Math.max(nextLevel, lastLevel) % 2 ? TYPE_R : TYPE_L\n            });\n          }\n        } // The next steps are done per isolating run sequence\n\n\n        for (var seqIdx = 0; seqIdx < isolatingRunSeqs.length; seqIdx++) {\n          var ref = isolatingRunSeqs[seqIdx];\n          var seqIndices$1 = ref._seqIndices;\n          var sosType = ref._sosType;\n          var eosType = ref._eosType; // === 3.3.4 Resolving Weak Types ===\n          // W1 + 5.2. Search backward from each NSM to the first character in the isolating run sequence whose\n          // bidirectional type is not BN, and set the NSM to ON if it is an isolate initiator or PDI, and to its\n          // type otherwise. If the NSM is the first non-BN character, change the NSM to the type of sos.\n\n          if (charTypeCounts.get(TYPE_NSM)) {\n            for (var si = 0; si < seqIndices$1.length; si++) {\n              var i$8 = seqIndices$1[si];\n\n              if (charTypes[i$8] & TYPE_NSM) {\n                var prevType = sosType;\n\n                for (var sj = si - 1; sj >= 0; sj--) {\n                  if (!(charTypes[seqIndices$1[sj]] & BN_LIKE_TYPES)) {\n                    //5.2 scan back to first non-BN\n                    prevType = charTypes[seqIndices$1[sj]];\n                    break;\n                  }\n                }\n\n                changeCharType(i$8, prevType & (ISOLATE_INIT_TYPES | TYPE_PDI) ? TYPE_ON : prevType);\n              }\n            }\n          } // W2. Search backward from each instance of a European number until the first strong type (R, L, AL, or sos)\n          // is found. If an AL is found, change the type of the European number to Arabic number.\n\n\n          if (charTypeCounts.get(TYPE_EN)) {\n            for (var si$1 = 0; si$1 < seqIndices$1.length; si$1++) {\n              var i$9 = seqIndices$1[si$1];\n\n              if (charTypes[i$9] & TYPE_EN) {\n                for (var sj$1 = si$1 - 1; sj$1 >= -1; sj$1--) {\n                  var prevCharType = sj$1 === -1 ? sosType : charTypes[seqIndices$1[sj$1]];\n\n                  if (prevCharType & STRONG_TYPES) {\n                    if (prevCharType === TYPE_AL) {\n                      changeCharType(i$9, TYPE_AN);\n                    }\n\n                    break;\n                  }\n                }\n              }\n            }\n          } // W3. Change all ALs to R\n\n\n          if (charTypeCounts.get(TYPE_AL)) {\n            for (var si$2 = 0; si$2 < seqIndices$1.length; si$2++) {\n              var i$10 = seqIndices$1[si$2];\n\n              if (charTypes[i$10] & TYPE_AL) {\n                changeCharType(i$10, TYPE_R);\n              }\n            }\n          } // W4. A single European separator between two European numbers changes to a European number. A single common\n          // separator between two numbers of the same type changes to that type.\n\n\n          if (charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {\n            for (var si$3 = 1; si$3 < seqIndices$1.length - 1; si$3++) {\n              var i$11 = seqIndices$1[si$3];\n\n              if (charTypes[i$11] & (TYPE_ES | TYPE_CS)) {\n                var prevType$1 = 0,\n                    nextType = 0;\n\n                for (var sj$2 = si$3 - 1; sj$2 >= 0; sj$2--) {\n                  prevType$1 = charTypes[seqIndices$1[sj$2]];\n\n                  if (!(prevType$1 & BN_LIKE_TYPES)) {\n                    //5.2\n                    break;\n                  }\n                }\n\n                for (var sj$3 = si$3 + 1; sj$3 < seqIndices$1.length; sj$3++) {\n                  nextType = charTypes[seqIndices$1[sj$3]];\n\n                  if (!(nextType & BN_LIKE_TYPES)) {\n                    //5.2\n                    break;\n                  }\n                }\n\n                if (prevType$1 === nextType && (charTypes[i$11] === TYPE_ES ? prevType$1 === TYPE_EN : prevType$1 & (TYPE_EN | TYPE_AN))) {\n                  changeCharType(i$11, prevType$1);\n                }\n              }\n            }\n          } // W5. A sequence of European terminators adjacent to European numbers changes to all European numbers.\n\n\n          if (charTypeCounts.get(TYPE_EN)) {\n            for (var si$4 = 0; si$4 < seqIndices$1.length; si$4++) {\n              var i$12 = seqIndices$1[si$4];\n\n              if (charTypes[i$12] & TYPE_EN) {\n                for (var sj$4 = si$4 - 1; sj$4 >= 0 && charTypes[seqIndices$1[sj$4]] & (TYPE_ET | BN_LIKE_TYPES); sj$4--) {\n                  changeCharType(seqIndices$1[sj$4], TYPE_EN);\n                }\n\n                for (var sj$5 = si$4 + 1; sj$5 < seqIndices$1.length && charTypes[seqIndices$1[sj$5]] & (TYPE_ET | BN_LIKE_TYPES); sj$5++) {\n                  changeCharType(seqIndices$1[sj$5], TYPE_EN);\n                }\n              }\n            }\n          } // W6. Otherwise, separators and terminators change to Other Neutral.\n\n\n          if (charTypeCounts.get(TYPE_ET) || charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {\n            for (var si$5 = 0; si$5 < seqIndices$1.length; si$5++) {\n              var i$13 = seqIndices$1[si$5];\n\n              if (charTypes[i$13] & (TYPE_ET | TYPE_ES | TYPE_CS)) {\n                changeCharType(i$13, TYPE_ON); // 5.2 transform adjacent BNs too:\n\n                for (var sj$6 = si$5 - 1; sj$6 >= 0 && charTypes[seqIndices$1[sj$6]] & BN_LIKE_TYPES; sj$6--) {\n                  changeCharType(seqIndices$1[sj$6], TYPE_ON);\n                }\n\n                for (var sj$7 = si$5 + 1; sj$7 < seqIndices$1.length && charTypes[seqIndices$1[sj$7]] & BN_LIKE_TYPES; sj$7++) {\n                  changeCharType(seqIndices$1[sj$7], TYPE_ON);\n                }\n              }\n            }\n          } // W7. Search backward from each instance of a European number until the first strong type (R, L, or sos)\n          // is found. If an L is found, then change the type of the European number to L.\n          // NOTE: implemented in single forward pass for efficiency\n\n\n          if (charTypeCounts.get(TYPE_EN)) {\n            for (var si$6 = 0, prevStrongType = sosType; si$6 < seqIndices$1.length; si$6++) {\n              var i$14 = seqIndices$1[si$6];\n              var type = charTypes[i$14];\n\n              if (type & TYPE_EN) {\n                if (prevStrongType === TYPE_L) {\n                  changeCharType(i$14, TYPE_L);\n                }\n              } else if (type & STRONG_TYPES) {\n                prevStrongType = type;\n              }\n            }\n          } // === 3.3.5 Resolving Neutral and Isolate Formatting Types ===\n\n\n          if (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES)) {\n            // N0. Process bracket pairs in an isolating run sequence sequentially in the logical order of the text\n            // positions of the opening paired brackets using the logic given below. Within this scope, bidirectional\n            // types EN and AN are treated as R.\n            var R_TYPES_FOR_N_STEPS = TYPE_R | TYPE_EN | TYPE_AN;\n            var STRONG_TYPES_FOR_N_STEPS = R_TYPES_FOR_N_STEPS | TYPE_L; // * Identify the bracket pairs in the current isolating run sequence according to BD16.\n\n            var bracketPairs = [];\n            {\n              var openerStack = [];\n\n              for (var si$7 = 0; si$7 < seqIndices$1.length; si$7++) {\n                // NOTE: for any potential bracket character we also test that it still carries a NI\n                // type, as that may have been changed earlier. This doesn't seem to be explicitly\n                // called out in the spec, but is required for passage of certain tests.\n                if (charTypes[seqIndices$1[si$7]] & NEUTRAL_ISOLATE_TYPES) {\n                  var char = string[seqIndices$1[si$7]];\n                  var oppositeBracket = void 0; // Opening bracket\n\n                  if (openingToClosingBracket(char) !== null) {\n                    if (openerStack.length < 63) {\n                      openerStack.push({\n                        char: char,\n                        seqIndex: si$7\n                      });\n                    } else {\n                      break;\n                    }\n                  } // Closing bracket\n                  else if ((oppositeBracket = closingToOpeningBracket(char)) !== null) {\n                      for (var stackIdx = openerStack.length - 1; stackIdx >= 0; stackIdx--) {\n                        var stackChar = openerStack[stackIdx].char;\n\n                        if (stackChar === oppositeBracket || stackChar === closingToOpeningBracket(getCanonicalBracket(char)) || openingToClosingBracket(getCanonicalBracket(stackChar)) === char) {\n                          bracketPairs.push([openerStack[stackIdx].seqIndex, si$7]);\n                          openerStack.length = stackIdx; //pop the matching bracket and all following\n\n                          break;\n                        }\n                      }\n                    }\n                }\n              }\n\n              bracketPairs.sort(function (a, b) {\n                return a[0] - b[0];\n              });\n            } // * For each bracket-pair element in the list of pairs of text positions\n\n            for (var pairIdx = 0; pairIdx < bracketPairs.length; pairIdx++) {\n              var ref$1 = bracketPairs[pairIdx];\n              var openSeqIdx = ref$1[0];\n              var closeSeqIdx = ref$1[1]; // a. Inspect the bidirectional types of the characters enclosed within the bracket pair.\n              // b. If any strong type (either L or R) matching the embedding direction is found, set the type for both\n              // brackets in the pair to match the embedding direction.\n\n              var foundStrongType = false;\n              var useStrongType = 0;\n\n              for (var si$8 = openSeqIdx + 1; si$8 < closeSeqIdx; si$8++) {\n                var i$15 = seqIndices$1[si$8];\n\n                if (charTypes[i$15] & STRONG_TYPES_FOR_N_STEPS) {\n                  foundStrongType = true;\n                  var lr = charTypes[i$15] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;\n\n                  if (lr === getEmbedDirection(i$15)) {\n                    useStrongType = lr;\n                    break;\n                  }\n                }\n              } // c. Otherwise, if there is a strong type it must be opposite the embedding direction. Therefore, test\n              // for an established context with a preceding strong type by checking backwards before the opening paired\n              // bracket until the first strong type (L, R, or sos) is found.\n              //    1. If the preceding strong type is also opposite the embedding direction, context is established, so\n              //    set the type for both brackets in the pair to that direction.\n              //    2. Otherwise set the type for both brackets in the pair to the embedding direction.\n\n\n              if (foundStrongType && !useStrongType) {\n                useStrongType = sosType;\n\n                for (var si$9 = openSeqIdx - 1; si$9 >= 0; si$9--) {\n                  var i$16 = seqIndices$1[si$9];\n\n                  if (charTypes[i$16] & STRONG_TYPES_FOR_N_STEPS) {\n                    var lr$1 = charTypes[i$16] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;\n\n                    if (lr$1 !== getEmbedDirection(i$16)) {\n                      useStrongType = lr$1;\n                    } else {\n                      useStrongType = getEmbedDirection(i$16);\n                    }\n\n                    break;\n                  }\n                }\n              }\n\n              if (useStrongType) {\n                charTypes[seqIndices$1[openSeqIdx]] = charTypes[seqIndices$1[closeSeqIdx]] = useStrongType; // * Any number of characters that had original bidirectional character type NSM prior to the application\n                // of W1 that immediately follow a paired bracket which changed to L or R under N0 should change to match\n                // the type of their preceding bracket.\n\n                if (useStrongType !== getEmbedDirection(seqIndices$1[openSeqIdx])) {\n                  for (var si$10 = openSeqIdx + 1; si$10 < seqIndices$1.length; si$10++) {\n                    if (!(charTypes[seqIndices$1[si$10]] & BN_LIKE_TYPES)) {\n                      if (getBidiCharType(string[seqIndices$1[si$10]]) & TYPE_NSM) {\n                        charTypes[seqIndices$1[si$10]] = useStrongType;\n                      }\n\n                      break;\n                    }\n                  }\n                }\n\n                if (useStrongType !== getEmbedDirection(seqIndices$1[closeSeqIdx])) {\n                  for (var si$11 = closeSeqIdx + 1; si$11 < seqIndices$1.length; si$11++) {\n                    if (!(charTypes[seqIndices$1[si$11]] & BN_LIKE_TYPES)) {\n                      if (getBidiCharType(string[seqIndices$1[si$11]]) & TYPE_NSM) {\n                        charTypes[seqIndices$1[si$11]] = useStrongType;\n                      }\n\n                      break;\n                    }\n                  }\n                }\n              }\n            } // N1. A sequence of NIs takes the direction of the surrounding strong text if the text on both sides has the\n            // same direction.\n            // N2. Any remaining NIs take the embedding direction.\n\n\n            for (var si$12 = 0; si$12 < seqIndices$1.length; si$12++) {\n              if (charTypes[seqIndices$1[si$12]] & NEUTRAL_ISOLATE_TYPES) {\n                var niRunStart = si$12,\n                    niRunEnd = si$12;\n                var prevType$2 = sosType; //si === 0 ? sosType : (charTypes[seqIndices[si - 1]] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L\n\n                for (var si2 = si$12 - 1; si2 >= 0; si2--) {\n                  if (charTypes[seqIndices$1[si2]] & BN_LIKE_TYPES) {\n                    niRunStart = si2; //5.2 treat BNs adjacent to NIs as NIs\n                  } else {\n                    prevType$2 = charTypes[seqIndices$1[si2]] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;\n                    break;\n                  }\n                }\n\n                var nextType$1 = eosType;\n\n                for (var si2$1 = si$12 + 1; si2$1 < seqIndices$1.length; si2$1++) {\n                  if (charTypes[seqIndices$1[si2$1]] & (NEUTRAL_ISOLATE_TYPES | BN_LIKE_TYPES)) {\n                    niRunEnd = si2$1;\n                  } else {\n                    nextType$1 = charTypes[seqIndices$1[si2$1]] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;\n                    break;\n                  }\n                }\n\n                for (var sj$8 = niRunStart; sj$8 <= niRunEnd; sj$8++) {\n                  charTypes[seqIndices$1[sj$8]] = prevType$2 === nextType$1 ? prevType$2 : getEmbedDirection(seqIndices$1[sj$8]);\n                }\n\n                si$12 = niRunEnd;\n              }\n            }\n          }\n        } // === 3.3.6 Resolving Implicit Levels ===\n\n\n        for (var i$17 = paragraph.start; i$17 <= paragraph.end; i$17++) {\n          var level$3 = embedLevels[i$17];\n          var type$1 = charTypes[i$17]; // I2. For all characters with an odd (right-to-left) embedding level, those of type L, EN or AN go up one level.\n\n          if (level$3 & 1) {\n            if (type$1 & (TYPE_L | TYPE_EN | TYPE_AN)) {\n              embedLevels[i$17]++;\n            }\n          } // I1. For all characters with an even (left-to-right) embedding level, those of type R go up one level\n          // and those of type AN or EN go up two levels.\n          else {\n              if (type$1 & TYPE_R) {\n                embedLevels[i$17]++;\n              } else if (type$1 & (TYPE_AN | TYPE_EN)) {\n                embedLevels[i$17] += 2;\n              }\n            } // 5.2: Resolve any LRE, RLE, LRO, RLO, PDF, or BN to the level of the preceding character if there is one,\n          // and otherwise to the base level.\n\n\n          if (type$1 & BN_LIKE_TYPES) {\n            embedLevels[i$17] = i$17 === 0 ? paragraph.level : embedLevels[i$17 - 1];\n          } // 3.4 L1.1-4: Reset the embedding level of segment/paragraph separators, and any sequence of whitespace or\n          // isolate formatting characters preceding them or the end of the paragraph, to the paragraph level.\n          // NOTE: this will also need to be applied to each individual line ending after line wrapping occurs.\n\n\n          if (i$17 === paragraph.end || getBidiCharType(string[i$17]) & (TYPE_S | TYPE_B)) {\n            for (var j$1 = i$17; j$1 >= 0 && getBidiCharType(string[j$1]) & TRAILING_TYPES; j$1--) {\n              embedLevels[j$1] = paragraph.level;\n            }\n          }\n        }\n      } // DONE! The resolved levels can then be used, after line wrapping, to flip runs of characters\n      // according to section 3.4 Reordering Resolved Levels\n\n\n      return {\n        levels: embedLevels,\n        paragraphs: paragraphs\n      };\n\n      function determineAutoEmbedLevel(start, isFSI) {\n        // 3.3.1 P2 - P3\n        for (var i = start; i < string.length; i++) {\n          var charType = charTypes[i];\n\n          if (charType & (TYPE_R | TYPE_AL)) {\n            return 1;\n          }\n\n          if (charType & (TYPE_B | TYPE_L) || isFSI && charType === TYPE_PDI) {\n            return 0;\n          }\n\n          if (charType & ISOLATE_INIT_TYPES) {\n            var pdi = indexOfMatchingPDI(i);\n            i = pdi === -1 ? string.length : pdi;\n          }\n        }\n\n        return 0;\n      }\n\n      function indexOfMatchingPDI(isolateStart) {\n        // 3.1.2 BD9\n        var isolationLevel = 1;\n\n        for (var i = isolateStart + 1; i < string.length; i++) {\n          var charType = charTypes[i];\n\n          if (charType & TYPE_B) {\n            break;\n          }\n\n          if (charType & TYPE_PDI) {\n            if (--isolationLevel === 0) {\n              return i;\n            }\n          } else if (charType & ISOLATE_INIT_TYPES) {\n            isolationLevel++;\n          }\n        }\n\n        return -1;\n      }\n\n      function getEmbedDirection(i) {\n        return embedLevels[i] & 1 ? TYPE_R : TYPE_L;\n      }\n    } // Bidi mirrored chars data, auto generated\n\n\n    var data = \"14>1,j>2,t>2,u>2,1a>g,2v3>1,1>1,1ge>1,1wd>1,b>1,1j>1,f>1,ai>3,-2>3,+1,8>1k0,-1jq>1y7,-1y6>1hf,-1he>1h6,-1h5>1ha,-1h8>1qi,-1pu>1,6>3u,-3s>7,6>1,1>1,f>1,1>1,+2,3>1,1>1,+13,4>1,1>1,6>1eo,-1ee>1,3>1mg,-1me>1mk,-1mj>1mi,-1mg>1mi,-1md>1,1>1,+2,1>10k,-103>1,1>1,4>1,5>1,1>1,+10,3>1,1>8,-7>8,+1,-6>7,+1,a>1,1>1,u>1,u6>1,1>1,+5,26>1,1>1,2>1,2>2,8>1,7>1,4>1,1>1,+5,b8>1,1>1,+3,1>3,-2>1,2>1,1>1,+2,c>1,3>1,1>1,+2,h>1,3>1,a>1,1>1,2>1,3>1,1>1,d>1,f>1,3>1,1a>1,1>1,6>1,7>1,13>1,k>1,1>1,+19,4>1,1>1,+2,2>1,1>1,+18,m>1,a>1,1>1,lk>1,1>1,4>1,2>1,f>1,3>1,1>1,+3,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,6>1,4j>1,j>2,t>2,u>2,2>1,+1\";\n    var mirrorMap;\n\n    function parse() {\n      if (!mirrorMap) {\n        //const start = performance.now()\n        var ref = parseCharacterMap(data, true);\n        var map = ref.map;\n        var reverseMap = ref.reverseMap; // Combine both maps into one\n\n        reverseMap.forEach(function (value, key) {\n          map.set(key, value);\n        });\n        mirrorMap = map; //console.log(`mirrored chars parsed in ${performance.now() - start}ms`)\n      }\n    }\n\n    function getMirroredCharacter(char) {\n      parse();\n      return mirrorMap.get(char) || null;\n    }\n    /**\n     * Given a string and its resolved embedding levels, build a map of indices to replacement chars\n     * for any characters in right-to-left segments that have defined mirrored characters.\n     * @param string\n     * @param embeddingLevels\n     * @param [start]\n     * @param [end]\n     * @return {Map<number, string>}\n     */\n\n\n    function getMirroredCharactersMap(string, embeddingLevels, start, end) {\n      var strLen = string.length;\n      start = Math.max(0, start == null ? 0 : +start);\n      end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);\n      var map = new Map();\n\n      for (var i = start; i <= end; i++) {\n        if (embeddingLevels[i] & 1) {\n          //only odd (rtl) levels\n          var mirror = getMirroredCharacter(string[i]);\n\n          if (mirror !== null) {\n            map.set(i, mirror);\n          }\n        }\n      }\n\n      return map;\n    }\n    /**\n     * Given a start and end denoting a single line within a string, and a set of precalculated\n     * bidi embedding levels, produce a list of segments whose ordering should be flipped, in sequence.\n     * @param {string} string - the full input string\n     * @param {GetEmbeddingLevelsResult} embeddingLevelsResult - the result object from getEmbeddingLevels\n     * @param {number} [start] - first character in a subset of the full string\n     * @param {number} [end] - last character in a subset of the full string\n     * @return {number[][]} - the list of start/end segments that should be flipped, in order.\n     */\n\n\n    function getReorderSegments(string, embeddingLevelsResult, start, end) {\n      var strLen = string.length;\n      start = Math.max(0, start == null ? 0 : +start);\n      end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);\n      var segments = [];\n      embeddingLevelsResult.paragraphs.forEach(function (paragraph) {\n        var lineStart = Math.max(start, paragraph.start);\n        var lineEnd = Math.min(end, paragraph.end);\n\n        if (lineStart < lineEnd) {\n          // Local slice for mutation\n          var lineLevels = embeddingLevelsResult.levels.slice(lineStart, lineEnd + 1); // 3.4 L1.4: Reset any sequence of whitespace characters and/or isolate formatting characters at the\n          // end of the line to the paragraph level.\n\n          for (var i = lineEnd; i >= lineStart && getBidiCharType(string[i]) & TRAILING_TYPES; i--) {\n            lineLevels[i] = paragraph.level;\n          } // L2. From the highest level found in the text to the lowest odd level on each line, including intermediate levels\n          // not actually present in the text, reverse any contiguous sequence of characters that are at that level or higher.\n\n\n          var maxLevel = paragraph.level;\n          var minOddLevel = Infinity;\n\n          for (var i$1 = 0; i$1 < lineLevels.length; i$1++) {\n            var level = lineLevels[i$1];\n\n            if (level > maxLevel) {\n              maxLevel = level;\n            }\n\n            if (level < minOddLevel) {\n              minOddLevel = level | 1;\n            }\n          }\n\n          for (var lvl = maxLevel; lvl >= minOddLevel; lvl--) {\n            for (var i$2 = 0; i$2 < lineLevels.length; i$2++) {\n              if (lineLevels[i$2] >= lvl) {\n                var segStart = i$2;\n\n                while (i$2 + 1 < lineLevels.length && lineLevels[i$2 + 1] >= lvl) {\n                  i$2++;\n                }\n\n                if (i$2 > segStart) {\n                  segments.push([segStart + start, i$2 + start]);\n                }\n              }\n            }\n          }\n        }\n      });\n      return segments;\n    }\n    /**\n     * @param {string} string\n     * @param {GetEmbeddingLevelsResult} embedLevelsResult\n     * @param {number} [start]\n     * @param {number} [end]\n     * @return {string} the new string with bidi segments reordered\n     */\n\n\n    function getReorderedString(string, embedLevelsResult, start, end) {\n      var indices = getReorderedIndices(string, embedLevelsResult, start, end);\n      var chars = [].concat(string);\n      indices.forEach(function (charIndex, i) {\n        chars[i] = (embedLevelsResult.levels[charIndex] & 1 ? getMirroredCharacter(string[charIndex]) : null) || string[charIndex];\n      });\n      return chars.join('');\n    }\n    /**\n     * @param {string} string\n     * @param {GetEmbeddingLevelsResult} embedLevelsResult\n     * @param {number} [start]\n     * @param {number} [end]\n     * @return {number[]} an array with character indices in their new bidi order\n     */\n\n\n    function getReorderedIndices(string, embedLevelsResult, start, end) {\n      var segments = getReorderSegments(string, embedLevelsResult, start, end); // Fill an array with indices\n\n      var indices = [];\n\n      for (var i = 0; i < string.length; i++) {\n        indices[i] = i;\n      } // Reverse each segment in order\n\n\n      segments.forEach(function (ref) {\n        var start = ref[0];\n        var end = ref[1];\n        var slice = indices.slice(start, end + 1);\n\n        for (var i = slice.length; i--;) {\n          indices[end - i] = slice[i];\n        }\n      });\n      return indices;\n    }\n\n    exports.closingToOpeningBracket = closingToOpeningBracket;\n    exports.getBidiCharType = getBidiCharType;\n    exports.getBidiCharTypeName = getBidiCharTypeName;\n    exports.getCanonicalBracket = getCanonicalBracket;\n    exports.getEmbeddingLevels = getEmbeddingLevels;\n    exports.getMirroredCharacter = getMirroredCharacter;\n    exports.getMirroredCharactersMap = getMirroredCharactersMap;\n    exports.getReorderSegments = getReorderSegments;\n    exports.getReorderedIndices = getReorderedIndices;\n    exports.getReorderedString = getReorderedString;\n    exports.openingToClosingBracket = openingToClosingBracket;\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    return exports;\n  }({});\n\n  return bidi;\n}\n\nvar _default = bidiFactory;\nexports.default = _default;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","bidiFactory","parseData","map","Map","loop","type","DATA","hasOwnProperty","lastCode","split","forEach","range","ref","skip","step","parseInt","set","TYPES","i","getBidiCharType","char","get","codePointAt","L","parseCharacterMap","encodedString","includeReverse","reverseMap","prevPair","visit","entry","indexOf","a","b","String","fromCodePoint","radix","parse$1","openToClose","data$1","pairs","closeToOpen","canonical","openingToClosingBracket","closingToOpeningBracket","getCanonicalBracket","parse","mirrorMap","data","key","getMirroredCharacter","getReorderSegments","string","embeddingLevelsResult","start","end","strLen","length","Math","max","min","segments","paragraphs","paragraph","lineStart","lineEnd","lineLevels","levels","slice","TRAILING_TYPES","level","maxLevel","minOddLevel","Infinity","i$1","lvl","i$2","segStart","push","getReorderedIndices","embedLevelsResult","indices","TYPES_TO_NAMES","keys","freeze","ISOLATE_INIT_TYPES","LRI","RLI","FSI","STRONG_TYPES","R","AL","NEUTRAL_ISOLATE_TYPES","B","S","WS","ON","PDI","BN_LIKE_TYPES","BN","RLE","LRE","RLO","LRO","PDF","TYPE_L","TYPE_R","TYPE_EN","EN","TYPE_ES","ES","TYPE_ET","ET","TYPE_AN","AN","TYPE_CS","CS","TYPE_B","TYPE_S","TYPE_ON","TYPE_BN","TYPE_NSM","NSM","TYPE_AL","TYPE_LRO","TYPE_RLO","TYPE_LRE","TYPE_RLE","TYPE_PDF","TYPE_LRI","TYPE_RLI","TYPE_FSI","TYPE_PDI","getBidiCharTypeName","getEmbeddingLevels","baseDirection","changeCharType","oldType","charTypes","charTypeCounts","determineAutoEmbedLevel","isFSI","charType","isolationLevel","pdi","getEmbedDirection","embedLevels","Uint32Array","Uint8Array","isolationPairs","FORMATTING_TYPES","nextEven","n","nextOdd","paraIdx","statusStack","_level","_override","_isolate","stackTop","overflowIsolateCount","overflowEmbeddingCount","validIsolateCount","clear","MAX_DEPTH","level$1","level$2","_isolInitIndex","pop","isolInitIndex","levelRuns","currentRun","i$3","charType$1","isIsolInit","isPDI","_end","_endsWithIsolInit","_start","_startsWithPDI","isolatingRunSeqs","runIdx","run","has","seqRuns","pdiIndex","i$4","seqIndices","i$5","run$1","j","firstLevel","prevLevel","i$6","lastIndex","lastLevel","nextLevel","i$7","_seqIndices","_sosType","_eosType","seqIdx","seqIndices$1","sosType","eosType","si","i$8","prevType","sj","si$1","i$9","sj$1","prevCharType","si$2","i$10","si$3","i$11","prevType$1","nextType","sj$2","sj$3","si$4","i$12","sj$4","sj$5","si$5","i$13","sj$6","sj$7","si$6","prevStrongType","i$14","R_TYPES_FOR_N_STEPS","STRONG_TYPES_FOR_N_STEPS","bracketPairs","openerStack","si$7","oppositeBracket","seqIndex","stackIdx","stackChar","sort","pairIdx","ref$1","openSeqIdx","closeSeqIdx","foundStrongType","useStrongType","si$8","i$15","lr","si$9","i$16","lr$1","si$10","si$11","si$12","niRunStart","niRunEnd","prevType$2","si2","nextType$1","si2$1","sj$8","i$17","type$1","level$3","j$1","getMirroredCharactersMap","embeddingLevels","mirror","getReorderedString","chars","concat","charIndex","join","bidi"]
}
