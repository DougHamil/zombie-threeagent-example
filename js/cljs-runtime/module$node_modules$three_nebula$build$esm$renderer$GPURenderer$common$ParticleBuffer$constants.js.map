{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$renderer$GPURenderer$common$ParticleBuffer$constants.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,+FAAA,CAAoH,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG5JC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,eAAR,CAA0BJ,OAAQK,CAAAA,qBAAlC,CAA0DL,OAAQM,CAAAA,2BAAlE,CAAgGN,OAAQO,CAAAA,2BAAxG,CAAsIP,OAAQQ,CAAAA,0BAA9I,CAA2KR,OAAQS,CAAAA,0BAAnL,CAAgNT,OAAQU,CAAAA,8BAAxN,CAAyPV,OAAQW,CAAAA,kBAAjQ,CAAsRX,OAAQY,CAAAA,cAA9R,CAA+SZ,OAAQa,CAAAA,cAAvT;AAAwUb,OAAQc,CAAAA,cAAhV,CAAiWd,OAAQe,CAAAA,kBAAzW,CAA8Xf,OAAQgB,CAAAA,eAAtY,CAAwZhB,OAAQiB,CAAAA,SAAha,CAA4ajB,OAAQkB,CAAAA,aAApb,CAAoclB,OAAQmB,CAAAA,qBAA5c,CAAoe,IAAK,EAGzenB,QAAQmB,CAAAA,qBAAR,CAD8BA,GAG9BnB,QAAQkB,CAAAA,aAAR,CADsCE,CAGtCpB,QAAQiB,CAAAA,SAAR,CADuCG,CAIvCpB,QAAQgB,CAAAA,eAAR,CAFwBA,CAIxBhB,QAAQe,CAAAA,kBAAR,CAD2BA,EAG3Bf,QAAQc,CAAAA,cAAR,CANwBE,CAQxBhB,QAAQa,CAAAA,cAAR,CADuBA,EAEjBD,OAAAA,CAAiB,CANIG,EAMJ,CATCC,CASD,CAFAH,EAEA,CACvBb,QAAQY,CAAAA,cAAR,CAAyBA,MACnBD,OAAAA,CAAqBC,MAAeS,CAAAA,MAAf,CAAsB,CAACC,GAAD,CAAMC,GAAN,CAAA,EAAcD,GAAd,CAAoBC,GAA1C,CAE3BvB,QAAQW,CAAAA,kBAAR,CAA6BA,MAE7BX,QAAQU,CAAAA,8BAAR,CAnBsCU,CAqBtCpB,QAAQS,CAAAA,0BAAR;AADmCA,CAGnCT,QAAQQ,CAAAA,0BAAR,CArBuCY,CAuBvCpB,QAAQO,CAAAA,2BAAR,CADoCA,CAGpCP,QAAQM,CAAAA,2BAAR,CADoCA,CAUpCN,QAAQK,CAAAA,qBAAR,CAR8BA,CAC5BmB,SA7BoCJ,CA4BRf,CAE5BoB,KAViChB,CAQLJ,CAI5BqB,MA9BqCN,CA0BTf,CAK5BsB,MATkCpB,CAINF,CAM5BuB,MARkCtB,CAEND,CASxBD,OAAAA,CAAkB,CArCcgB,CAqCd,CAjBWX,CAiBX,CAnCeW,CAmCf,CAbYb,CAaZ,CAXYD,CAWZ,CAAmJe,CAAAA,MAAnJ,CAA0J,CAACC,GAAD,CAAMC,GAAN,CAAA,EAAcD,GAAd,CAAoBC,GAA9K,CACxBvB,QAAQI,CAAAA,eAAR,CAA0BA,MAhDkI;",
"sources":["node_modules/three-nebula/build/esm/renderer/GPURenderer/common/ParticleBuffer/constants.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$renderer$GPURenderer$common$ParticleBuffer$constants\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PARTICLE_STRIDE = exports.ATTRIBUTE_TO_SIZE_MAP = exports.TEXID_ATTRIBUTE_BUFFER_SIZE = exports.ALPHA_ATTRIBUTE_BUFFER_SIZE = exports.RGBA_ATTRIBUTE_BUFFER_SIZE = exports.SIZE_ATTRIBUTE_BUFFER_SIZE = exports.POSITION_ATTRIBUTE_BUFFER_SIZE = exports.PARTICLE_BYTE_SIZE = exports.ALL_BYTE_SIZES = exports.RGBA_BYTE_SIZE = exports.SIZE_BYTE_SIZE = exports.POSITION_BYTE_SIZE = exports.FLOAT_BYTE_SIZE = exports.RGBA_SIZE = exports.VECTOR_3_SIZE = exports.DEFAULT_MAX_PARTICLES = void 0;\n// Primitives\nconst DEFAULT_MAX_PARTICLES = 10000;\nexports.DEFAULT_MAX_PARTICLES = DEFAULT_MAX_PARTICLES;\nconst VECTOR_3_SIZE = ['x', 'y', 'z'].length;\nexports.VECTOR_3_SIZE = VECTOR_3_SIZE;\nconst RGBA_SIZE = ['r', 'g', 'b', 'a'].length;\nexports.RGBA_SIZE = RGBA_SIZE;\nconst FLOAT_BYTE_SIZE = 4; // Byte sizes\n\nexports.FLOAT_BYTE_SIZE = FLOAT_BYTE_SIZE;\nconst POSITION_BYTE_SIZE = VECTOR_3_SIZE * FLOAT_BYTE_SIZE;\nexports.POSITION_BYTE_SIZE = POSITION_BYTE_SIZE;\nconst SIZE_BYTE_SIZE = FLOAT_BYTE_SIZE;\nexports.SIZE_BYTE_SIZE = SIZE_BYTE_SIZE;\nconst RGBA_BYTE_SIZE = RGBA_SIZE * FLOAT_BYTE_SIZE;\nexports.RGBA_BYTE_SIZE = RGBA_BYTE_SIZE;\nconst ALL_BYTE_SIZES = [POSITION_BYTE_SIZE, SIZE_BYTE_SIZE, RGBA_BYTE_SIZE];\nexports.ALL_BYTE_SIZES = ALL_BYTE_SIZES;\nconst PARTICLE_BYTE_SIZE = ALL_BYTE_SIZES.reduce((cur, acc) => cur + acc); // Attributes\n\nexports.PARTICLE_BYTE_SIZE = PARTICLE_BYTE_SIZE;\nconst POSITION_ATTRIBUTE_BUFFER_SIZE = VECTOR_3_SIZE;\nexports.POSITION_ATTRIBUTE_BUFFER_SIZE = POSITION_ATTRIBUTE_BUFFER_SIZE;\nconst SIZE_ATTRIBUTE_BUFFER_SIZE = 1;\nexports.SIZE_ATTRIBUTE_BUFFER_SIZE = SIZE_ATTRIBUTE_BUFFER_SIZE;\nconst RGBA_ATTRIBUTE_BUFFER_SIZE = RGBA_SIZE;\nexports.RGBA_ATTRIBUTE_BUFFER_SIZE = RGBA_ATTRIBUTE_BUFFER_SIZE;\nconst ALPHA_ATTRIBUTE_BUFFER_SIZE = 1;\nexports.ALPHA_ATTRIBUTE_BUFFER_SIZE = ALPHA_ATTRIBUTE_BUFFER_SIZE;\nconst TEXID_ATTRIBUTE_BUFFER_SIZE = 2;\nexports.TEXID_ATTRIBUTE_BUFFER_SIZE = TEXID_ATTRIBUTE_BUFFER_SIZE;\nconst ATTRIBUTE_TO_SIZE_MAP = {\n  position: POSITION_ATTRIBUTE_BUFFER_SIZE,\n  size: SIZE_ATTRIBUTE_BUFFER_SIZE,\n  // THREE.Color does not contain alpha, so we will have separate attributes for these\n  color: RGBA_ATTRIBUTE_BUFFER_SIZE,\n  alpha: ALPHA_ATTRIBUTE_BUFFER_SIZE,\n  texID: TEXID_ATTRIBUTE_BUFFER_SIZE\n};\nexports.ATTRIBUTE_TO_SIZE_MAP = ATTRIBUTE_TO_SIZE_MAP;\nconst PARTICLE_STRIDE = [POSITION_ATTRIBUTE_BUFFER_SIZE, SIZE_ATTRIBUTE_BUFFER_SIZE, RGBA_ATTRIBUTE_BUFFER_SIZE, ALPHA_ATTRIBUTE_BUFFER_SIZE, TEXID_ATTRIBUTE_BUFFER_SIZE].reduce((cur, acc) => cur + acc);\nexports.PARTICLE_STRIDE = PARTICLE_STRIDE;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","PARTICLE_STRIDE","ATTRIBUTE_TO_SIZE_MAP","TEXID_ATTRIBUTE_BUFFER_SIZE","ALPHA_ATTRIBUTE_BUFFER_SIZE","RGBA_ATTRIBUTE_BUFFER_SIZE","SIZE_ATTRIBUTE_BUFFER_SIZE","POSITION_ATTRIBUTE_BUFFER_SIZE","PARTICLE_BYTE_SIZE","ALL_BYTE_SIZES","RGBA_BYTE_SIZE","SIZE_BYTE_SIZE","POSITION_BYTE_SIZE","FLOAT_BYTE_SIZE","RGBA_SIZE","VECTOR_3_SIZE","DEFAULT_MAX_PARTICLES","length","reduce","cur","acc","position","size","color","alpha","texID"]
}
