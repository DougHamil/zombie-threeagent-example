{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$renderer$GPURenderer$Desktop$shaders$fragmentShader.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,8FAAA,CAAmH,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3JC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,cAAR,CAAyB,IAAK,EAyB9BJ,QAAQI,CAAAA,cAAR,CAvBuB,EAAAA,EACd,qeATkJ;",
"sources":["node_modules/three-nebula/build/esm/renderer/GPURenderer/Desktop/shaders/fragmentShader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$renderer$GPURenderer$Desktop$shaders$fragmentShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fragmentShader = void 0;\n\nconst fragmentShader = () => {\n  return `\n    uniform vec3 baseColor;\n    uniform sampler2D uTexture;\n    uniform sampler2D atlasIndex;\n\n    varying vec3 targetColor;\n    varying float targetAlpha;\n    varying vec4 tileRect;\n    varying float tileID;\n\n    void main() {\n      gl_FragColor = vec4(baseColor * targetColor, targetAlpha);\n\n      vec2 uv = gl_PointCoord;\n      uv = mix(tileRect.xy, tileRect.zw, gl_PointCoord);\n\n      gl_FragColor = gl_FragColor * texture2D(uTexture, uv);\n\n    }\n`;\n};\n\nexports.fragmentShader = fragmentShader;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","fragmentShader"]
}
