{"version":3,"sources":["zombie/scene/system/animation.cljs"],"mappings":";;AAOA,oDAAA,kFAAAA,tIAAOI,gHAAgBC,YAAYC;AAAnC,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;gBAAA,AAAAE,4CAAAF,eAAA,vEAAqDM;kBAArD,AAAAJ,4CAAAF,eAAA,zEAA+DO;YAA/D,AAAAL,4CAAAF,eAAA,nEAAqEQ;aAArE,AAAAN,4CAAAF,eAAA,pEAA2ES;iCAA3E,AAAAP,4CAAAF,eAAA,xFACqDU;iBADrD,AAAAR,4CAAAF,eAAA,xEAEqDW;AAFrD,AAGE,IAAME,OAAK,kBAAIN,aACFO,wDACAC;IAFbH,aAGsB,+CAAA,AAAAK,6BAAA,5EAACC,+DAAQd,gGAAaC;IAH5CO,iBAAA,AAAAX,4BAAAW;YAAA,AAAAV,4CAAAU,eAAA,nEAGcI;IACRG,OAAK,AAACC,gBAAM,4CAAA,AAAAH,5CAACf,4DAAKmB,+BAAUf;IAC5BgB,aAAW,+CAAA,AAAAL,6BAAA,6FAAA,zKAAwBC,+DAAQd,gGAAaC,mEAAkBG;IAC1Ee,cAAY,8BAAA,sPAAA,lQAA6BZ,YACJ,+CAAA,AAAAM,6BAAA,6FAAA,zKAACC,+DAAQd,gGAAaC,mEAAkBM;IAC7Ea,SAAO,AAAoCR,iBAAMG;AARvD,AASE,oBAAM,iBAAAM,oBAAKH;AAAL,AAAA,oBAAAG;AACK,OAACC,gDAAKJ,WAAWE;;AADtBC;;;AAAN,AAEE,AAAOH;;AAFT;;AAGA,kFAAA,6FAAA,/KAACK,mDAAMvB,YAAYwB,sGAAUvB,mEAAkBG,cAAOgB;;AACtD,CAAM,AAAqBA,2BAAQ,iBAAAK,mBAAInB;AAAJ,AAAA,oBAAAmB;AAAAA;;AAAA;;;;AACnC,AAAUL,eAAOX;;AACjB,GAAI,AAACiB,6CAAEf,sDAAeF;AACpB,AAAQW;;AACR,GAAM,AAACO,cAAI,AAAYP;AAAvB,AACE,AAAQA;;AADV;;;AAEF,oBAAMf;AAAN,AACE,CAAM,AAAUe,gBAAQf;;AAD1B;;AAEA,oBAAMc;AAAN,AACE,AAAWC,gBAAOD;;AADpB;;AAEA,OAAOC;;AAEX,qDAAA,mFAAAQ,xIAAOE,kHAAiB9B,YAAYC;AAApC,AAAA,IAAA4B,aAAAD;IAAAC,iBAAA,AAAAhC,4BAAAgC;gBAAA,AAAA/B,4CAAA+B,eAAA,vEAAsD3B;AAAtD,AACE,IAAMa,OAAK,AAACC,gBAAM,4CAAA,AAAAH,5CAACf,4DAAKmB,+BAAUf;IAC5BU,QAAM,+CAAA,AAAAC,6BAAA,6FAAA,zKAACC,+DAAQd,gGAAaC;IAC5BmB,SAAO,AAAoCR,iBAAMG;AAFvD,AAGE,oBAAM,iBAAAM,oBAAKD;AAAL,AAAA,oBAAAC;AAAY,OAAYD;;AAAxBC;;;AAAN,AACE,OAAOD;;AADT;;;AAGJ,yDAAA,zDAAOW,0HAAqB/B,YAAYC,UAAU+B;AAAlD,AACE,IAAMpB,QAAM,+CAAA,AAAAC,6BAAA,6FAAA,zKAACC,+DAAQd,gGAAaC;AAAlC,AACE,OAAgBW;;AAEpB,kDAAA,8DAAAqB,hHAAOG,4GAA8BC;AAArC,AAAA,IAAAH,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DACsBI;QADtB,AAAAH,4CAAAD,WAAA,IAAA,/DACwBK;QADxB,AAAAJ,4CAAAD,WAAA,IAAA,/DAC0BM;AAD1B,AAEE,oBAAM,iBAAAnB,oBAAKiB;AAAL,AAAA,oBAAAjB;AAAOmB;;AAAPnB;;;AAAN,AACE,OAASgB,WAAIC,EAAEC,EAAEC;;AADnB;;;AAIF,kDAAA,gFAAAC,lIAAOE,4GAAcC,WACAC;AADrB,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAA7C,4BAAA6C;YAAA,AAAA5C,4CAAA4C,eAAA,nEAE6B9B;2BAF7B,AAAAd,4CAAA4C,eAAA,lFAG6BI;2BAH7B,AAAAhD,4CAAA4C,eAAA,lFAI6BK;iBAJ7B,AAAAjD,4CAAA4C,eAAA,xEAK6BM;iBAL7B,AAAAlD,4CAAA4C,eAAA,xEAM6BO;AAN7B,AAOE,AAASrC,aAAMgC;;AACf,oBAAME;AAAN,AACE,AAACV,gDAAaY,WAAWF;;AAD3B;;AAEA,oBAAMC;AAAN,AACE,OAACX,gDAAaa,WAAWF;;AAD3B;;;AAGF,wDAAA,xDAAOG,wHAAoBlD,YAAYmD,UAAUlD;AAAjD,AACE,6CAAA,8GAAA,WAAAmD,tKAACC,yBAAWF,UAAUlD;AAAtB,AACa,yFAAA,6FAAA,4FAAAmD,3QAAC7B,mDAAMvB,YAAYwB,sGAAUvB;;;AAC1C,6CAAA,8GAAA,WAAAqD,tKAACD,yBAAWF,UAAUlD;AAAtB,AACa,yFAAA,6FAAA,6FAAAqD,5QAAC/B,mDAAMvB,YAAYwB,sGAAUvB;;;AAC1C,6CAAA,7CAACoD,yBAAWF,UAAUlD,yFAA8B,AAACsD,gDAAQxB,uDAAoB/B,YAAYC;;AAC7F,6CAAA,7CAACoD,yBAAWF,UAAUlD,gFAA0B,AAACsD,gDAAQzB,mDAAgB9B,YAAYC;;AACrF,oDAAA,7CAACoD,yBAAWF,UAAUlD,+EAA0B,AAACsD,gDAAQxD,kDAAeC,YAAYC;;AAEtF,AAAA;;;;;;;;;AAAA,AAAA,CAAA,AAAA,qFAAAuD,rFAASS;;AAAT,CAAA,AAAA,iGAAA,aAAAR,9GAASQ,4GAEAE;;AAFT,AAAA,IAAAT,aAAAD;IAAAC,iBAAA,AAAA7D,4BAAA6D;AAAA,AAAA,YAAA,RAESS;AAFT,AAAA;;;AAAA,CAAA,AAAA,oGAAA,pGAASF,+GAGGE,EAAEA;;AAHd,AAAA,YAAA,RAGYA;AAHZ,AAAA;;;AAAA,CAAA,AAAA,4GAAA,2BAAAR,vIAASM,uHAIWE,EAAEA,MAAEC,IAAoB/B;;AAJ5C,AAAA,IAAAuB,aAAAD;IAAAC,iBAAA,AAAA/D,4BAAA+D;UAAAA,NAIkES;WAJlE,AAAAvE,4CAAA8D,eAAA,lEAIwD7C;AAJxD,AAAA,YAAA,RAIoBoD;AAJpB,AAKI,IAAMG,QAAM,cAAA,bAAM,AAAYjC;IACxBzB,QAAM,KAAA2D,4DAA2BD;IACjCrB,aAAW,sCAAA,mFAAA,OAAA,WAAA,OAAA,lJAACuB,kCAAcnC;AAFhC,AAGE,0FAAA,2CAAA,6DAAA,6DAAA,4EAAA,3UAACd,mDAAMvB,mBAAYyE,gBAAML,sGAAYxD,+DACCyB,qEACIY,4EACAZ;;AAC1C,AAACa,sDAAmBlD,mBAAYmD,iBAAUiB;;AAC1C,oBAAMrD;AAAN,AACE,OAAChB,kDAAeC,mBAAYoE,IAAI,kDAAA,lDAACM,8CAAML,oEACWtD;;AAFpD;;;;AAbN,CAAA,AAAA,8GAAA,9GAASkD,yHAgBaE,EAAEA,MAAEC,IAAIO,KAAKC;;AAhBnC,AAAA,YAAA,RAgBsBT;AAhBtB,AAiBI,OAAC5C,mDAAMvB,mBAAY6E,iBAAOT;;;AAjB9B,CAAA,AAAA,iGAAA,jGAASH,4GAkBAE,EAAEvB;;AAlBX,AAAA,YAAA,RAkBSuB;AAlBT,AAmBI,IAAAW,aAAA,AAAAC,cAAA,AAAAlE,gBAA0Bb;IAA1BgF,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;gBAAA,AAAA/C,4CAAAgD,WAAA,IAAA,vEAASlF;WAAT,AAAAkC,4CAAAgD,WAAA,IAAA,lEAAmBS;AAAnB,AAAA,AACE,AAACjD,gDAAaC,WAAW3C,UAAU2F;;AADrC;AAAA,eAAAd;eAAAE;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAE,qBAAA,AAAAL,cAAAD;AAAA,AAAA,GAAAM;AAAA,AAAA,IAAAN,iBAAAM;AAAA,AAAA,GAAA,AAAAC,6BAAAP;AAAA,IAAAQ,kBAAA,AAAAC,sBAAAT;AAAA,AAAA,eAAA,AAAAU,qBAAAV;eAAAQ;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAI,aAAA,AAAA1E,gBAAA8D;gBAAA,AAAA3C,4CAAAuD,WAAA,IAAA,vEAASzF;WAAT,AAAAkC,4CAAAuD,WAAA,IAAA,lEAAmBE;AAAnB,AAAA,AACE,AAACjD,gDAAaC,WAAW3C,UAAU2F;;AADrC;AAAA,eAAA,AAAAD,eAAAb;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;;AAnBJ,CAAA,yDAAA,zDAASb;AAAT,AAAA,AAAA;;;AAAA,CAAA,+DAAA,/DAASA;;AAAT,CAAA,kEAAA,lEAASA;;AAAT,CAAA,uEAAA,WAAAJ,mBAAAC,qBAAAC,1HAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;qDAAA,rDAASI,kHAAiBf,UAAUnD;AAApC,AAAA,YAAAiE,8CAA0Bd,UAAUnD;;;AAA3BiE,AAsBT,uCAAA,vCAAM4B,sFAAQ1C;AAAd,AACE,OAACe,mDAAkBf,UAAU,6CAAA,7CAAC2C","names":["p__12919","map__12920","cljs.core/--destructure-map","cljs.core.get","zombie.scene.system.animation/set-animation!","local-state","entity-id","animation","loop?","layer","weight","clamp-when-finished?","sync-layer","map__12923","loop","js/module$node_modules$three$build$three_module.LoopRepeat","js/module$node_modules$three$build$three_module.LoopOnce","mixer","cljs.core/deref","cljs.core.get_in","clip","cljs.core/first","zombie.state.databases/assets","old-action","sync-action","action","and__4210__auto__","cljs.core.not_EQ_","cljs.core.swap_BANG_","cljs.core/assoc-in","or__4212__auto__","cljs.core._EQ_","cljs.core/not","p__12927","map__12928","zombie.scene.system.animation/stop-animation!","zombie.scene.system.animation/stop-all-animation!","_cfg","p__12929","vec__12930","cljs.core.nth","zombie.scene.system.animation/set-look-at!","obj","x","y","z","p__12933","map__12934","zombie.scene.system.animation/tick-entity!","delta-time","_entity-id","lower-look-at-target","upper-look-at-target","lower-bone","upper-bone","zombie.scene.system.animation/register-handlers!","event-bus","p1__12938#","zombie.util.messaging/on","p1__12939#","cljs.core.partial","cljs.core/PROTOCOL_SENTINEL","p__12940","map__12941","p__12944","map__12945","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","zombie.scene.system.animation/AnimationSystem","zombie.scene.system.animation/->AnimationSystem","_","key","cfg","model","js/module$node_modules$three$build$three_module.AnimationMixer","zombie.util.threejs/get-in-object","cljs.core/assoc","cljs.core.assoc","_obj","_config","cljs.core/dissoc","seq__12950","cljs.core/seq","chunk__12951","count__12952","i__12953","vec__12960","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__12963","cljs.core/next","data","zombie.scene.system.animation/create","cljs.core.atom"],"sourcesContent":["(ns zombie.scene.system.animation\r\n  (:require [threeagent.system :refer [ISystem]]\r\n            [\"three\" :as three]\r\n            [zombie.util.messaging :as message]\r\n            [zombie.util.threejs :refer [get-in-object]]\r\n            [zombie.state.databases :as db]))\r\n\r\n(defn- set-animation! [local-state entity-id {:keys [animation loop? layer weight\r\n                                                     clamp-when-finished?\r\n                                                     sync-layer]}]\r\n  (let [loop (if loop?\r\n               three/LoopRepeat\r\n               three/LoopOnce)\r\n        {:keys [mixer]} (get-in @local-state [entity-id])\r\n        clip (first (get @db/assets animation))\r\n        old-action ^three/AnimationAction (get-in @local-state [entity-id :layers layer])\r\n        sync-action ^three/AnimationAction (when sync-layer\r\n                                             (get-in @local-state [entity-id :layers sync-layer]))\r\n        action ^three/AnimationAction (.clipAction mixer clip)]\r\n    (when (and old-action\r\n               (not= old-action action))\r\n      (.stop old-action))\r\n    (swap! local-state assoc-in [entity-id :layers layer] action)\r\n    (set! (.-clampWhenFinished action) (or clamp-when-finished? false))\r\n    (.setLoop action loop)\r\n    (if (= three/LoopOnce loop)\r\n      (.reset action)\r\n      (when (not (.isRunning action))\r\n        (.reset action)))\r\n    (when weight\r\n      (set! (.-weight action) weight))\r\n    (when sync-action\r\n      (.syncWith action sync-action))\r\n    (.play action)))\r\n\r\n(defn- stop-animation! [local-state entity-id {:keys [animation]}]\r\n  (let [clip (first (get @db/assets animation))\r\n        mixer (get-in @local-state [entity-id :mixer])\r\n        action ^three/AnimationAction (.clipAction mixer clip)]\r\n    (when (and action (.isRunning action))\r\n      (.stop action))))\r\n\r\n(defn- stop-all-animation! [local-state entity-id _cfg]\r\n  (let [mixer (get-in @local-state [entity-id :mixer])]\r\n    (.stopAllAction mixer)))\r\n\r\n(defn- set-look-at! [^three/Object3D obj\r\n                     [x y z]]\r\n  (when (and x z)\r\n    (.lookAt obj x y z)))\r\n\r\n\r\n(defn- tick-entity! [delta-time\r\n                     _entity-id\r\n                     {:keys [mixer\r\n                             lower-look-at-target\r\n                             upper-look-at-target\r\n                             lower-bone\r\n                             upper-bone]}]\r\n  (.update mixer delta-time)\r\n  (when lower-look-at-target\r\n    (set-look-at! lower-bone lower-look-at-target))\r\n  (when upper-look-at-target\r\n    (set-look-at! upper-bone upper-look-at-target)))\r\n\r\n(defn- register-handlers! [local-state event-bus entity-id]\r\n  (message/on event-bus entity-id :animation/set-upper-look-at-target\r\n              #(swap! local-state assoc-in [entity-id :upper-look-at-target] %))\r\n  (message/on event-bus entity-id :animation/set-lower-look-at-target\r\n              #(swap! local-state assoc-in [entity-id :lower-look-at-target] %))\r\n  (message/on event-bus entity-id :animation/stop-all (partial stop-all-animation! local-state entity-id))\r\n  (message/on event-bus entity-id :animation/stop (partial stop-animation! local-state entity-id))\r\n  (message/on event-bus entity-id :animation/play (partial set-animation! local-state entity-id)))\r\n\r\n(deftype AnimationSystem [event-bus local-state]\r\n  ISystem\r\n  (init [_ {:keys []}])\r\n  (destroy [_ _])\r\n  (on-entity-added [_ _ key ^three/Object3D obj {:keys [clip] :as cfg}]\r\n    (let [model (aget (.-children obj) 0)\r\n          mixer ^js (three/AnimationMixer. model)\r\n          upper-bone (get-in-object obj [\"Root\" \"HipsCtrl\" \"Hips\" \"Spine\"])]\r\n      (swap! local-state assoc key {:mixer mixer\r\n                                    :object obj\r\n                                    :upper-bone upper-bone\r\n                                    :lower-bone obj})\r\n      (register-handlers! local-state event-bus key)\r\n      (when clip\r\n        (set-animation! local-state key (assoc cfg\r\n                                               :animation clip)))))\r\n  (on-entity-removed [_ _ key _obj _config]\r\n    (swap! local-state dissoc key))\r\n  (tick [_ delta-time]\r\n    (doseq [[entity-id data] @local-state]\r\n      (tick-entity! delta-time entity-id data))))\r\n\r\n(defn create [event-bus]\r\n  (->AnimationSystem event-bus (atom {})))\r\n"]}