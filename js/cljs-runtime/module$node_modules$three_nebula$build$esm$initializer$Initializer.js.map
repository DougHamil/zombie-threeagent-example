{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$initializer$Initializer.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,kEAAA,CAAuF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG/HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAAkB,IAAK,EAEvB,KAAIC,OAASP,OAAA,CAAQ,8DAAR,CAOb,MAAMQ,YAAN,CAQEC,WAAW,CAACC,IAAA,CAAOH,MAAOI,CAAAA,yBAAf,CAA0CC,SAAA,CAAY,CAAA,CAAtD,CAA4D,CACrE,IAAKF,CAAAA,IAAL,CAAYA,IACZ,KAAKE,CAAAA,SAAL,CAAiBA,SAFoD,CAcvEC,IAAI,CAACC,OAAD,CAAUC,QAAV,CAAoB,CACjB,IAAKH,CAAAA,SAAV,GAIIG,QAAJ,EACE,IAAKC,CAAAA,UAAL,CAAgBD,QAAhB,CACA,CAAAA,QAASE,CAAAA,kBAAT;AAA8B,CAAA,CAFhC,GAIE,IAAKD,CAAAA,UAAL,CAAgBF,OAAhB,CACA,CAAAA,OAAQG,CAAAA,kBAAR,CAA6B,CAAA,CAL/B,CAJA,CADsB,CAkBxBC,KAAK,EAAG,EASRF,UAAU,CAACG,MAAD,CAAS,EAWZC,uBAAgB,EAAG,CACxB,MAAO,CAAA,CADiB,CAYnBC,eAAQ,CAACC,IAAD,CAAO,EAxExB,CA6EApB,OAAQI,CAAAA,OAAR,CAAkBE,WA5F6G;",
"sources":["node_modules/three-nebula/build/esm/initializer/Initializer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$initializer$Initializer\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _types = require(\"./types\");\n\n/**\n * The base Emitter / Particle property class.\n *\n * @abstract\n */\nclass Initializer {\n  /**\n   * Constructs an Initializer instance.\n   *\n   * @param {string} [type=INITIALIZER_TYPE_ABSTRACT] - The intiializer type\n   * @param {boolean} [isEnabled=true] - Determines if the initializer should be enabled or not\n    * @return void\n   */\n  constructor(type = _types.INITIALIZER_TYPE_ABSTRACT, isEnabled = true) {\n    this.type = type;\n    this.isEnabled = isEnabled;\n  }\n  /**\n   * Initializes the property on the emitter or particle.\n   *\n   * @see {@link '../emitter/emitter.js'} setupParticle\n   * @param {Emitter} emitter - the emitter to initialize the property on\n   * @param {Particle} particle - the particle to intiialize the property on\n   * @return void\n   */\n\n\n  init(emitter, particle) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    if (particle) {\n      this.initialize(particle);\n      particle.hasBeenInitialized = true;\n    } else {\n      this.initialize(emitter);\n      emitter.hasBeenInitialized = true;\n    }\n  }\n  /**\n   * @abstract\n   */\n\n\n  reset() {}\n  /**\n   * Place custom property initialization code in this method in the subclass.\n   *\n   * @param {object} target - either an Emitter or a Particle\n   * @abstract\n   */\n\n\n  initialize(target) {} // eslint-disable-line\n\n  /**\n   * Determines if the initializer requires a Web GL API to be provided to its constructor.\n   * If true, the WebGL API will need to be provided as the first argument to the constructor\n   * and fromJSON methods.\n   *\n   * @return {boolean}\n   */\n\n\n  static requiresWebGlApi() {\n    return false;\n  }\n  /**\n   * Returns a new instance of the initializer from the JSON object passed.\n   *\n   * @abstract\n   * @param {object} json - JSON object containing the required constructor properties\n   * @return {Behaviour}\n   */\n\n\n  static fromJSON(json) {} // eslint-disable-line\n\n\n}\n\nexports.default = Initializer;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","_types","Initializer","constructor","type","INITIALIZER_TYPE_ABSTRACT","isEnabled","init","emitter","particle","initialize","hasBeenInitialized","reset","target","requiresWebGlApi","fromJSON","json"]
}
