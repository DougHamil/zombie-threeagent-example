{"version":3,"sources":["reagent/impl/batching.cljs"],"mappings":"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","names":["js/reagent","js/reagent.impl","js/reagent.impl.batching","js/reagent.impl.batching.mount-count","reagent.impl.batching/mount-count","reagent.impl.batching/next-mount-count","reagent.impl.batching/fake-raf","f","js/setTimeout","reagent.impl.batching/next-tick","reagent.impl.util/is-client","w","js/window","or__4212__auto__","reagent.impl.batching/compare-mount-order","c1","c2","reagent.impl.batching/run-queue","a","n__4695__auto__","i","c","js/reagent.impl.batching.ratom-flush","reagent.impl.batching/ratom-flush","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","reagent.impl.batching/RenderQueue","reagent.impl.batching/->RenderQueue","scheduled?","this","k","js/Error","temp__5757__auto__","fs","fexpr__8597","G__8599","cs","js/reagent.impl.batching.render-queue","reagent.impl.batching/render-queue","reagent.impl.batching/flush","reagent.impl.batching/flush-after-render","reagent.impl.batching/queue-render","reagent.impl.batching/mark-rendered","reagent.impl.batching/do-before-flush","reagent.impl.batching/do-after-render","reagent.impl.batching/schedule"],"sourcesContent":["(ns reagent.impl.batching\n  (:refer-clojure :exclude [flush])\n  (:require [reagent.debug :refer-macros [dbg assert-some]]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.impl.util :refer [is-client]]\n            [clojure.string :as string]))\n\n;;; Update batching\n\n(defonce mount-count 0)\n\n(defn next-mount-count []\n  (set! mount-count (inc mount-count)))\n\n(defn fake-raf [f]\n  (js/setTimeout f 16))\n\n(def next-tick\n  (if-not is-client\n    fake-raf\n    (let [w js/window]\n      (or ($ w :requestAnimationFrame)\n          ($ w :webkitRequestAnimationFrame)\n          ($ w :mozRequestAnimationFrame)\n          ($ w :msRequestAnimationFrame)\n          fake-raf))))\n\n(defn compare-mount-order [c1 c2]\n  (- ($ c1 :cljsMountOrder)\n     ($ c2 :cljsMountOrder)))\n\n(defn run-queue [a]\n  ;; sort components by mount order, to make sure parents\n  ;; are rendered before children\n  (.sort a compare-mount-order)\n  (dotimes [i (alength a)]\n    (let [c (aget a i)]\n      (when (true? ($ c :cljsIsDirty))\n        ($ c forceUpdate)))))\n\n\n;; Set from ratom.cljs\n(defonce ratom-flush (fn []))\n\n(deftype RenderQueue [^:mutable ^boolean scheduled?]\n  Object\n  (enqueue [this k f]\n    (assert-some f \"Enqueued function\")\n    (when (nil? (aget this k))\n      (aset this k (array)))\n    (.push (aget this k) f)\n    (.schedule this))\n\n  (run-funs [this k]\n    (when-some [fs (aget this k)]\n      (aset this k nil)\n      (dotimes [i (alength fs)]\n        ((aget fs i)))))\n\n  (schedule [this]\n    (when-not scheduled?\n      (set! scheduled? true)\n      (next-tick #(.run-queues this))))\n\n  (queue-render [this c]\n    (.enqueue this \"componentQueue\" c))\n\n  (add-before-flush [this f]\n    (.enqueue this \"beforeFlush\" f))\n\n  (add-after-render [this f]\n    (.enqueue this \"afterRender\" f))\n\n  (run-queues [this]\n    (set! scheduled? false)\n    (.flush-queues this))\n\n  (flush-after-render [this]\n    (.run-funs this \"afterRender\"))\n\n  (flush-queues [this]\n    (.run-funs this \"beforeFlush\")\n    (ratom-flush)\n    (when-some [cs (aget this \"componentQueue\")]\n      (aset this \"componentQueue\" nil)\n      (run-queue cs))\n    (.flush-after-render this)))\n\n(defonce render-queue (->RenderQueue false))\n\n(defn flush []\n  (.flush-queues render-queue))\n\n(defn flush-after-render []\n  (.flush-after-render render-queue))\n\n(defn queue-render [c]\n  (when-not ($ c :cljsIsDirty)\n    ($! c :cljsIsDirty true)\n    (.queue-render render-queue c)))\n\n(defn mark-rendered [c]\n  ($! c :cljsIsDirty false))\n\n(defn do-before-flush [f]\n  (.add-before-flush render-queue f))\n\n(defn do-after-render [f]\n  (.add-after-render render-queue f))\n\n(defn schedule []\n  (when (false? (.-scheduled? render-queue))\n    (.schedule render-queue)))\n"]}