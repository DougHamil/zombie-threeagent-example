{"version":3,"sources":["zombie/util/threejs.cljs"],"mappings":";;AAGA,AAAeA,yBAAG,KAAAC;AAClB,AAAeC,yBAAG,KAAAD;AAClB,AAAeE,yBAAG,KAAAC;AAElB,wCAAA,gDAAAC,xFAAMG;AAAN,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAuBG;QAAvB,AAAAF,4CAAAD,WAAA,IAAA,/DAAyBI;QAAzB,AAAAH,4CAAAD,WAAA,IAAA,/DAA2BK;AAA3B,AACE,YAAAV,qDAAgBQ,EAAEC,EAAEC;;AAEtB,sCAAA,tCAAMC,oFAA6BC;AAAnC,AAAA,kDAAA,qDAAA,sDAAA,5DACM,AAAKA,sDACL,AAAKA,qDACL,AAAKA;;AAEX,wCAAA,xCAAMC,wFAA+BD;AAArC,AAAA,0FACG,AAAKA,MAAK,AAAKA,MAAK,AAAKA;;AAE5B,6CAAA,qDAAAE,lGAAME,2GAA4CJ;AAAlD,AAAA,IAAAG,aAAAD;QAAA,AAAAR,4CAAAS,WAAA,IAAA,/DAA4BP;QAA5B,AAAAF,4CAAAS,WAAA,IAAA,/DAA8BN;QAA9B,AAAAH,4CAAAS,WAAA,IAAA,/DAAgCL;AAAhC,AACE,OAAME,QAAIJ,EAAEC,EAAEC;;AAEhB,oCAAA,pCAAMO,gFAA+BC,OAAOC;;AAA5C,AACE,GAAI,AAACC,cAAID;AACP,IAAME,OAAK,AAACC,gBAAMH;AAAlB,AACE,GAAI,OAASE;AACX,eAAO,AAAkBH,uBAAOG;eAAM,AAACE,eAAKJ;;;;;AAC5C,GAAI,6CAAA,7CAACK,+FAAMH;AACT,eAAO,AAAUH;eAAQ,AAACK,eAAKJ;;;;;AAC/B,eAAO,CAAM,AAAYD,gBAAQG;eAAM,AAACE,eAAKJ;;;;;;;AACnDD;;;;;AAEJ,6CAAA,7CAAMO,kGAA+BC;AAArC,AACE,IAAMC,KAAG,AAAO5B,4BAAG,AAAO2B;IACpBC,SAAG,AAAMA,OAAG,AAAOD;IACnBC,SAAG,sBAAA,tBAAiBA;AAF1B,AAGE,AAAYD,cAAIC;;AAChB,OAAYD,cAAIC;;AAEpB,sCAAA,tCAAMC,oFAA2BC;AAAjC,AAAA,0FACG,AAAKA,IAAG,AAAKA,IAAG,AAAKA;;AAExB,yDAAA,zDAAMC,0HAAiCC;AAAvC,AACE,IAAMC,MAAI,AAAChB,2CAAoBe,UAAUhC;IACnCkC,cAAgBhC,AACA,2BAAA,IAAA,IAAA,nCACA,mDAAa+B,IAAI,AAAY9B;AAHnD,AAIE,AAASA,8BAAG+B;;AACZ,OAACL,oCAAa,AAAY1B;;AAE9B,yCAAA,zCAAMgC,0FAAoCC,IAAiBC;AAA3D,AACE,IAAMJ,MAAI,AAAoBG,sBAAIpC;IAC5BkC,cAAgBhC,AACA,2BAAA,IAAA,IAAA,nCACA,mDAAa+B,IAAI,AAAY9B;AAHnD,AAIE,AAASA,8BAAG+B;;AACZ,OAAOG,SAAI,AAAYlC;;AAE3B,8CAAA,9CAAMmC,oGAAyCF;AAA/C,AACE,IAAMG,MAAI,AAAmBH,qBAAIpC;AAAjC,AACE,OAACc,sCAAeyB;;AAEpB,uCAAA,vCAAMC,sFAAkCC,EAAkBC;AAA1D,AACE,IAAMC,QAAM,AAAmBF,mBAAEzC;IAC3B4C,QAAM,AAAmBF,mBAAExC;AADjC,AAEE,OAAS,AAAM0C,UAAMD","names":["zombie.util.threejs/v1","js/module$node_modules$three$build$three_module.Vector3","zombie.util.threejs/v2","zombie.util.threejs/o1","js/module$node_modules$three$build$three_module.Object3D","p__10483","vec__10484","cljs.core.nth","zombie.util.threejs/tuple->vector3","x","y","z","zombie.util.threejs/vector3->map","vec","zombie.util.threejs/vector3->tuple","p__10487","vec__10488","zombie.util.threejs/tuple->into-vector3","zombie.util.threejs/get-in-object","parent","path","cljs.core/seq","next","cljs.core/first","cljs.core/rest","cljs.core._EQ_","zombie.util.threejs/center-at-origin!","box","v1","zombie.util.threejs/euler->tuple","e","zombie.util.threejs/direction-tuple->rotation-tuple","dir-tuple","dir","look-at-pos","zombie.util.threejs/get-world-rotation","obj","eul","zombie.util.threejs/world-position-as-tuple","pos","zombie.util.threejs/distance-between","a","b","pos-a","pos-b"],"sourcesContent":["(ns zombie.util.threejs\r\n  (:require [\"three\" :as three]))\r\n\r\n(def ^:private v1 (three/Vector3.))\r\n(def ^:private v2 (three/Vector3.))\r\n(def ^:private o1 (three/Object3D.))\r\n\r\n(defn tuple->vector3 [[x y z]]\r\n  (three/Vector3. x y z))\r\n\r\n(defn vector3->map [^three/Vector3 vec]\r\n  {:x (.-x vec)\r\n   :y (.-y vec)\r\n   :z (.-z vec)})\r\n\r\n(defn vector3->tuple [^three/Vector3 vec]\r\n  [(.-x vec) (.-y vec) (.-z vec)])\r\n\r\n(defn tuple->into-vector3 [[x y z] ^three/Vector3 vec]\r\n  (.set vec x y z))\r\n\r\n(defn get-in-object [^three/Object3D parent path]\r\n  (if (seq path)\r\n    (let [next (first path)]\r\n      (if (string? next)\r\n        (recur (.getObjectByName parent next) (rest path))\r\n        (if (= :.. next)\r\n          (recur (.-parent parent) (rest path))\r\n          (recur (aget (.-children parent) next) (rest path)))))\r\n    parent))\r\n\r\n(defn center-at-origin! [^three/Box3 box]\r\n  (let [v1 (.copy v1 (.-min box))\r\n        v1 (.add v1 (.-max box))\r\n        v1 (.multiplyScalar v1 -0.5)]\r\n    (.translate box v1)\r\n    (.getCenter box v1)))\r\n\r\n(defn euler->tuple [^three/Euler e]\r\n  [(.-x e) (.-y e) (.-z e)])\r\n\r\n(defn direction-tuple->rotation-tuple [dir-tuple]\r\n  (let [dir (tuple->into-vector3 dir-tuple v1)\r\n        look-at-pos (-> v2\r\n                        (.set 0 0 0)\r\n                        (.addVectors dir (.-position o1)))]\r\n    (.lookAt o1 look-at-pos)\r\n    (euler->tuple (.-rotation o1))))\r\n        \r\n(defn get-world-rotation [^three/Object3D obj ^three/Euler eul]\r\n  (let [dir (.getWorldDirection obj v1)\r\n        look-at-pos (-> v2\r\n                        (.set 0 0 0)\r\n                        (.addVectors dir (.-position o1)))]\r\n    (.lookAt o1 look-at-pos)\r\n    (.copy eul (.-rotation o1))))\r\n\r\n(defn world-position-as-tuple [^three/Object3D obj]\r\n  (let [pos (.getWorldPosition obj v1)]\r\n    (vector3->tuple pos)))\r\n    \r\n(defn distance-between [^three/Object3D a ^three/Object3D b]\r\n  (let [pos-a (.getWorldPosition a v1)\r\n        pos-b (.getWorldPosition b v2)]\r\n    (.length (.sub pos-b pos-a))))\r\n        \r\n"]}