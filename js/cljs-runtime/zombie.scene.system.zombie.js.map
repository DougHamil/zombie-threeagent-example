{"version":3,"sources":["zombie/scene/system/zombie.cljs"],"mappings":"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","names":["zombie.scene.system.zombie/v1","js/module$node_modules$three$build$three_module.Vector3","zombie.scene.system.zombie/v2","zombie.scene.system.zombie/move-towards!","bus","entity-id","move-speed","obj","target-obj","target-pos","heading","zombie.util.messaging/send","zombie.util.threejs/vector3->tuple","p__13309","map__13310","cljs.core/--destructure-map","cljs.core.get","zombie.scene.system.zombie/in-range?","object","attacker-obj","_","zombie.util.threejs/distance-between","p__13311","map__13312","zombie.scene.system.zombie/-entry-idle","p__13313","map__13314","zombie.scene.system.zombie/-entry-chasing","p__13315","map__13316","zombie.scene.system.zombie/-entry-attacking-pre-hit","p__13317","map__13318","zombie.scene.system.zombie/-entry-dying","zombie.util.threejs/world-position-as-tuple","p__13319","map__13320","zombie.scene.system.zombie/-entry-attacking-hit","attacker-id","ctx","p__13321","map__13322","zombie.scene.system.zombie/-entry-dead","entity-db","cljs.core.swap_BANG_","cljs.core/dissoc","p__13323","map__13324","zombie.scene.system.zombie/-action-idle-to-chasing","cljs.core.assoc","js/zombie","js/zombie.scene","js/zombie.scene.system","js/zombie.scene.system.zombie","js/zombie.scene.system.zombie.tick-ai-zombie","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","fexpr__13325","cljs.core/MultiFn","cljs.core.symbol","zombie.scene.system.zombie/tick-ai-zombie","state","_context","js/zombie.scene.system.zombie.tick-zombie","fexpr__13326","zombie.scene.system.zombie/tick-zombie","p__13327","map__13328","zombie.scene.system.zombie/zombie-fsm","G__13329","statecharts.core/machine","zombie.scene.system.zombie/on-damaged","local-state","payload","map__13330","damage","attack-direction","hit-position","cljs.core/deref","zombie.state.databases/entity-objects","fsm","cljs.core.get_in","statecharts.core.update_state","cljs.core/assoc","statecharts.core.send","cljs.core/assoc-in","zombie.scene.system.zombie/on-killed","_bus","zombie.scene.system.zombie/tick-ai","statecharts.core/value","statecharts.core/state","zombie.scene.system.zombie/register-listeners!","zombie.util.messaging/on","cljs.core.partial","cljs.core/PROTOCOL_SENTINEL","p__13331","p__13332","map__13333","map__13334","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","zombie.scene.system.zombie/ZombieSystem","zombie.scene.system.zombie/->ZombieSystem","id","context","fsm-service","G__13335","statecharts.core/service","statecharts.core/start","zombie.util.timer/jitter-ticker","_obj","_cfg","delta-time","seq__13336","cljs.core/seq","chunk__13337","count__13338","i__13339","vec__13348","cljs.core.nth","map__13351","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__13352","cljs.core/first","map__13355","cljs.core/next","ai-ticker","zombie.util.timer/maybe-tick","zombie.scene.system.zombie/create","event-bus"],"sourcesContent":["(ns zombie.scene.system.zombie\r\n  (:require [threeagent.system :refer [ISystem]]\r\n            [\"three\" :as three]\r\n            [statecharts.core :as fsm]\r\n            [zombie.util.messaging :as message]\r\n            [zombie.util.threejs :refer [vector3->tuple\r\n                                       distance-between\r\n                                       world-position-as-tuple]]\r\n            [zombie.util.timer :as timer]\r\n            [zombie.state.databases :as db]))\r\n\r\n(def ^:private v1 (three/Vector3.))\r\n(def ^:private v2 (three/Vector3.))\r\n\r\n(defn- move-towards! [bus entity-id move-speed ^three/Object3D obj ^three/Object3D target-obj]\r\n  (let [target-pos (.getWorldPosition target-obj v1)\r\n        heading (-> (.getWorldPosition obj v2)\r\n                    (.sub target-pos)\r\n                    (.normalize)\r\n                    (.multiplyScalar (- move-speed)))]\r\n    (.lookAt obj target-pos)\r\n    (message/send bus entity-id :physics/set-velocity (vector3->tuple heading))))\r\n\r\n(defn- in-range? [{:keys [^three/Object3D object\r\n                          ^three/Object3D attacker-obj]}\r\n                  _]\r\n  (> 2 (distance-between object attacker-obj)))\r\n\r\n(defn- -entry-idle [{:keys [bus entity-id]} _]\r\n  (message/send bus entity-id :animation/play {:loop? true\r\n                                               :animation :animation/character-idle}))\r\n\r\n(defn- -entry-chasing [{:keys [bus entity-id]} _]\r\n  (message/send bus entity-id :animation/play {:loop? true\r\n                                               :animation :animation/character-run}))\r\n\r\n(defn- -entry-attacking-pre-hit [{:keys [bus entity-id]} _]\r\n  (message/send bus entity-id :physics/set-velocity [0 0 0])\r\n  (message/send bus entity-id :animation/play {:loop? false\r\n                                               :animation :animation/character-attack}))\r\n\r\n(defn- -entry-dying [{:keys [bus entity-id object]} _]\r\n  (message/send bus :particles/spawn {:type :blood-fountain\r\n                                      :position (world-position-as-tuple object)})\r\n  (message/send bus entity-id :physics/set-velocity [0 0 0])\r\n  (message/send bus entity-id :physics/disable {})\r\n  (message/send bus entity-id :animation/stop-all {})\r\n  (message/send bus entity-id :animation/play {:loop? false\r\n                                               :clamp-when-finished? true\r\n                                               :animation :animation/character-death}))\r\n\r\n(defn- -entry-attacking-hit [{:keys [bus entity-id\r\n                                     attacker-id]\r\n                              :as ctx} _]\r\n  (when (in-range? ctx nil)\r\n    (message/send bus attacker-id :combat/hit {:damage 10\r\n                                               :attack-direction [0 0 0]\r\n                                               :hit-normal [0 0 0]\r\n                                               :hit-position [0 0 0]\r\n                                               :attacker-id entity-id})))\r\n\r\n(defn- -entry-dead [{:keys [entity-db entity-id]} _]\r\n  (swap! entity-db dissoc entity-id))\r\n\r\n(defn- -action-idle-to-chasing [{:keys [object bus]} _]\r\n  (message/send bus :particles/spawn {:type :floating-text\r\n                                      :position (assoc (world-position-as-tuple object)\r\n                                                       1 1)\r\n                                      :color \"red\"\r\n                                      :text \"BRAAINNS\"}))\r\n\r\n(defmulti tick-ai-zombie (fn [state _context] state))\r\n(defmethod tick-ai-zombie :default [])\r\n\r\n(defmulti tick-zombie (fn [state _context] state))\r\n(defmethod tick-zombie :chasing [_ {:keys [bus entity-id move-speed attacker-obj object]}]\r\n  (move-towards! bus entity-id move-speed object attacker-obj))\r\n(defmethod tick-zombie :default [])\r\n\r\n(def ^:private zombie-fsm\r\n  (fsm/machine\r\n   {:id :zombiezzzzzz\r\n    :initial :initialize\r\n    :on {:tick {}}\r\n    :states {:initialize {:on {:start {:target :idle}}}\r\n             :idle {:on {:damaged {:target :chasing\r\n                                   :actions [-action-idle-to-chasing]}\r\n                         :killed {:target :dying}}\r\n                    :entry [-entry-idle]}\r\n             :chasing {:on {:tick [{:target :attacking\r\n                                    :guard in-range?}]\r\n                            :killed {:target :dying}\r\n                            :damaged {}}\r\n                       :entry [-entry-chasing]}\r\n             :attacking {:initial :pre-hit\r\n                         :states {:pre-hit {:after [{:delay 500\r\n                                                     :target :hit}]\r\n                                            :entry [-entry-attacking-pre-hit]}\r\n                                  :hit {:after [{:delay 300\r\n                                                 :target :post-hit}]\r\n                                        :entry -entry-attacking-hit}\r\n                                  :post-hit {:on {:tick [{:guard in-range?\r\n                                                          :target :pre-hit}\r\n                                                         {:target [:> :chasing]}]}}}\r\n\r\n                         :on {:killed {:target :dying}\r\n                              :damaged {}}}\r\n             :dying {:on {:damaged {}\r\n                          :killed {}}\r\n                     :entry [-entry-dying]\r\n                     :after [{:delay 2000\r\n                              :target :dead}]}\r\n             :dead {:entry [-entry-dead]}}}))\r\n\r\n(defn- on-damaged [bus local-state entity-id object payload]\r\n  (let [{:keys [attacker-id\r\n                damage\r\n                attack-direction\r\n                hit-position]}\r\n        payload\r\n        attacker-obj ^three/Object3D (get @db/entity-objects attacker-id)\r\n        fsm (get-in @local-state [entity-id :fsm])]\r\n    (fsm/update-state fsm assoc\r\n                      :attacker-id (:attacker-id payload)\r\n                      :attacker-obj attacker-obj)\r\n    (fsm/send fsm {:type :damaged\r\n                   :payload payload})\r\n    ;; TODO: Scale impact force by distance? The weapon should have some say over the impact force\r\n    ;(message/send bus entity-id :physics/apply-force attack-direction)\r\n    (message/send bus entity-id :animation/play {:loop? false\r\n                                                 :layer :upper\r\n                                                 :animation :animation/character-hit-reaction-upper})\r\n\r\n    (message/send bus :particles/spawn {:type :blood-fountain\r\n                                        :scale 0.5\r\n                                        :position hit-position})\r\n    (message/send bus :particles/spawn {:type :floating-text\r\n                                        :position (assoc (world-position-as-tuple object)\r\n                                                         1 2)\r\n                                        :color \"orange\"\r\n                                        :speed 5\r\n                                        :spread 8\r\n                                        :text (str damage)})\r\n    (swap! local-state assoc-in [entity-id :target-object] attacker-obj)))\r\n\r\n(defn- on-killed [_bus local-state entity-id payload]\r\n  (let [fsm (get-in @local-state [entity-id :fsm])]\r\n    (fsm/send fsm {:type :killed\r\n                   :payload payload})))\r\n\r\n(defn- tick-ai [fsm]\r\n  (fsm/send fsm :tick)\r\n  (tick-ai-zombie (fsm/value fsm) (fsm/state fsm)))\r\n\r\n(defn- register-listeners! [bus local-state entity-id object]\r\n  (message/on bus entity-id :entity/damaged (partial on-damaged bus local-state entity-id object))\r\n  (message/on bus entity-id :entity/killed (partial on-killed bus local-state entity-id)))\r\n\r\n(deftype ZombieSystem [bus local-state]\r\n  ISystem\r\n  (init [_ _])\r\n  (destroy [_ _])\r\n  (on-entity-added [_ {:keys [entity-db]} id obj {:keys [move-speed]}]\r\n    (register-listeners! bus local-state id obj)\r\n    (let [context {:object obj\r\n                   :entity-db entity-db\r\n                   :move-speed move-speed\r\n                   :local-state local-state\r\n                   :bus bus\r\n                   :entity-id id}\r\n          fsm-service (fsm/service (assoc zombie-fsm :context context))]\r\n      (fsm/start fsm-service)\r\n      (swap! local-state assoc id {:ai-ticker (timer/jitter-ticker 0.2 0.25 #(tick-ai fsm-service))\r\n                                   :local-state local-state\r\n                                   :fsm fsm-service})\r\n      #(fsm/send fsm-service :start)))\r\n  (on-entity-removed [_ _ id _obj _cfg]\r\n    (swap! local-state dissoc id))\r\n  (tick [_ delta-time]\r\n    (doseq [[_ {:keys [ai-ticker fsm]}] @local-state]\r\n      (timer/maybe-tick ai-ticker delta-time)\r\n      (tick-zombie (fsm/value fsm) (fsm/state fsm)))))\r\n\r\n(defn create [event-bus]\r\n  (->ZombieSystem event-bus (atom {})))\r\n"]}