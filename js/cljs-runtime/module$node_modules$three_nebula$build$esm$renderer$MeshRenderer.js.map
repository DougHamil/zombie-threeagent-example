{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$renderer$MeshRenderer.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/three-nebula/build/esm/renderer/MeshRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$renderer$MeshRenderer\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _BaseRenderer = _interopRequireDefault(require(\"./BaseRenderer\"));\n\nvar _utils = require(\"../utils\");\n\nvar _core = require(\"../core\");\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @requires THREE - { Mesh, BoxGeometry, MeshLambertMaterial }\n */\nclass MeshRenderer extends _BaseRenderer.default {\n  /**\n   * @param {object} container - An Object3D container, usually a THREE.Scene\n   * @param {object} THREE - THREE Api\n   */\n  constructor(container, THREE) {\n    super(_types.RENDERER_TYPE_MESH);\n    this.container = container;\n    this._targetPool = new _core.Pool();\n    this._materialPool = new _core.Pool();\n    this._body = new THREE.Mesh(new THREE.BoxGeometry(50, 50, 50), new THREE.MeshLambertMaterial({\n      color: '#ff0000'\n    }));\n  }\n\n  isThreeSprite(particle) {\n    return particle.target.isSprite;\n  }\n\n  onSystemUpdate() {}\n\n  onParticleCreated(particle) {\n    if (!particle.target) {\n      //set target\n      if (!particle.body) particle.body = this._body;\n      particle.target = this._targetPool.get(particle.body); //set material\n\n      if (particle.useAlpha || particle.useColor) {\n        particle.target.material.__puid = _utils.PUID.id(particle.body.material);\n        particle.target.material = this._materialPool.get(particle.target.material);\n      }\n    }\n\n    if (particle.target) {\n      particle.target.position.copy(particle.position);\n      this.container.add(particle.target);\n    }\n  }\n\n  onParticleUpdate(particle) {\n    const {\n      target,\n      useAlpha,\n      useColor,\n      rotation\n    } = particle;\n\n    if (!target) {\n      return;\n    }\n\n    target.position.copy(particle.position);\n\n    if (!this.isThreeSprite(particle)) {\n      target.rotation.set(rotation.x, rotation.y, rotation.z);\n    }\n\n    this.scale(particle);\n\n    if (useAlpha) {\n      target.material.opacity = particle.alpha;\n      target.material.transparent = true;\n    }\n\n    if (useColor) {\n      target.material.color.copy(particle.color);\n    }\n  }\n\n  scale(particle) {\n    particle.target.scale.set(particle.scale, particle.scale, particle.scale);\n  }\n\n  onParticleDead(particle) {\n    if (particle.target) {\n      if (particle.useAlpha || particle.useColor) this._materialPool.expire(particle.target.material);\n\n      this._targetPool.expire(particle.target);\n\n      this.container.remove(particle.target);\n      particle.target = null;\n    }\n  }\n\n}\n\nexports.default = MeshRenderer;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","_BaseRenderer","_interopRequireDefault","obj","__esModule","_utils","_core","_types","MeshRenderer","constructor","container","THREE","RENDERER_TYPE_MESH","_targetPool","Pool","_materialPool","_body","Mesh","BoxGeometry","MeshLambertMaterial","color","isThreeSprite","particle","target","isSprite","onSystemUpdate","onParticleCreated","body","get","useAlpha","useColor","material","__puid","PUID","id","position","copy","add","onParticleUpdate","rotation","set","x","y","z","scale","opacity","alpha","transparent","onParticleDead","expire","remove"]
}
