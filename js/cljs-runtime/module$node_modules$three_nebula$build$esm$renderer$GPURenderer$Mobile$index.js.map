{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$renderer$GPURenderer$Mobile$index.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/three-nebula/build/esm/renderer/GPURenderer/Mobile/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$renderer$GPURenderer$Mobile$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _common = require(\"../common\");\n\nvar _shaders = require(\"./shaders\");\n\nvar _BaseRenderer = _interopRequireDefault(require(\"../../BaseRenderer\"));\n\nvar _constants = require(\"../common/constants\");\n\nvar _core = require(\"../../../core\");\n\nvar _types = require(\"../../types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nlet THREE;\n/**\n * GPURenderer for mobile devices that do not support floating point textures.\n *\n * @author thrax <manthrax@gmail.com>\n * @author rohan-deshpande <rohan@creativelifeform.com>\n */\n\nclass MobileGPURenderer extends _BaseRenderer.default {\n  constructor(container, three, options = _constants.DEFAULT_RENDERER_OPTIONS) {\n    super(_types.RENDERER_TYPE_GPU_MOBILE);\n    THREE = this.three = three;\n\n    const props = _objectSpread(_objectSpread({}, _constants.DEFAULT_RENDERER_OPTIONS), options);\n\n    const {\n      camera,\n      maxParticles,\n      baseColor,\n      blending,\n      depthTest,\n      depthWrite,\n      transparent,\n      shouldDebugTextureAtlas\n    } = props;\n    const particleBuffer = new _common.ParticleBuffer(maxParticles, THREE);\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        baseColor: {\n          value: new THREE.Color(baseColor)\n        },\n        uTexture: {\n          value: null\n        },\n        FFatlasIndex: {\n          value: null\n        },\n        atlasDim: {\n          value: new THREE.Vector2()\n        }\n      },\n      vertexShader: (0, _shaders.vertexShader)(),\n      fragmentShader: (0, _shaders.fragmentShader)(),\n      blending: THREE[blending],\n      depthTest,\n      depthWrite,\n      transparent\n    });\n    this.camera = camera;\n    this.targetPool = new _core.Pool();\n    this.uniqueList = new _common.UniqueList(maxParticles);\n    this.particleBuffer = particleBuffer;\n    this.buffer = particleBuffer.buffer;\n    this.stride = particleBuffer.stride;\n    this.geometry = particleBuffer.geometry;\n    this.material = material;\n    this.points = new THREE.Points(this.geometry, this.material);\n    this.points.frustumCulled = false;\n    this.shouldDebugTextureAtlas = shouldDebugTextureAtlas;\n    container.add(this.points);\n  }\n\n  onSystemUpdate(system) {\n    super.onSystemUpdate(system);\n    this.buffer.needsUpdate = true;\n    const {\n      textureAtlas\n    } = this;\n\n    if (textureAtlas) {\n      textureAtlas.update();\n      this.material.uniforms.atlasDim.value.set(textureAtlas.atlasTexture.image.width, textureAtlas.atlasTexture.image.height);\n    }\n  }\n  /**\n   * Pools the particle target if it does not exist.\n   * Updates the target and maps particle properties to the point.\n   *\n   * @param {Particle}\n   */\n\n\n  onParticleCreated(particle) {\n    if (!particle.target) {\n      particle.target = this.targetPool.get(_common.Target, THREE);\n      this.uniqueList.add(particle.id);\n    }\n\n    this.updateTarget(particle).mapParticleTargetPropsToPoint(particle);\n  }\n  /**\n   * Maps particle properties to the point if the particle has a target.\n   *\n   * @param {Particle}\n   */\n\n\n  onParticleUpdate(particle) {\n    if (!particle.target) {\n      return;\n    }\n\n    this.updateTarget(particle).mapParticleTargetPropsToPoint(particle);\n  }\n  /**\n   * Resets and clears the particle target.\n   *\n   * @param {Particle}\n   */\n\n\n  onParticleDead(particle) {\n    if (!particle.target) {\n      return;\n    }\n\n    particle.target.reset();\n    this.mapParticleTargetPropsToPoint(particle);\n    particle.target = null;\n  }\n  /**\n   * Maps all mutable properties from the particle to the target.\n   *\n   * @param {Particle}\n   * @return {GPURenderer}\n   */\n\n\n  updateTarget(particle) {\n    const {\n      position,\n      scale,\n      radius,\n      color,\n      alpha,\n      body,\n      id\n    } = particle;\n    const {\n      r,\n      g,\n      b\n    } = color;\n    particle.target.position.copy(position);\n    particle.target.size = scale * radius;\n    particle.target.color.setRGB(r, g, b);\n    particle.target.alpha = alpha;\n    particle.target.index = this.uniqueList.find(id);\n\n    if (body && body instanceof THREE.Sprite) {\n      const {\n        map\n      } = body.material;\n      particle.target.texture = map;\n      particle.target.textureIndex = this.getTextureID(map, this.shouldDebugTextureAtlas);\n    }\n\n    return this;\n  }\n  /**\n   * Entry point for mapping particle properties to buffer geometry points.\n   *\n   * @param {Particle} particle - The particle containing the properties to map\n   * @return {GPURenderer}\n   */\n\n\n  mapParticleTargetPropsToPoint(particle) {\n    this.updatePointPosition(particle).updatePointSize(particle).updatePointColor(particle).updatePointAlpha(particle).updatePointTextureIndex(particle);\n    return this;\n  }\n  /**\n   * Updates the point's position according to the particle's target position.\n   *\n   * @param {Particle} particle - The particle containing the target position.\n   * @return {GPURenderer}\n   */\n\n\n  updatePointPosition(particle) {\n    const attribute = 'position';\n    const {\n      geometry,\n      stride,\n      buffer\n    } = this;\n    const {\n      target\n    } = particle;\n    const {\n      offset\n    } = geometry.attributes[attribute];\n    buffer.array[target.index * stride + offset + 0] = target.position.x;\n    buffer.array[target.index * stride + offset + 1] = target.position.y;\n    buffer.array[target.index * stride + offset + 2] = target.position.z;\n    return this;\n  }\n  /**\n   * Updates the point's size relative to the particle's target scale and radius.\n   *\n   * @param {Particle} particle - The particle containing the target scale.\n   * @return {GPURenderer}\n   */\n\n\n  updatePointSize(particle) {\n    const attribute = 'size';\n    const {\n      geometry,\n      stride,\n      buffer\n    } = this;\n    const {\n      target\n    } = particle;\n    const {\n      offset\n    } = geometry.attributes[attribute];\n    buffer.array[target.index * stride + offset + 0] = target.size;\n    return this;\n  }\n  /**\n   * Updates the point's color attribute according with the particle's target color.\n   *\n   * @param {Particle} particle - The particle containing the target color and alpha.\n   * @return {GPURenderer}\n   */\n\n\n  updatePointColor(particle) {\n    const attribute = 'color';\n    const {\n      geometry,\n      stride,\n      buffer\n    } = this;\n    const {\n      target\n    } = particle;\n    const {\n      offset\n    } = geometry.attributes[attribute];\n    buffer.array[target.index * stride + offset + 0] = target.color.r;\n    buffer.array[target.index * stride + offset + 1] = target.color.g;\n    buffer.array[target.index * stride + offset + 2] = target.color.b;\n    return this;\n  }\n  /**\n   * Updates the point alpha attribute with the particle's target alpha.\n   *\n   * @param {Particle} particle - The particle containing the target alpha.\n   * @return {GPURenderer}\n   */\n\n\n  updatePointAlpha(particle) {\n    const attribute = 'alpha';\n    const {\n      geometry,\n      stride,\n      buffer\n    } = this;\n    const {\n      target\n    } = particle;\n    const {\n      offset\n    } = geometry.attributes[attribute];\n    buffer.array[target.index * stride + offset + 0] = target.alpha;\n    return this;\n  }\n  /**\n   * Updates the point texture attribute with the particle's target texture.\n   *\n   * @param {Particle} particle - The particle containing the target texture.\n   * @return {GPURenderer}\n   */\n\n\n  updatePointTextureIndex(particle) {\n    const attribute = 'texID';\n    const {\n      geometry,\n      stride,\n      buffer\n    } = this;\n    const {\n      target\n    } = particle;\n    const {\n      offset\n    } = geometry.attributes[attribute];\n    const id = target.index * stride + offset + 0; // eslint-disable-next-line\n\n    if (false) {\n      buffer.array[id] = target.textureIndex;\n    } else {\n      let ti = target.textureIndex * 4;\n      const ta = this.textureAtlas;\n      const ida = ta.indexData;\n      const nx = ida[ti++];\n      const ny = ida[ti++];\n      const px = ida[ti++];\n      const py = ida[ti++];\n      buffer.array[id] = (nx * ta.atlasTexture.image.width | 0) + px;\n      buffer.array[id + 1] = (ny * ta.atlasTexture.image.height | 0) + py;\n    }\n\n    return this;\n  }\n\n  getTextureID(texture, debug) {\n    if (texture.textureIndex === undefined) {\n      if (!this.textureAtlas) {\n        this.textureAtlas = new _common.TextureAtlas(this, debug);\n      }\n\n      this.textureAtlas.addTexture(texture);\n    }\n\n    return texture.textureIndex;\n  }\n\n  destroy() {\n    const {\n      container,\n      points,\n      textureAtlas,\n      uniqueList\n    } = this;\n    container.remove(points);\n    uniqueList.destroy();\n    textureAtlas && textureAtlas.destroy();\n  }\n\n}\n\nexports.default = MobileGPURenderer;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_common","_shaders","_BaseRenderer","_constants","_core","_types","THREE","MobileGPURenderer","constructor","container","three","options","DEFAULT_RENDERER_OPTIONS","RENDERER_TYPE_GPU_MOBILE","props","camera","maxParticles","baseColor","blending","depthTest","depthWrite","transparent","shouldDebugTextureAtlas","particleBuffer","ParticleBuffer","material","ShaderMaterial","uniforms","Color","uTexture","FFatlasIndex","atlasDim","Vector2","vertexShader","fragmentShader","targetPool","Pool","uniqueList","UniqueList","buffer","stride","geometry","points","Points","frustumCulled","add","onSystemUpdate","system","needsUpdate","textureAtlas","update","set","atlasTexture","image","width","height","onParticleCreated","particle","get","Target","id","updateTarget","mapParticleTargetPropsToPoint","onParticleUpdate","onParticleDead","reset","position","scale","radius","color","alpha","body","r","g","b","copy","size","setRGB","index","find","Sprite","map","texture","textureIndex","getTextureID","updatePointPosition","updatePointSize","updatePointColor","updatePointAlpha","updatePointTextureIndex","offset","attributes","array","x","y","z","ti","ta","ida","indexData","nx","ny","px","py","debug","undefined","TextureAtlas","addTexture","destroy","remove"]
}
