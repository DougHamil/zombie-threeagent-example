{"version":3,"sources":["statecharts/core.cljc"],"mappings":";AAMA,AAAKA,2BAAQC;AACb,AAAKC,8BAAWC;AAChB,AAAKC,8BAAWC;AAChB,AAAKC,0BAAOC;AAEZ,AAAKC,2BAAQC;AACb,yBAAA,zBAAMC,0DAAOC;AAAb,AACE,OAACC,0BAAcD;;AACjB,0BAAA,1BAAME,4DAAQF,QAAQG;AAAtB,AACE,OAACC,2BAAeJ,QAAQG;;AAE1B,AAAA,wBAAA,gCAAAE,xDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sDAAA,tDAAMD,iEACFP,QAAQS;AADZ,AAEG,yEAAA,lEAACC,oDAAKV,QAAQS;;;AAFjB,CAAA,sDAAA,tDAAMF,iEAGFP,QAAQS,MAAME;AAHlB,AAIG,OAACC,yBAAaZ,QAAQS;;;AAJzB,CAAA,gDAAA,hDAAMF;;AAAN,AAMA,yBAAA,zBAAMO,0DAAOd;AAAb,AAAA,OAAAa,gBACG,AAASb;;AAEZ,yBAAA,zBAAMe,0DAAOf;AAAb,AACE,OAAA,uFAAA,uBAAIA,vBAAQc;;AAEd,2BAAA,3BAAME,8DAASC,MAAMC;AAArB,AACE,IAAMC,KAAG,AAACC,gCACA,EAAI,AAACC,qBAAKJ,QACR,AAAA,uFAASA,OACTA;IACNK,KAAG,AAACF,gCAAcF;AAJxB,AAKE,OAACK,kCAAgBD,GAAGH;;AAExB,AAAA;;;;;;;gCAAA,wCAAAd,xEAAMwB;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,qEAAA,rEAAME,gFAM0B7B,QAAQoC,EAAIC;AAN5C,AAOE,IAAMpB,QAAM,AAASjB;AAArB,AACE,gEAAA,WAAAsC,pEAACC,mDAAMtB;AAAP,AAAc,uDAAAqB,hDAACE,8CAAMJ,mBAAIC;;;;AAR7B,CAAA,wDAAA,xDAAMR;;AAAN;AAAA,CAAA,kDAAA,WAAAC,7DAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAK,qBAAA;AAAA,AAAA,OAAAA,wDAAAJ,SAAAG,SAAAJ;;;AAAA","names":["statecharts.core/machine","statecharts.impl/machine","statecharts.core/initialize","statecharts.impl/initialize","statecharts.core/transition","statecharts.impl/transition","statecharts.core/assign","statecharts.impl/assign","statecharts.core/service","statecharts.service/service","statecharts.core/start","service","statecharts.service/start","statecharts.core/reload","fsm","statecharts.service/reload","var_args","G__12890","statecharts.core/send","js/Error","event","statecharts.core.send","_","statecharts.service/send","cljs.core/deref","statecharts.core/state","statecharts.core/value","statecharts.core/matches","state","value","v1","statecharts.utils/ensure-vector","cljs.core/map?","v2","statecharts.impl/is-prefix?","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","statecharts.core/update-state","seq12896","G__12897","cljs.core/first","cljs.core/next","G__12898","self__4805__auto__","f","args","p1__12895#","cljs.core.swap_BANG_","cljs.core.apply"],"sourcesContent":["(ns statecharts.core\n  (:require [statecharts.impl :as impl]\n            [statecharts.service :as service]\n            [statecharts.utils :refer [ensure-vector]])\n  (:refer-clojure :exclude [send]))\n\n(def machine impl/machine)\n(def initialize impl/initialize)\n(def transition impl/transition)\n(def assign impl/assign)\n\n(def service service/service)\n(defn start [service]\n  (service/start service))\n(defn reload [service fsm]\n  (service/reload service fsm))\n\n(defn send\n  ([service event]\n   (send service event nil))\n  ([service event _]\n   (service/send service event)))\n\n(defn state [service]\n  @(.-state service))\n\n(defn value [service]\n  (-> service state :_state))\n\n(defn matches [state value]\n  (let [v1 (ensure-vector\n            (if (map? state)\n              (:_state state)\n              state))\n        v2 (ensure-vector value)]\n    (impl/is-prefix? v2 v1)))\n\n(defn update-state\n  \"Provide a pathway to modify the state of a state machine directly\n  without going through any event.\n\n  Return the updated context.\n  \"\n  [^statecharts.service.Service service f & args]\n  (let [state (.-state service)]\n    (swap! state #(apply f % args))))\n"]}