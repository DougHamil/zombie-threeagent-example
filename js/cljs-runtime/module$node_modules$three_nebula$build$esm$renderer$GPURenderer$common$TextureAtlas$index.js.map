{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$renderer$GPURenderer$common$TextureAtlas$index.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/three-nebula/build/esm/renderer/GPURenderer/common/TextureAtlas/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$renderer$GPURenderer$common$TextureAtlas$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _types = require(\"../../../types\");\n\nvar _constants = require(\"./constants\");\n\nvar _constants2 = require(\"../../../../constants\");\n\nvar _potpack = _interopRequireDefault(require(\"potpack\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Dynamic texture atlas for performant support of systems with multiple emitters and textures.\n *\n */\nclass TextureAtlas {\n  constructor(renderer, shouldDebug) {\n    const {\n      three: THREE,\n      type: rendererType\n    } = renderer;\n    const data = new Float32Array(_constants.DATA_TEXTURE_SIZE * 4);\n    const ctx = this.ctx = document.createElement('canvas').getContext('2d');\n    const {\n      canvas\n    } = ctx;\n    this.shouldDebug = shouldDebug;\n    this.rendererType = rendererType;\n    this.indexData = data;\n    this.canvas = canvas;\n    this.entries = [];\n\n    if (rendererType === _types.RENDERER_TYPE_GPU_DESKTOP) {\n      this.atlasIndex = new THREE.DataTexture(data, _constants.DATA_TEXTURE_SIZE, 1, THREE.RGBAFormat, THREE.FloatType);\n    }\n\n    canvas.width = canvas.height = _constants.DATA_TEXTURE_SIZE;\n\n    if (shouldDebug) {\n      this.debug(canvas, ctx);\n    }\n\n    this.atlasTexture = new THREE.CanvasTexture(canvas);\n    this.atlasTexture.flipY = false;\n    renderer.material.uniforms.uTexture.value = this.atlasTexture;\n\n    if (rendererType === _types.RENDERER_TYPE_GPU_DESKTOP) {\n      renderer.material.uniforms.atlasIndex.value = this.atlasIndex;\n    }\n\n    renderer.material.uniformsNeedUpdate = true;\n  }\n  /**\n   * Logs to the console when in dev mode.\n   *\n   */\n\n\n  log(...args) {\n    if (!_constants2.__DEV__) {\n      return;\n    }\n\n    console.log(...args);\n  }\n  /**\n   * Debugs the texture atlas by rendering it to a canvas in the DOM.\n   *\n   */\n\n\n  debug() {\n    const {\n      canvas,\n      ctx\n    } = this;\n    const halfmax = canvas.width;\n    ctx.fillStyle = 'purple';\n    ctx.fillRect(0, 0, halfmax, halfmax);\n    ctx.fillStyle = 'green';\n    ctx.fillRect(0, halfmax, halfmax, halfmax);\n    ctx.fillStyle = 'blue';\n    ctx.fillRect(halfmax, 0, halfmax, halfmax);\n    ctx.fillStyle = 'orange';\n    ctx.fillRect(halfmax, halfmax, halfmax, halfmax);\n    ctx.fillStyle = 'yellow';\n    ctx.font = canvas.width + 'px Verdana';\n    ctx.fillText('top row', 100, 500);\n    ctx.fillStyle = 'pink';\n    ctx.fillText('bottom row', 100, 1500);\n    canvas.style.position = 'absolute';\n    canvas.style.width = canvas.style.height = '300px';\n    canvas.style.left = canvas.style.top = '0px';\n    canvas.style.zIndex = 100;\n    document.body.appendChild(canvas);\n  }\n  /**\n   * Adds a texture to the texture atlas and flags that the atlas needs to be updated.\n   *\n   */\n\n\n  addTexture(texture) {\n    this.log('Adding texture to atlas:', texture.uuid);\n    texture.textureIndex = this.entries.length;\n    this.entries.push({\n      texture: texture\n    });\n    this.needsUpdate = true;\n  }\n  /**\n   * Updates the texture atlas. Will only rebuild the atlas if all images are loaded.\n   *\n   */\n\n\n  update() {\n    if (!this.needsUpdate) {\n      return;\n    }\n\n    const {\n      entries,\n      canvas,\n      indexData,\n      ctx,\n      atlasIndex,\n      atlasTexture,\n      rendererType\n    } = this;\n\n    for (let i = 0; i < entries.length; i++) {\n      if (!entries[i].texture.image) {\n        return;\n      }\n    }\n\n    this.needsUpdate = false;\n\n    for (let i = 0; i < entries.length; i++) {\n      const e = entries[i];\n      const {\n        texture\n      } = e;\n      const {\n        width,\n        height\n      } = texture.image;\n      e.w = width;\n      e.h = height;\n    }\n\n    const stats = (0, _potpack.default)(entries);\n    this.log('Rebuilt atlas:', stats);\n\n    if (canvas.width != stats.w || canvas.height != stats.h) {\n      canvas.width = stats.w;\n      canvas.height = stats.h;\n    }\n\n    for (let i = 0; i < entries.length; i++) {\n      const e = this.entries[i];\n      const ii = e.texture.textureIndex * 4;\n\n      if (rendererType === _types.RENDERER_TYPE_GPU_DESKTOP) {\n        indexData[ii + 0] = e.x / canvas.width;\n        indexData[ii + 1] = e.y / canvas.height;\n        indexData[ii + 2] = (e.x + e.w) / canvas.width;\n        indexData[ii + 3] = (e.y + e.h) / canvas.height;\n      }\n\n      if (rendererType === _types.RENDERER_TYPE_GPU_MOBILE) {\n        indexData[ii + 0] = e.x / (canvas.width + 1);\n        indexData[ii + 1] = e.y / (canvas.height + 1);\n        indexData[ii + 2] = (e.x + e.w) / (canvas.width + 1);\n        indexData[ii + 3] = (e.y + e.h) / (canvas.height + 1);\n      }\n\n      ctx.drawImage(e.texture.image, e.x, e.y, e.w, e.h);\n    }\n\n    if (rendererType === _types.RENDERER_TYPE_GPU_DESKTOP) {\n      atlasIndex.needsUpdate = true;\n    }\n\n    atlasTexture.needsUpdate = true;\n  }\n  /**\n   * Disposes of the textures used by the texture atlas.\n   *\n   * @return void\n   */\n\n\n  destroy() {\n    const {\n      atlasIndex,\n      atlasTexture,\n      canvas\n    } = this;\n    atlasTexture.dispose();\n    atlasIndex && atlasIndex.dispose();\n\n    if (this.shouldDebug) {\n      canvas.remove();\n    }\n\n    this.entries = [];\n  }\n\n}\n\nexports.default = TextureAtlas;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","_types","_constants","_constants2","_potpack","_interopRequireDefault","obj","__esModule","TextureAtlas","constructor","renderer","shouldDebug","THREE","rendererType","data","Float32Array","DATA_TEXTURE_SIZE","ctx","document","createElement","getContext","canvas","indexData","entries","RENDERER_TYPE_GPU_DESKTOP","atlasIndex","DataTexture","RGBAFormat","FloatType","width","height","debug","atlasTexture","CanvasTexture","flipY","material","uniforms","uTexture","uniformsNeedUpdate","log","args","__DEV__","console","halfmax","fillStyle","fillRect","font","fillText","style","position","left","top","zIndex","body","appendChild","addTexture","texture","uuid","textureIndex","length","push","needsUpdate","update","i","image","e","w","h","stats","ii","x","y","RENDERER_TYPE_GPU_MOBILE","drawImage","destroy","dispose","remove"]
}
