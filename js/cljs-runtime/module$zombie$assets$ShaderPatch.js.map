{
"version":3,
"file":"module$zombie$assets$ShaderPatch.js",
"lineCount":111,
"mappings":"A;AAGAA,4CAAMC,CAAAA,WAAYC,CAAAA,eAAlB,IAAqC;;;;CAArC;AAMAF,4CAAMC,CAAAA,WAAYE,CAAAA,UAAlB,IAAgC;;;;CAAhC;AAOAH,4CAAMC,CAAAA,WAAYG,CAAAA,iBAAlB,IAAuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAvC;AAwDA,IAAMC,qDAAmB,qEAAzB;AACAL,4CAAMC,CAAAA,WAAYK,CAAAA,gBAAlB,GAAqCN,4CAAMC,CAAAA,WAAYM,CAAAA,YAAaC,CAAAA,OAA/B,CAAuCH,kDAAvC,EAAyD;;;;;;;;;;;;;;;CAAzD,CAArC;AAiBAL,4CAAMS,CAAAA,SAAUC,CAAAA,MAAOC,CAAAA,YAAvB,GAAsCX,4CAAMS,CAAAA,SAAUC,CAAAA,MAAOC,CAAAA,YAAaH,CAAAA,OAApC,CAA4C,6BAA5C,EAAqE;;;CAArE,CAAtC;AAKAR,4CAAMS,CAAAA,SAAUG,CAAAA,KAAMC,CAAAA,cAAtB,GAAuCb,4CAAMS,CAAAA,SAAUG,CAAAA,KAAMC,CAAAA,cAAeL,CAAAA,OAArC,CAA6C,+BAA7C,EAAwE;;CAAxE,CAAvC;AAKAR,4CAAMS,CAAAA,SAAUG,CAAAA,KAAME,CAAAA,QAASC,CAAAA,cAA/B,GAAgD,CAACC,MAAO,IAAIhB,4CAAMiB,CAAAA,OAAV,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAAR,CAAhD;AACAjB,4CAAMS,CAAAA,SAAUG,CAAAA,KAAME,CAAAA,QAASI,CAAAA,oBAA/B,GAAsD,CAACF,MAAO,GAAR,CAAtD;AACAhB,4CAAMS,CAAAA,SAAUG,CAAAA,KAAME,CAAAA,QAASK,CAAAA,oBAA/B,GAAsD,CAACH,MAAO,GAAR,CAAtD;AACAhB,4CAAMS,CAAAA,SAAUG,CAAAA,KAAME,CAAAA,QAASM,CAAAA,SAA/B,GAA2C,CAACJ,MAAO,GAAR,CAA3C;AACAhB,4CAAMS,CAAAA,SAAUG,CAAAA,KAAME,CAAAA,QAASO,CAAAA,IAA/B,GAAsC,CAACL,MAAO,IAAIhB,4CAAMiB,CAAAA,OAAV,CAAkB,GAAlB,EAAuB,GAAvB,EAA4B,GAA5B,CAAR,CAAtC;AACO,KAAMK,qDAAN;AACLC,OAAK,CAACC,CAAA,GAAI,CAAL,CAAQ;AAAE,QAAKC,CAAAA,GAAL,CAASD,CAAT,CAAA;AAAF;AACT,WAAQ,EAAA;AAAE,WAAO,IAAKA,CAAAA,CAAZ;AAAF;AACR,WAAK,CAACA,CAAD,CAAI;AAAE,QAAKA,CAAAA,CAAL,GAASA,CAAT;AAAF;AAHR;AAzGP;AAAA,IAAAE,mCAAA,EAAA;AAyGaJ;AAAAA,gCAAAA,CAAAA,kBAAAA,GAAAA,oDAAAA;;",
"sources":["zombie/assets/ShaderPatch.js"],
"sourcesContent":["import THREE from \"goog:module$node_modules$three$build$three_module\";\r\n\r\n// vertex shader\r\nTHREE.ShaderChunk.fog_pars_vertex += `\r\n#ifdef USE_FOG\r\n  varying vec3 vWorldPosition;\r\n#endif\r\n`;\r\n\r\nTHREE.ShaderChunk.fog_vertex += `\r\n#ifdef USE_FOG\r\n  vWorldPosition = worldPosition.xyz;\r\n#endif\r\n`;\r\n\r\n// fragment shader\r\nTHREE.ShaderChunk.fog_pars_fragment += `\r\n#ifdef USE_FOG\r\n  varying vec3 vWorldPosition;\r\n  uniform vec3 playerPosition;\r\n  uniform float playerFogMinDistance;\r\n  uniform float playerFogMaxDistance;\r\n  uniform float fogHeight;\r\n  uniform vec3 time;\r\n\r\n  vec3 rgb2hsb( in vec3 c ) {\r\n      vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n      vec4 p = mix(vec4(c.bg, K.wz),\r\n                  vec4(c.gb, K.xy),\r\n                  step(c.b, c.g));\r\n      vec4 q = mix(vec4(p.xyw, c.r),\r\n                  vec4(c.r, p.yzx),\r\n                  step(p.x, c.r));\r\n      float d = q.x - min(q.w, q.y);\r\n      float e = 1.0e-10;\r\n      return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\r\n                  d / (q.x + e),\r\n                  q.x);\r\n  }\r\n// Simplex 2D noise\r\n//\r\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\r\n\r\nfloat snoise(vec2 v){\r\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\r\n           -0.577350269189626, 0.024390243902439);\r\n  vec2 i  = floor(v + dot(v, C.yy) );\r\n  vec2 x0 = v -   i + dot(i, C.xx);\r\n  vec2 i1;\r\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\r\n  vec4 x12 = x0.xyxy + C.xxzz;\r\n  x12.xy -= i1;\r\n  i = mod(i, 289.0);\r\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\r\n  + i.x + vec3(0.0, i1.x, 1.0 ));\r\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\r\n    dot(x12.zw,x12.zw)), 0.0);\r\n  m = m*m ;\r\n  m = m*m ;\r\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\r\n  vec3 h = abs(x) - 0.5;\r\n  vec3 ox = floor(x + 0.5);\r\n  vec3 a0 = x - ox;\r\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\r\n  vec3 g;\r\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\r\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\r\n  return 130.0 * dot(m, g);\r\n}\r\n#endif\r\n`;\r\n\r\nconst FOG_APPLIED_LINE = 'gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );';\r\nTHREE.ShaderChunk.new_fog_fragment = THREE.ShaderChunk.fog_fragment.replace(FOG_APPLIED_LINE, `\r\n  float fogNoiseFactor = fogHeight + clamp(snoise((vWorldPosition.xz + (time.x / 3.0))/3.0), 0.0, 1.0);\r\n  float fogFactor2 = 1.0 - smoothstep( 0.0, fogNoiseFactor, vWorldPosition.y );\r\n  float playerFogFactor = smoothstep(playerFogMinDistance, playerFogMaxDistance,\r\n                                     length(vWorldPosition.xz - playerPosition.xz));\r\n  vec3 lightHSB = rgb2hsb(outgoingLight);\r\n  float fogLightThreshold = 0.2;\r\n  float fogLightFactor = lightHSB.z > fogLightThreshold ? 0.0 : 1.0 - smoothstep(0.01, fogLightThreshold, lightHSB.z);\r\n\r\n  fogFactor = fogLightFactor  * min(playerFogFactor, fogFactor2);// * min(playerFogFactor, fogFactor2);\r\n  vec3 finalFogColor = fogColor;// mix(fogColor, directLight.color, fogLightFactor);\r\n\r\n  gl_FragColor.rgb = mix( gl_FragColor.rgb, finalFogColor, fogFactor);\r\n\r\n  //gl_FragColor.r = time.x;\r\n`);\r\n\r\nTHREE.ShaderLib.sprite.vertexShader = THREE.ShaderLib.sprite.vertexShader.replace('#include <fog_vertex>', `\r\n  vec4 worldPosition = mvPosition;\r\n  #include <fog_vertex>\r\n`);\r\n\r\nTHREE.ShaderLib.phong.fragmentShader = THREE.ShaderLib.phong.fragmentShader.replace('#include <fog_fragment>', `\r\n  #include <new_fog_fragment>\r\n`);\r\n\r\n\r\nTHREE.ShaderLib.phong.uniforms.playerPosition = {value: new THREE.Vector3(0, 0, 0)};\r\nTHREE.ShaderLib.phong.uniforms.playerFogMinDistance = {value: 0.0};\r\nTHREE.ShaderLib.phong.uniforms.playerFogMaxDistance = {value: 0.0};\r\nTHREE.ShaderLib.phong.uniforms.fogHeight = {value: 1.5};\r\nTHREE.ShaderLib.phong.uniforms.time = {value: new THREE.Vector3(0.0, 0.0, 0.0)};\r\nexport class SingleUniformValue {\r\n  const(v = 0) { this.set(v); }\r\n  get value() { return this.v; }\r\n  set value(v) { this.v = v; } \r\n}\r\n"],
"names":["THREE","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","FOG_APPLIED_LINE","new_fog_fragment","fog_fragment","replace","ShaderLib","sprite","vertexShader","phong","fragmentShader","uniforms","playerPosition","value","Vector3","playerFogMinDistance","playerFogMaxDistance","fogHeight","time","SingleUniformValue","const","v","set","$jscomp$tmp$exports$module$name"]
}
