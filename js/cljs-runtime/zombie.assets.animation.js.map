{"version":3,"sources":["zombie/assets/animation.cljs"],"mappings":";;;AAKA,AAAeA,qCAAW,KAAAC;AAC1B,uCAAA,2CAAA,uDAAA,iFAAA,WAAA,YAAA,YAAA,WAAA,YAAA,gBAAA,YAAA,2BAAA,sDAAA,iFAAA,aAAA,aAAA,gBAAA,YAAA,WAAA,YAAA,/hBAAeC;AAMf,iDAAA,jDAAOC,0GAAkBC;AAAzB,AACE,UAAK,yCAAA,zCAACC,+BAAiB,AAAQD;;AAEjC,4CAAA,5CAAOE,gGAAcC,KAA0BC;AAA/C,AACE,IAAMC,4BACY,AAACC,+CAAO,WAAKC,7EAQb,AAACO;AARO,AACE,IAAMN,OAAK,AAAQD;AAAnB,AACE,OAACE,cACA,AAACC,+CAAO,WAAKC,IAAIC;AAAT,AACE,IAAAC,mBAAIF;AAAJ,AAAA,oBAAAE;AAAAA;;AACI,OAACZ,+BAAiBO,KAAKI;;GAFrC,MAIQT;GARrB,AAAUC;AAA5B,AAUE,CAAM,AAAUA,cAAMC;;AACtBD;;AAEJ,2CAAA,8DAAAW,zGAAMI,8FAAkBC,KAAKC;AAA7B,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;iBAAA,AAAAE,4CAAAF,eAAA,xEAA2CM;AAA3C,AACE,oBAAIA;yRACGD,pOACA,AAACE,4CAAI,AAACC,gDAAQtB,0CAAa,AAACgB,4CAAIpB,qCAAawB,5QAC7C,OAACG;;AACNJ;;;AAEJ,qCAAA,wDAAAK,7FAAME,kFAAYR,KAASC;AAA3B,AAAA,IAAAM,aAAAD;IAAAC,iBAAA,AAAAV,4BAAAU;sBAAA,AAAAT,4CAAAS,eAAA,7EAAyCE;AAAzC,AACE,mDAAA,WAAAC,vDAACP;AAAD,AAAM,oBAAIM;AACF,oFAAAC,7EAACC;;AADHD;;GAGDT;;AAEP,iCAAA,jCAAMW,0EAAQZ,KAAKa,KAAKC;AAAxB,AACE,YAAAC,QAAa,WAAKC,IAAIC;AAAT,AACE,OAAOzC,wCAAWqC,KACX,WAAKK;AAAL,AACE,IAAAC,WAAK,AAACjC,+CAAOP,+CAAiB,AAAcuC;AAA5C,AAAA,8EAAAC,0BAAAA,hGAACH,oCAAAA,8CAAAA;GAFV,KAIO,WAAKI;AAAL,AACE,AAACC,cAAiBD;;AAClB,QAACH,oCAAAA,yCAAAA,PAAIG,qBAAAA","names":["zombie.assets.animation/fbx-loader","js/module$node_modules$three$examples$jsm$loaders$FBXLoader.FBXLoader","zombie.assets.animation/kenney-roots","zombie.assets.animation/valid-animation?","anim","clojure.string/includes?","zombie.assets.animation/mute-tracks!","keys","clip","tracks","cljs.core.filter","track","name","cljs.core/not","cljs.core.reduce","acc","k","or__4212__auto__","cljs.core/to-array","p__10502","map__10503","cljs.core/--destructure-map","cljs.core.get","zombie.assets.animation/kenney-mute-half","_key","anims","mute-layer","cljs.core.map","cljs.core.partial","cljs.core.doall","p__10505","map__10506","zombie.assets.animation/middleware","additive?","p1__10504#","js/module$node_modules$three$build$three_module.AnimationUtils.makeClipAdditive","zombie.assets.animation/loader","path","_cfg","js/Promise","res","rej","data","G__10507","err","js/console.error"],"sourcesContent":["(ns zombie.assets.animation\r\n  (:require [\"three/examples/jsm/loaders/FBXLoader\" :refer [FBXLoader]]\r\n            [\"three\" :as three]\r\n            [clojure.string :as string]))\r\n\r\n(def ^:private fbx-loader (FBXLoader.))\r\n(def ^:private kenney-roots {:lower #{\"Toes\" \"Foot\"\r\n                                      \"Knee\" \"HipsCtrl\" \"Leg\" \"Root\"\r\n                                      \"Toe\"\r\n                                      \"Heel\"}\r\n                             :upper #{\"Spine\" \"Shoulder\"  \"Chest\" \"Arm\" \"Hand\" \"Head\" \"Neck\"}})\r\n\r\n(defn- valid-animation? [anim]\r\n  (not (string/includes? (.-name anim) \"0.Targeting\")))\r\n\r\n(defn- mute-tracks! [keys ^three/AnimationClip clip]\r\n  (let [tracks (->> (.-tracks clip)\r\n                    (filter (fn [track]\r\n                              (let [name (.-name track)]\r\n                                (not\r\n                                 (reduce (fn [acc k]\r\n                                           (or acc\r\n                                               (string/includes? name k)))\r\n                                         false\r\n                                         keys)))))\r\n                    (to-array))]\r\n    (set! (.-tracks clip) tracks)\r\n    clip))\r\n  \r\n(defn kenney-mute-half [_key anims {:keys [mute-layer]}]\r\n  (if mute-layer\r\n    (->> anims\r\n         (map (partial mute-tracks! (get kenney-roots mute-layer)))\r\n         (doall))\r\n    anims))\r\n\r\n(defn middleware [_key ^js anims {:keys [additive?]}]\r\n  (map #(if additive?\r\n          (three/AnimationUtils.makeClipAdditive %)\r\n          %)\r\n       anims))\r\n\r\n(defn loader [_key path _cfg]\r\n  (js/Promise. (fn [res rej]\r\n                 (.load fbx-loader path\r\n                        (fn [data]\r\n                          (res (filter valid-animation? (.-animations data))))\r\n                        nil\r\n                        (fn [err]\r\n                          (js/console.error err)\r\n                          (rej err))))))\r\n"]}