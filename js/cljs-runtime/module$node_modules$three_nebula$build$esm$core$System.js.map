{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$core$System.js",
"lineCount":9,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA0BnHC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CAErCG,QAASA,yBAAwB,EAAG,CAAE,GAAuB,UAAvB,GAAI,MAAOC,QAAX,CAAmC,MAAO,KAAM,KAAIC,MAAQ,IAAID,OAAWD,yBAAA,CAA2BA,QAAS,EAAG,CAAE,MAAOE,MAAT,CAAmB,OAAOA,MAA9I,CAzBpCC,MAAOC,CAAAA,cAAP,CAAsBT,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CU,MAAO,CAAA,CADoC,CAA7C,CAGAV,QAAQI,CAAAA,OAAR,CAAkB,IAAK,EAEvB,KAAIO,QAsBJC,QAAgC,CAACV,GAAD,CAAM,CAAE,GAAIA,GAAJ,EAAWA,GAAIC,CAAAA,UAAf,CAA6B,MAAOD,IAAO,IAAY,IAAZ;AAAIA,GAAJ,EAAmC,QAAnC,GAAoB,MAAOA,IAA3B,EAA8D,UAA9D,GAA+C,MAAOA,IAAtD,CAA4E,MAAO,CAAEE,QAASF,GAAX,CAAoB,KAAIK,MAAQF,wBAAA,EAA4B,IAAIE,KAAJ,EAAaA,KAAMM,CAAAA,GAAN,CAAUX,GAAV,CAAb,CAA+B,MAAOK,MAAMO,CAAAA,GAAN,CAAUZ,GAAV,CAAkB,KAAIa,OAAS,EAAb,CAAqBC,sBAAwBR,MAAOC,CAAAA,cAA/BO,EAAiDR,MAAOS,CAAAA,wBAA7E,CAAgHC,GAAT,KAASA,GAAT,GAAgBhB,IAAhB,CAAuB,GAAIM,MAAOW,CAAAA,SAAUC,CAAAA,cAAeC,CAAAA,IAAhC,CAAqCnB,GAArC,CAA0CgB,GAA1C,CAAJ,CAAoD,CAAE,IAAII,KAAON,qBAAA,CAAwBR,MAAOS,CAAAA,wBAAP,CAAgCf,GAAhC,CAAqCgB,GAArC,CAAxB,CAAoE,IAAUI,KAAJ,GAAaA,IAAKR,CAAAA,GAAlB,EAAyBQ,IAAKC,CAAAA,GAA9B,EAAsCf,MAAOC,CAAAA,cAAP,CAAsBM,MAAtB,CAA8BG,GAA9B,CAAmCI,IAAnC,CAAtC,CAAyFP,MAAA,CAAOG,GAAP,CAAzF,CAAuGhB,GAAA,CAAIgB,GAAJ,CAA9L,CAA8MH,MAAOX,CAAAA,OAAP,CAAiBF,GAASK,MAAJ;AAAaA,KAAMgB,CAAAA,GAAN,CAAUrB,GAAV,CAAea,MAAf,CAA0B,OAAOA,OAAxrB,CAtBxB,CAAwBjB,OAAA,CAAQ,yDAAR,CAAxB,CAAd,CAEI0B,WAAa1B,OAAA,CAAQ,2DAAR,CAFjB,CAII2B,SAAWxB,sBAAA,CAAuBH,OAAA,CAAQ,4DAAR,CAAvB,CAJf,CAMI4B,YAAc5B,OAAA,CAAQ,2DAAR,CANlB,CAQI6B,YAAc7B,OAAA,CAAQ,4DAAR,CARlB,CAUI8B,MAAQ3B,sBAAA,CAAuBH,OAAA,CAAQ,sDAAR,CAAvB,CAVZ;AAYI+B,UAAY5B,sBAAA,CAAuBH,OAAA,CAAQ,0DAAR,CAAvB,CAZhB,CAcIgC,eAAiB7B,sBAAA,CAAuBH,OAAA,CAAQ,+DAAR,CAAvB,CAdrB,CAgBIiC,OAASjC,OAAA,CAAQ,uDAAR,CAcb,MAAMkC,OAAN,CASEC,WAAW,CAACC,YAAA,CAAeP,WAAYQ,CAAAA,QAA5B,CAAsCC,eAAA,CAAkBV,WAAYW,CAAAA,sBAApE,CAA4F,CAKrG,IAAKC,CAAAA,IAAL,CAAYP,MAAOQ,CAAAA,gBAOnB,KAAKC,CAAAA,SAAL,CAAiB,CAAA,CAMjB,KAAKN,CAAAA,YAAL,CAAoBA,YAMpB,KAAKE,CAAAA,eAAL;AAAuBA,eAMvB,KAAKK,CAAAA,QAAL,CAAgB,EAMhB,KAAKC,CAAAA,SAAL,CAAiB,EAMjB,KAAKC,CAAAA,IAAL,CAAY,IAAIf,KAAMxB,CAAAA,OAMtB,KAAKwC,CAAAA,eAAL,CAAuB,IAAIjC,OAAQP,CAAAA,OAhDkE,CA6DhGyC,eAAQ,CAACC,IAAD,CAAOC,KAAP,CAAc,CAC3B,MAAO,CAAC,CAAA,CAAGlB,SAAUzB,CAAAA,OAAd,EAAuB0C,IAAvB,CAA6BC,KAA7B,CAAoCf,MAApC,CAA4CP,QAASrB,CAAAA,OAArD,CADoB,CActB4C,oBAAa,CAACF,IAAD,CAAOC,KAAP,CAAcE,OAAd,CAAuB,CACzC,MAAO,CAAC,CAAA,CAAGnB,cAAe1B,CAAAA,OAAnB,EAA4B0C,IAA5B,CAAkCC,KAAlC,CAAyCf,MAAzC,CAAiDP,QAASrB,CAAAA,OAA1D,CAAmE6C,OAAnE,CADkC,CAW3CC,QAAQ,CAACC,KAAD,CAAQC,MAAA,CAAS,IAAjB,CAAuB,CAC7B,IAAKR,CAAAA,eAAgBS,CAAAA,aAArB,CAAmCF,KAAnC,CAA0CC,MAA1C,CAD6B,CAW/BE,WAAW,CAACC,QAAD,CAAW,CACpB,IAAKb,CAAAA,SAAUc,CAAAA,IAAf,CAAoBD,QAApB,CACAA,SAASE,CAAAA,IAAT,CAAc,IAAd,CACA,OAAO,KAHa,CAatBC,cAAc,CAACH,QAAD,CAAW,CACvB,IAAKb,CAAAA,SAAUiB,CAAAA,MAAf,CAAsB,IAAKjB,CAAAA,SAAUkB,CAAAA,OAAf,CAAuBL,QAAvB,CAAtB;AAAwD,CAAxD,CACAA,SAASM,CAAAA,MAAT,CAAgB,IAAhB,CACA,OAAO,KAHgB,CAczBC,UAAU,CAACC,OAAD,CAAU,CAClB,MAAMC,MAAQ,IAAKvB,CAAAA,QAASwB,CAAAA,MAC5BF,QAAQG,CAAAA,MAAR,CAAiB,IACjBH,QAAQC,CAAAA,KAAR,CAAgBA,KAChB,KAAKvB,CAAAA,QAASe,CAAAA,IAAd,CAAmBO,OAAnB,CACA,KAAKb,CAAAA,QAAL,CAAcvC,OAAQwD,CAAAA,aAAtB,CAAqCJ,OAArC,CACA,OAAO,KANW,CAiBpBK,aAAa,CAACL,OAAD,CAAU,CACrB,GAAIA,OAAQG,CAAAA,MAAZ,GAAuB,IAAvB,CACE,MAAO,KAGTH,QAAQG,CAAAA,MAAR,CAAiB,IACjBH,QAAQC,CAAAA,KAAR,CAAgBK,IAAAA,EAChB,KAAK5B,CAAAA,QAASkB,CAAAA,MAAd,CAAqB,IAAKlB,CAAAA,QAASmB,CAAAA,OAAd,CAAsBG,OAAtB,CAArB,CAAqD,CAArD,CACA,KAAKb,CAAAA,QAAL,CAAcvC,OAAQ2D,CAAAA,eAAtB,CAAuCP,OAAvC,CACA,OAAO,KATc,CAwBvBQ,IAAI,CAAC,CACHC,OADG,CAEHC,QAFG,CAGHC,KAHG,CAAD,CAID,CACGF,OAAJ,EACEA,OAAA,EAGEC,SAAJ,EACE,IAAK7B,CAAAA,eAAgB+B,CAAAA,gBAArB,CAAsChE,OAAQiE,CAAAA,aAA9C;AAA6DH,QAA7D,CAGIhC,QAAAA,CAAW,IAAKA,CAAAA,QAASoC,CAAAA,GAAd,CAAkBd,OAAA,EAAW,CAC5C,MAAM,CACJe,IADI,CAAA,CAEFf,OAEJ,OAAagB,SAAb,GAAID,IAAJ,EACMJ,KAKG,EAJLA,KAAA,EAIK,CADPX,OAAQiB,CAAAA,iBAAR,EACO,CAAAC,OAAQC,CAAAA,OAAR,EANT,EASO,IAAID,OAAJ,CAAYC,OAAA,EAAW,CAC5BnB,OAAQoB,CAAAA,6BAAR,CAAsC,EAAA,EAAM,CACtCT,KAAJ,EACEA,KAAA,EAGFQ,QAAA,EAL0C,CAA5C,CAOAnB,QAAQiB,CAAAA,iBAAR,EAR4B,CAAvB,CAdqC,CAA7B,CA0BjB,IAAI,CACF,MAAOC,QAAQG,CAAAA,GAAR,CAAY3C,OAAZ,CADL,CAEF,MAAO4C,CAAP,CAAU,CACVC,OAAQC,CAAAA,IAAR,CAAaF,CAAb,CADU,CArCX,CAyDHG,MAAM,CAACC,KAAA,CAAQjE,UAAWkE,CAAAA,oBAApB,CAA0C,CACxCC,KAAAA,CAAIF,KAAJE,EAAanE,UAAWkE,CAAAA,oBAE9B,IAAI,IAAKlD,CAAAA,SAAT,CAAoB,CAClB,GAAQ,CAAR,CAAImD,KAAJ,CAAW,CACT,IAAIC,EAAI,IAAKnD,CAAAA,QAASwB,CAAAA,MAEtB,KAAA,CAAO2B,CAAA,EAAP,CAAA,CAAY,CACV,MAAM7B;AAAU,IAAKtB,CAAAA,QAAL,CAAcmD,CAAd,CAChB7B,QAAQyB,CAAAA,MAAR,CAAeG,KAAf,CACA5B,QAAQ8B,CAAAA,UAAR,EAAsB,IAAK3C,CAAAA,QAAL,CAAcvC,OAAQiE,CAAAA,aAAtB,CAHZ,CAHH,CAUX,IAAK1B,CAAAA,QAAL,CAAcvC,OAAQmF,CAAAA,mBAAtB,CAXkB,CAcpB,MAAOb,QAAQC,CAAAA,OAAR,EAjBuC,CA0BhDa,QAAQ,EAAG,CACT,MAAM9B,OAAS,IAAKxB,CAAAA,QAASwB,CAAAA,MAC7B,KAAI+B,MAAQ,CAAZ,CACIJ,CAEJ,KAAKA,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgB3B,MAAhB,CAAwB2B,CAAA,EAAxB,CACEI,KAAA,EAAS,IAAKvD,CAAAA,QAAL,CAAcmD,CAAd,CAAiBK,CAAAA,SAAUhC,CAAAA,MAGtC,OAAO+B,MATE,CAoBXE,OAAO,EAAG,CACR,MAAMjC,OAAS,IAAKxB,CAAAA,QAASwB,CAAAA,MAC7B,KAAKzB,CAAAA,SAAL,CAAiB,CAAA,CAEjB,KAAK,IAAI6C,EAAI,CAAb,CAAgBA,CAAhB,CAAoBpB,MAApB,CAA4BoB,CAAA,EAA5B,CACE,IAAK5C,CAAAA,QAAL,CAAc4C,CAAd,CACA,EADoB,IAAK5C,CAAAA,QAAL,CAAc4C,CAAd,CAAiBa,CAAAA,OAAjB,EACpB,CAAA,OAAO,IAAKzD,CAAAA,QAAL,CAAc4C,CAAd,CAGT,KAASc,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoBlC,MAApB,CAA4BkC,CAAA,EAA5B,CACM,IAAKzD,CAAAA,SAAL,CAAeyD,CAAf,CAAJ,EAAyB,IAAKzD,CAAAA,SAAL,CAAeyD,CAAf,CAAkBD,CAAAA,OAA3C;CACE,IAAKxD,CAAAA,SAAL,CAAeyD,CAAf,CAAkBD,CAAAA,OAAlB,EACA,CAAA,OAAO,IAAKxD,CAAAA,SAAL,CAAeyD,CAAf,CAFT,CAMF,KAAK1D,CAAAA,QAASwB,CAAAA,MAAd,CAAuB,CACvB,KAAKtB,CAAAA,IAAKuD,CAAAA,OAAV,EACA,KAAK1D,CAAAA,SAAL,CAAiB,CAAA,CAlBT,CAzRZ,CAgTAxC,OAAQI,CAAAA,OAAR,CAAkB4B,MAtViG;",
"sources":["node_modules/three-nebula/build/esm/core/System.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$core$System\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = _interopRequireWildcard(require(\"../events\"));\n\nvar _constants = require(\"./constants\");\n\nvar _Emitter = _interopRequireDefault(require(\"../emitter/Emitter\"));\n\nvar _constants2 = require(\"../math/constants\");\n\nvar _constants3 = require(\"../constants\");\n\nvar _Pool = _interopRequireDefault(require(\"./Pool\"));\n\nvar _fromJSON = _interopRequireDefault(require(\"./fromJSON\"));\n\nvar _fromJSONAsync = _interopRequireDefault(require(\"./fromJSONAsync\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\n * The core of the three-system particle engine.\n * A System instance can contain multiple emitters, each with their own initializers\n * and behaviours.\n *\n */\nclass System {\n  /**\n   * Constructs a System instance.\n   *\n   * @param {object} THREE - ThreeJs\n   * @param {number} [preParticles=POOL_MAX] - The number of particles to start with\n   * @param {string} [integrationType=INTEGRATION_TYPE_EULER] - The integration type to use\n   * @return void\n   */\n  constructor(preParticles = _constants3.POOL_MAX, integrationType = _constants2.INTEGRATION_TYPE_EULER) {\n    /**\n     * @desc The class type.\n     * @type {string}\n     */\n    this.type = _types.CORE_TYPE_SYSTEM;\n    /**\n     * @desc Determines if the system can update or not. Set to false when destroying\n     * to ensure that external calls to update do not throw errors.\n     * @type {boolean}\n     */\n\n    this.canUpdate = true;\n    /**\n     * @desc The number of particles to start with.\n     * @type {number}\n     */\n\n    this.preParticles = preParticles;\n    /**\n     * @desc The integration algorithm type to use.\n     * @param {string}\n     */\n\n    this.integrationType = integrationType;\n    /**\n     * @desc The emitters in the particle system.\n     * @type {array<Emitter>}\n     */\n\n    this.emitters = [];\n    /**\n     * @desc The renderers for the system.\n     * @type {array<Renderer>}\n     */\n\n    this.renderers = [];\n    /**\n     * @desc A pool used to manage the internal system cache of objects\n     * @type {Pool}\n     */\n\n    this.pool = new _Pool.default();\n    /**\n     * @desc Internal event dispatcher\n     * @type {EventDispatcher}\n     */\n\n    this.eventDispatcher = new _events.default();\n  }\n  /**\n   * Creates a System instance from a JSON object.\n   *\n   * @param {object} json - The JSON to create the System instance from\n   * @param {object} THREE - The Web GL Api to use eg., THREE\n   * @return {System}\n   *\n   * @deprecated use fromJSONAsync instead\n   */\n\n\n  static fromJSON(json, THREE) {\n    return (0, _fromJSON.default)(json, THREE, System, _Emitter.default);\n  }\n  /**\n   * Loads a System instance from JSON asynchronously. Ensures all textures are\n   * fully loaded before resolving with the instantiated System instance.\n   *\n   * @param {object} json - The JSON to create the System instance from\n   * @param {object} THREE - The Web GL Api to use eg., THREE\n   * @param {?object} options - Optional config options\n   * @return {Promise<System>}\n   */\n\n\n  static fromJSONAsync(json, THREE, options) {\n    return (0, _fromJSONAsync.default)(json, THREE, System, _Emitter.default, options);\n  }\n  /**\n   * Proxy method for the internal event dispatcher's dispatchEvent method.\n   *\n   * @param {string} event - The event to dispatch\n   * @param {object<System|Emitter|Particle>} [target=this] - The event target\n   */\n\n\n  dispatch(event, target = this) {\n    this.eventDispatcher.dispatchEvent(event, target);\n  }\n  /**\n   * Adds a renderer to the System instance and initializes it.\n   *\n   * @param {Renderer} renderer - The renderer to add\n   * @return {System}\n   */\n\n\n  addRenderer(renderer) {\n    this.renderers.push(renderer);\n    renderer.init(this);\n    return this;\n  }\n  /**\n   * Removes a renderer from the System instance.\n   *\n   * @param {Renderer} renderer\n   * @return {System}\n   */\n\n\n  removeRenderer(renderer) {\n    this.renderers.splice(this.renderers.indexOf(renderer), 1);\n    renderer.remove(this);\n    return this;\n  }\n  /**\n   * Adds an emitter to the System instance.\n   * Dispatches the EMITTER_ADDED event.\n   *\n   * @param {Emitter} emitter - The emitter to add\n   * @return {System}\n   */\n\n\n  addEmitter(emitter) {\n    const index = this.emitters.length;\n    emitter.parent = this;\n    emitter.index = index;\n    this.emitters.push(emitter);\n    this.dispatch(_events.EMITTER_ADDED, emitter);\n    return this;\n  }\n  /**\n   * Removes an emitter from the System instance.\n   * Dispatches the EMITTER_REMOVED event.\n   *\n   * @param {Emitter} emitter - The emitter to remove\n   * @return {System}\n   */\n\n\n  removeEmitter(emitter) {\n    if (emitter.parent !== this) {\n      return this;\n    }\n\n    emitter.parent = null;\n    emitter.index = undefined;\n    this.emitters.splice(this.emitters.indexOf(emitter), 1);\n    this.dispatch(_events.EMITTER_REMOVED, emitter);\n    return this;\n  }\n  /**\n   * Wires up life cycle methods and causes a system's emitters to emit particles.\n   * Expects emitters to have their totalEmitTimes and life set already.\n   * Inifnite systems will resolve immediately.\n   *\n   * @param {object} hooks - Functions to hook into the life cycle API\n   * @param {function} hooks.onStart - Called when the system starts to emit particles\n   * @param {function} hooks.onUpdate - Called each time the system updates\n   * @param {function} hooks.onEnd - Called when the system's emitters have all died\n   * @return {Promise}\n   */\n\n\n  emit({\n    onStart,\n    onUpdate,\n    onEnd\n  }) {\n    if (onStart) {\n      onStart();\n    }\n\n    if (onUpdate) {\n      this.eventDispatcher.addEventListener(_events.SYSTEM_UPDATE, onUpdate);\n    }\n\n    const emitters = this.emitters.map(emitter => {\n      const {\n        life\n      } = emitter;\n\n      if (life === Infinity) {\n        if (onEnd) {\n          onEnd();\n        }\n\n        emitter.experimental_emit();\n        return Promise.resolve();\n      }\n\n      return new Promise(resolve => {\n        emitter.addOnEmitterDeadEventListener(() => {\n          if (onEnd) {\n            onEnd();\n          }\n\n          resolve();\n        });\n        emitter.experimental_emit();\n      });\n    });\n\n    try {\n      return Promise.all(emitters);\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n  /**\n   * Updates the particle system based on the delta passed.\n   *\n   * @example\n   * animate = () => {\n   *   threeRenderer.render(threeScene, threeCamera);\n   *   system.update();\n   *   requestAnimationFrame(animate);\n   * }\n   * animate();\n   *\n   * @param {number} delta - Delta time\n   * @return {Promise}\n   */\n\n\n  update(delta = _constants.DEFAULT_SYSTEM_DELTA) {\n    const d = delta || _constants.DEFAULT_SYSTEM_DELTA;\n\n    if (this.canUpdate) {\n      if (d > 0) {\n        let i = this.emitters.length;\n\n        while (i--) {\n          const emitter = this.emitters[i];\n          emitter.update(d);\n          emitter.isEmitting && this.dispatch(_events.SYSTEM_UPDATE);\n        }\n      }\n\n      this.dispatch(_events.SYSTEM_UPDATE_AFTER);\n    }\n\n    return Promise.resolve();\n  }\n  /**\n   * Gets a count of the total number of particles in the system.\n   *\n   * @return {integer}\n   */\n\n\n  getCount() {\n    const length = this.emitters.length;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      total += this.emitters[i].particles.length;\n    }\n\n    return total;\n  }\n  /**\n   * Destroys all emitters, renderers and the Nebula pool.\n   * Ensures that this.update will not perform any operations while the system\n   * is being destroyed.\n   *\n   * @return void\n   */\n\n\n  destroy() {\n    const length = this.emitters.length;\n    this.canUpdate = false;\n\n    for (let e = 0; e < length; e++) {\n      this.emitters[e] && this.emitters[e].destroy();\n      delete this.emitters[e];\n    }\n\n    for (let r = 0; r < length; r++) {\n      if (this.renderers[r] && this.renderers[r].destroy) {\n        this.renderers[r].destroy();\n        delete this.renderers[r];\n      }\n    }\n\n    this.emitters.length = 0;\n    this.pool.destroy();\n    this.canUpdate = true;\n  }\n\n}\n\nexports.default = System;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","WeakMap","cache","Object","defineProperty","value","_events","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_constants","_Emitter","_constants2","_constants3","_Pool","_fromJSON","_fromJSONAsync","_types","System","constructor","preParticles","POOL_MAX","integrationType","INTEGRATION_TYPE_EULER","type","CORE_TYPE_SYSTEM","canUpdate","emitters","renderers","pool","eventDispatcher","fromJSON","json","THREE","fromJSONAsync","options","dispatch","event","target","dispatchEvent","addRenderer","renderer","push","init","removeRenderer","splice","indexOf","remove","addEmitter","emitter","index","length","parent","EMITTER_ADDED","removeEmitter","undefined","EMITTER_REMOVED","emit","onStart","onUpdate","onEnd","addEventListener","SYSTEM_UPDATE","map","life","Infinity","experimental_emit","Promise","resolve","addOnEmitterDeadEventListener","all","e","console","warn","update","delta","DEFAULT_SYSTEM_DELTA","d","i","isEmitting","SYSTEM_UPDATE_AFTER","getCount","total","particles","destroy","r"]
}
