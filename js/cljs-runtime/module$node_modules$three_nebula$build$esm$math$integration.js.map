{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$math$integration.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,SAAR,CAAoB,IAAK,EAEzB,KAAIC,WAAaP,OAAA,CAAQ,2DAAR,CAAjB,CAEIQ,YAAcR,OAAA,CAAQ,2DAAR,CAUlB,OAAMS,iBAAmB,CAACC,QAAD,CAAWC,IAAX,CAAiBC,OAAjB,CAAAH,EAA6B,CAChDC,QAASG,CAAAA,KAAb,GAIAH,QAASI,CAAAA,GAAIC,CAAAA,QAASC,CAAAA,IAAtB,CAA2BN,QAASK,CAAAA,QAApC,CAMA,CALAL,QAASI,CAAAA,GAAIG,CAAAA,QAASD,CAAAA,IAAtB,CAA2BN,QAASO,CAAAA,QAApC,CAKA;AAJAP,QAASQ,CAAAA,YAAaC,CAAAA,MAAtB,CAA6B,CAA7B,CAAiCT,QAASU,CAAAA,IAA1C,CAIA,CAHAV,QAASO,CAAAA,QAASI,CAAAA,GAAlB,CAAsBX,QAASQ,CAAAA,YAAaC,CAAAA,MAAtB,CAA6BR,IAA7B,CAAtB,CAGA,CAFAD,QAASK,CAAAA,QAASM,CAAAA,GAAlB,CAAsBX,QAASI,CAAAA,GAAIG,CAAAA,QAASE,CAAAA,MAAtB,CAA6BR,IAA7B,CAAtB,CAEA,CADAC,OACA,EADWF,QAASO,CAAAA,QAASE,CAAAA,MAAlB,CAAyBG,IAAKC,CAAAA,GAAL,CAASX,OAAT,CAAkBD,IAAlB,CAAyBH,WAAYgB,CAAAA,oBAArC,CAAzB,CACX,CAAAd,QAASQ,CAAAA,YAAaO,CAAAA,KAAtB,EAVA,CADoD,CAoCtDvB,QAAQI,CAAAA,SAAR,CAXkB,CAACI,QAAD,CAAWC,IAAX,CAAiBC,OAAjB,CAA0Bc,IAAA,CAAOnB,UAAWoB,CAAAA,sBAA5C,CAAArB,EAAuE,CACvF,OAAQoB,IAAR,EACE,KAAKnB,UAAWoB,CAAAA,sBAAhB,CACElB,gBAAA,CAAiBC,QAAjB,CAA2BC,IAA3B,CAAiCC,OAAjC,CACA,MAEF,SACEH,gBAAA,CAAiBC,QAAjB,CAA2BC,IAA3B;AAAiCC,OAAjC,CANJ,CADuF,CA7C+B;",
"sources":["node_modules/three-nebula/build/esm/math/integration.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$math$integration\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.integrate = void 0;\n\nvar _constants = require(\"./constants\");\n\nvar _constants2 = require(\"../core/constants\");\n\n/**\n * Performs euler integration on the particle.\n *\n * @param {Particle} particle - The particle to integrate\n * @param {number} time - The factor of time to use\n * @param {number} damping - The damping to use\n * @return void\n */\nconst eulerIntegration = (particle, time, damping) => {\n  if (particle.sleep) {\n    return;\n  }\n\n  particle.old.position.copy(particle.position);\n  particle.old.velocity.copy(particle.velocity);\n  particle.acceleration.scalar(1 / particle.mass);\n  particle.velocity.add(particle.acceleration.scalar(time));\n  particle.position.add(particle.old.velocity.scalar(time));\n  damping && particle.velocity.scalar(Math.pow(damping, time / _constants2.DEFAULT_SYSTEM_DELTA));\n  particle.acceleration.clear();\n};\n/**\n * Performs the chosen integration on the particle.\n * Defaults to euler integration.\n *\n * @param {Particle} particle - The particle to integrate\n * @param {number} time - The factor of time to use\n * @param {number} damping - The damping to use\n * @param {string} [type=INTEGRATION_TYPE_EULER] - The algorithm to use\n * @return void\n */\n\n\nconst integrate = (particle, time, damping, type = _constants.INTEGRATION_TYPE_EULER) => {\n  switch (type) {\n    case _constants.INTEGRATION_TYPE_EULER:\n      eulerIntegration(particle, time, damping);\n      break;\n\n    default:\n      eulerIntegration(particle, time, damping);\n  }\n};\n\nexports.integrate = integrate;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","integrate","_constants","_constants2","eulerIntegration","particle","time","damping","sleep","old","position","copy","velocity","acceleration","scalar","mass","add","Math","pow","DEFAULT_SYSTEM_DELTA","clear","type","INTEGRATION_TYPE_EULER"]
}
