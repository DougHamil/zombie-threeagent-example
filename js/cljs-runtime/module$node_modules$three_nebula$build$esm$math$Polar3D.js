shadow$provide.module$node_modules$three_nebula$build$esm$math$Polar3D=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _Vector3D=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require("module$node_modules$three_nebula$build$esm$math$Vector3D")),_types=require("module$node_modules$three_nebula$build$esm$math$types");class Polar3D{constructor(radius,theta,phi){this.type=_types.MATH_TYPE_POLAR_3D;this.radius=radius||
1;this.phi=phi||0;this.theta=theta||0}set(radius,theta,phi){this.radius=radius||1;this.phi=phi||0;this.theta=theta||0;return this}setRadius(radius){this.radius=radius;return this}setPhi(phi){this.phi=phi;return this}setTheta(theta){this.theta=theta;return this}copy(p){this.radius=p.radius;this.phi=p.phi;this.theta=p.theta;return this}toVector3D(){return new _Vector3D.default(this.getX(),this.getY(),this.getZ())}getX(){return this.radius*Math.sin(this.theta)*Math.cos(this.phi)}getY(){return-this.radius*
Math.sin(this.theta)*Math.sin(this.phi)}getZ(){return this.radius*Math.cos(this.theta)}normalize(){this.radius=1;return this}equals(v){return v.radius===this.radius&&v.phi===this.phi&&v.theta===this.theta}clear(){this.theta=this.phi=this.radius=0;return this}clone(){return new Polar3D(this.radius,this.phi,this.theta)}}exports.default=Polar3D}
//# sourceMappingURL=module$node_modules$three_nebula$build$esm$math$Polar3D.js.map
