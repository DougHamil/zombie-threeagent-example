{"version":3,"sources":["zombie/scene/player.cljs"],"mappings":";;AAQA,4BAAA,5BAAOA,gEAAOC;AAAd,AACE,YAAA,RAAMC;IACAC,eAAa,KAAAC;uBADnB,nBAEMC;AAFN,AAGE,0BAAA,IAAA,IAAA,lCAAM,AAAYF;;AAClB;AAAA,AAAA,0FAAA,sDAAA,2CAAA,qDAAA,gEAAA,qDAAA,uDAAA,6GAAA,gEAAA,2CAAA,mFAAA,+CAAA,mFAAA,OAAA,WAAA,OAAA,QAAA,QAAA,qBAAA,mFAAA,+CAAA,mFAAA,OAAA,eAAA,mFAAA,8DAAA,2CAAA,sEAAA,8DAAA,mFAAA,IAAA,IAAA,4BAAA,mFAAA,iEAAA,2CAAA,+DAAA,IAAA,8DAAA,KAAA,oFAAA,6DAAA,IAAA,uDAAA,WAAA,qEAAA,mEAAA,KAAA,8DAAA,mFAAA,IAAA,IAAA,oCAAA,mFAAA,+CAAA,mFAAA,gBAAA,WAAA,eAAA,oBAAA,mFAAA,sDAAA,2CAAA,qDAAA,sEAAA,8DAAA,wGAAA,iCAAA,yDAAA,2CAAA,wDAAA,IAAA,mEAAA,zhGAEeF,6IACIC,MAAMA,MAAMA,42BAINC,8jBAIC,wBAAA,vBAAGG,uNAGFH,2wBAITF,wDACEI,kKACKC,yBAAMA;;;AAInC,6BAAA,7BAAMC,kEAAQN;AAAd,AACE,uBAAA,AAAAO,nBAAMC,mCAAkB,iBAAAC,WAAWG;IAAXF,WAAA,sFAAA,HAAwBV;AAAxB,AAAA,oHAAAS,SAAAC,6CAAAD,SAAAC,3KAACC,uDAAAA,0EAAAA;;AAAzB,AAAA,0FAAA,yDAAA,2CAAA,qDAAA,wDAAA,2CAAA,iEAAA,aAAA,wDAAA,2CAAA,yDAAA,cAAA,yDAAA,mCAAA,uDAAA,mCAAA,sDAAA,2CAAA,4EAAA,aAAA,4DAAA,2CAAA,sDAAA,2CAAA,qDAAA,2CAAA,qDAAA,yDAAA,0DAAA,IAAA,6DAAA,2CAAA,sDAAA,MAAA,mEAAA,IAAA,2EAAA,2CAAA,qIAAA,6EAAA,KAAA,2EAAA,mFAAA,IAAA,IAAA,oBAAA,uFAAA,3+DACgBX,gkDAU4Da,kZAGtDL,4GAClBT,0BAAMC","names":["zombie.scene.player/model","id","scale","light-target","js/module$node_modules$three$build$three_module.Object3D","weapon-model-key","zombie.util.math/pi2","zombie.scene.player/render","cljs.core/deref","initial-position","G__10737","G__10738","threeagent.core/cursor","zombie.state.databases/entities","zombie.util.common/physics-layer-player"],"sourcesContent":["(ns zombie.scene.player\r\n  \"The Threeagent component for the player\"\r\n  (:require [threeagent.core :as th]\r\n            [\"three\" :as three]\r\n            [zombie.state.databases :as db]\r\n            [zombie.util.common :refer [physics-layer-player]]\r\n            [zombie.util.math :refer [pi2]]))\r\n\r\n(defn- model [id]\r\n  (let [scale 0.005\r\n        light-target (three/Object3D.)\r\n        weapon-model-key :model/blaster-a]\r\n    (.set (.-position light-target) 0 0.5 2)\r\n    (fn []\r\n      [:model {:type :model/robot\r\n               :id id\r\n               :scale [scale scale scale]\r\n               :animation {}}\r\n       [:> [\"Root\" \"HipsCtrl\" \"Hips\" \"Spine\" \"Chest\" \"UpperChest\"]\r\n        [:> [\"Neck\" \"Head\"]\r\n         [:instance {:object light-target\r\n                     :position [0 0 2]}]\r\n         [:spot-light {:intensity 2.0\r\n                       :distance 20.0\r\n                       :angle (/ pi2 3)\r\n                       :penumbra 0.1\r\n                       :color 0xF7B500\r\n                       :target light-target\r\n                       :cast-shadow true\r\n                       :position [0 0 1]}]]\r\n        [:> [\"RightShoulder\" \"RightArm\" \"RightForeArm\" \"RightHand\"]\r\n         [:model {:id id\r\n                  :type weapon-model-key\r\n                  :rotation [pi2 0 pi2]\r\n                  :weapon {:damage 5\r\n                           :firing-rate 5}}]]]])))\r\n\r\n(defn render [id]\r\n  (let [initial-position @(th/cursor db/entities [id :initial-position])]\r\n    [:object {:id id\r\n              :player {:move-speed 0.12}\r\n              :combat {:health 100}\r\n              :entity {}\r\n              :audio {}\r\n              :input {:receive-events? true}\r\n              :physics {:parts {:hull {:type :circle\r\n                                       :radius 0.5\r\n                                       :settings {:mass 100\r\n                                                  :frictionAir 0.5\r\n                                                  :collisionFilter {:category physics-layer-player}}}}\r\n                        :ignore-rotation? true\r\n                        :position-offset [0.5 0 0.5]}\r\n              :position initial-position}\r\n     [model id]]))\r\n"]}