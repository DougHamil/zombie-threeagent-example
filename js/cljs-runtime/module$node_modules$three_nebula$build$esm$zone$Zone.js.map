{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$zone$Zone.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAAkB,IAAK,EAEvB,KAAIC,UAIJC,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEH,QAASG,GAAX,CAAvC,CAJrB,CAAuBT,OAAA,CAAQ,0DAAR,CAAvB,CAAhB,CAEIW,OAASX,OAAA,CAAQ,uDAAR,CAab,MAAMY,KAAN,CAOEC,WAAW,CAACC,IAAA,CAAOH,MAAOI,CAAAA,kBAAf,CAAmC,CAC5C,IAAKD,CAAAA,IAAL,CAAYA,IACZ,KAAKE,CAAAA,MAAL,CAAc,IAAIT,SAAUD,CAAAA,OAAd,CAAsB,CAAtB;AAAyB,CAAzB,CAA4B,CAA5B,CACd,KAAKW,CAAAA,MAAL,CAAc,CACd,KAAKC,CAAAA,SAAL,CAAiB,MAEjB,KAAKC,CAAAA,gBAAL,CADA,IAAKC,CAAAA,GACL,CADW,CAAA,CALiC,CAS9CC,WAAW,EAAG,CACZ,MAAO,KADK,CAIdC,QAAQ,CAACC,QAAD,CAAW,CACjB,GAAI,CAAC,IAAKJ,CAAAA,gBAAV,CACE,MAAOK,QAAQC,CAAAA,IAAR,CAAa,GAAG,IAAKZ,CAAAA,WAAYa,CAAAA,IAApB,uCAAb,CAGT,QAAQ,IAAKR,CAAAA,SAAb,EACE,KAAK,OAAL,CACE,IAAKS,CAAAA,MAAL,CAAYJ,QAAZ,CAEA,MAEF,MAAK,OAAL,CACE,IAAKK,CAAAA,MAAL,CAAYL,QAAZ,CAEA,MAEF,MAAK,MAAL,CACE,IAAKM,CAAAA,KAAL,CAAWN,QAAX,CAZJ,CALiB,CA6BnBO,SAAS,EAAG,CACV,MAAO,CAAA,CADG,CAUZC,UAAU,EAAG,CACX,MAAO,CAAA,CADI,CAUbC,UAAU,EAAG,CACX,MAAO,CAAA,CADI,CAUbC,WAAW,EAAG,CACZ,MAAO,CAAA,CADK,CAUdC,YAAY,EAAG,CACb,MAAO,CAAA,CADM,CAUfC,YAAY,EAAG,CACb,MAAO,CAAA,CADM,CAWfN,KAAK,CAACN,QAAD,CAAW,EAOhBI,MAAM,CAACJ,QAAD,CAAW,EAOjBK,MAAM,CAACL,QAAD,CAAW,EA5HnB;AAiIArB,OAAQI,CAAAA,OAAR,CAAkBM,IAxJ+F;",
"sources":["node_modules/three-nebula/build/esm/zone/Zone.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$zone$Zone\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Vector3D = _interopRequireDefault(require(\"../math/Vector3D\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A Zone determines the area in 3D space where an emitter's particles can position\n * themselves. They are supplied to both the Position initializer\n * and the CrossZone behaviour.\n *\n * @see {@link '../initialize/Position.js'}\n * @see {@link '../behaviour/CrossZone.js'}\n * @abstract\n */\nclass Zone {\n  /**\n   * Constructs a Zone instance.\n   *\n   * @param {string} type - The zone type\n   * @return void\n   */\n  constructor(type = _types.ZONE_TYPE_ABSTRACT) {\n    this.type = type;\n    this.vector = new _Vector3D.default(0, 0, 0);\n    this.random = 0;\n    this.crossType = 'dead';\n    this.log = true;\n    this.supportsCrossing = true;\n  }\n\n  getPosition() {\n    return null;\n  }\n\n  crossing(particle) {\n    if (!this.supportsCrossing) {\n      return console.warn(`${this.constructor.name} does not support the crossing method`);\n    }\n\n    switch (this.crossType) {\n      case 'bound':\n        this._bound(particle);\n\n        break;\n\n      case 'cross':\n        this._cross(particle);\n\n        break;\n\n      case 'dead':\n        this._dead(particle);\n\n        break;\n    }\n  }\n  /**\n   * Determines if this zone is a BoxZone.\n   *\n   * @return {boolean}\n   */\n\n\n  isBoxZone() {\n    return false;\n  }\n  /**\n   * Determines if this zone is a LineZone.\n   *\n   * @return {boolean}\n   */\n\n\n  isLineZone() {\n    return false;\n  }\n  /**\n   * Determines if this zone is a MeshZone.\n   *\n   * @return {boolean}\n   */\n\n\n  isMeshZone() {\n    return false;\n  }\n  /**\n   * Determines if this zone is a PointZone.\n   *\n   * @return {boolean}\n   */\n\n\n  isPointZone() {\n    return false;\n  }\n  /**\n   * Determines if this zone is a ScreenZone.\n   *\n   * @return {boolean}\n   */\n\n\n  isScreenZone() {\n    return false;\n  }\n  /**\n   * Determines if this zone is a SphereZone.\n   *\n   * @return {boolean}\n   */\n\n\n  isSphereZone() {\n    return false;\n  }\n  /**\n   * Sets the particle's dead property to true if required.\n   *\n   * @param {Particle} particle\n   * @abstract\n   */\n\n\n  _dead(particle) {} //eslint-disable-line\n\n  /**\n   * @abstract\n   */\n\n\n  _bound(particle) {} //eslint-disable-line\n\n  /**\n   * @abstract\n   */\n\n\n  _cross(particle) {} //eslint-disable-line\n\n\n}\n\nexports.default = Zone;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","_Vector3D","_interopRequireDefault","obj","__esModule","_types","Zone","constructor","type","ZONE_TYPE_ABSTRACT","vector","random","crossType","supportsCrossing","log","getPosition","crossing","particle","console","warn","name","_bound","_cross","_dead","isBoxZone","isLineZone","isMeshZone","isPointZone","isScreenZone","isSphereZone"]
}
