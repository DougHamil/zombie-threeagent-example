{"version":3,"sources":["zombie/util/asset_loader.cljs"],"mappings":"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","names":["zombie.util.asset-loader/join-path","base","addition","clojure.string/ends-with?","clojure.string.join","cljs.core.drop_last","clojure.string/starts-with?","cljs.core/rest","zombie.util.asset-loader/leaf?","v","cljs.core/vector?","cljs.core/Keyword","cljs.core/second","zombie.util.asset-loader/find-refs","e","refs","cljs.core/transient","clojure.walk/postwalk","n","cljs.core/meta","cljs.core.conj_BANG_","cljs.core/first","cljs.core/set","cljs.core/persistent!","js/zombie","js/zombie.util","js/zombie.util.asset-loader","js/zombie.util.asset-loader.visit","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","cljs.core.get","fexpr__10537","cljs.core/MultiFn","cljs.core.symbol","zombie.util.asset-loader/visit","_ctx","node","ctx","vec__10538","cljs.core.nth","path","cfg","rest","cljs.core/map?","cljs.core.drop","mw","cljs.core.concat","cljs.core.merge","cljs.core.mapcat","cljs.core.partial","p__10541","vec__10542","key","config","zombie.util.asset-loader/detect-duplicates!","nodes","dupes","cljs.core/group-by","p1__10545#","cljs.core.filter","cljs.core.not_EQ_","cljs.core/count","cljs.core.map","cljs.core/seq","cljs.core.ex_info","p__10546","map__10547","cljs.core/--destructure-map","zombie.util.asset-loader/detect-cycles!*","visited","references","seq__10548","chunk__10549","count__10550","i__10551","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","G__10558","G__10559","G__10560","G__10561","G__10562","G__10563","cljs.core.conj","zombie.util.asset-loader/detect-cycles!","seq__10564","chunk__10565","count__10566","i__10567","vec__10574","vec__10577","_","zombie.util.asset-loader/validate!","cljs.core.into","zombie.util.asset-loader/ref->promise","promises","database","js/Promise.all","p1__10580#","G__10581","G__10582","G__10583","G__10584","zombie.util.asset-loader/get-promise","zombie.util.asset-loader/resolve-config-refs","cljs.core/deref","p__10585","map__10586","loader","middleware","temp__5751__auto__","p","resolved-config","cljs.core.println","data","js/console.log","p__10587","vec__10588","result","cljs.core.reduce","cljs.core.swap_BANG_","cljs.core/assoc","zombie.util.asset-loader/load!","tree","cljs.core/vals","zombie.util.asset-loader/ref","asset-key"],"sourcesContent":["(ns zombie.util.asset-loader\r\n  (:require [clojure.walk :refer [postwalk]]\r\n            [clojure.string :as string]))\r\n\r\n(defn- join-path [base addition]\r\n  (let [base (if (string/ends-with? base \"/\")\r\n               (string/join \"\" (drop-last base))\r\n               base)\r\n        addition (if (string/starts-with? addition \"/\")\r\n                   (string/join \"\" (rest addition))\r\n                   addition)]\r\n    (str base \"/\" addition)))\r\n\r\n(defn- leaf? [v]\r\n  (and (vector? v)\r\n       (keyword? (second v))))\r\n\r\n(defn- find-refs [e]\r\n  (let [refs (transient [])]\r\n    (->> e\r\n         (postwalk (fn [n]\r\n                     (when (:asset-ref (meta n))\r\n                       (conj! refs (first n)))\r\n                     n)))\r\n    (set (persistent! refs))))\r\n\r\n(defmulti visit\r\n  (fn [_ctx node]\r\n    (if (leaf? node)\r\n      :leaf\r\n      :branch)))\r\n\r\n(defmethod visit :branch [ctx node]\r\n  (let [path (join-path (:path ctx) (first node))\r\n        [cfg rest] (if (map? (second node))\r\n                     [(second node) (drop 2 node)]\r\n                     [{} (rest node)])\r\n        ;; Depth-first application of middleware\r\n        mw (concat (:middleware cfg [])\r\n                   (:middleware ctx []))\r\n        ctx (merge ctx\r\n                   cfg\r\n                   {:middleware mw\r\n                    :path path})]\r\n    (mapcat (partial visit ctx) rest)))\r\n        \r\n(defmethod visit :leaf [ctx [path key config]]\r\n  {key {:key key\r\n        :config config\r\n        :middleware (:middleware ctx)\r\n        :references (find-refs config)\r\n        :loader (:loader ctx)\r\n        :path (join-path (:path ctx) path)}})\r\n\r\n(defn- detect-duplicates! [nodes]\r\n  (let [dupes (->> nodes\r\n                   (group-by first)\r\n                   (filter #(not= 1 (count (second %))))\r\n                   (map first))]\r\n    (when (seq dupes)\r\n      (throw (ex-info \"Duplicate asset keys found\" {:duplicate-keys dupes})))))\r\n\r\n(defn- detect-cycles!* [nodes visited {:keys [key references]}]\r\n  (if (visited key)\r\n    (throw (ex-info \"Cycle detected\" {:path visited\r\n                                      :key key}))\r\n    (doseq [n references]\r\n      (detect-cycles!* nodes (conj visited key) (get nodes n)))))\r\n\r\n(defn- detect-cycles! [nodes]\r\n  (doseq [[_ n] nodes]\r\n    (detect-cycles!* nodes #{} n)))\r\n  \r\n(defn- validate! [nodes]\r\n  (detect-duplicates! nodes)\r\n  (detect-cycles! (into {} nodes))\r\n  nodes)\r\n\r\n(declare get-promise)\r\n\r\n(defn- ref->promise [nodes promises database references]\r\n  (js/Promise.all (map\r\n                   #(get-promise nodes promises database (get nodes %))\r\n                   references)))\r\n\r\n(defn- resolve-config-refs [database config]\r\n  (->> config\r\n       (postwalk (fn [n]\r\n                   (if (:asset-ref (meta n))\r\n                     (get @database (first n))\r\n                     n)))))\r\n\r\n(defn- get-promise [nodes promises database {:keys [key path config references loader middleware]}]\r\n  (if-let [p (get @promises key)]\r\n    p\r\n    (let [p (-> (ref->promise nodes promises database references)\r\n                (.then (fn [_]\r\n                         (let [resolved-config (resolve-config-refs database config)]\r\n                           (println \"Loading \" key)\r\n                           (-> (loader key path resolved-config)\r\n                               (.then (fn [data]\r\n                                        (js/console.log \"Loaded\" (str key) data)\r\n                                        [resolved-config data]))))))\r\n                (.then (fn [[resolved-config data]]\r\n                         (let [result (reduce (fn [data mw]\r\n                                                (mw key data resolved-config))\r\n                                              data\r\n                                              middleware)]\r\n                           (swap! database assoc key result)\r\n                           result))))]\r\n      (swap! promises assoc key p)\r\n      p)))\r\n\r\n(defn load! [database tree]\r\n  (let [nodes (->> tree\r\n                   (mapcat (partial visit {:path \"./\" :middleware []}))\r\n                   (validate!)\r\n                   (into {}))\r\n        promises (atom {})]\r\n    (js/Promise.all (->> (vals nodes)\r\n                         (map (partial get-promise nodes promises database))))))\r\n\r\n(defn ref [asset-key]\r\n  ^{:asset-ref true}\r\n  [asset-key])\r\n"]}