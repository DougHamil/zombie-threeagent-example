{"version":3,"sources":["threeagent/impl/entities.cljs"],"mappings":"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","names":["js/threeagent","js/threeagent.impl","js/threeagent.impl.entities","js/threeagent.impl.entities.material-cache","threeagent.impl.entities/material-cache","cljs.core/memoize","threeagent.impl.threejs/mesh-phong-material","threeagent.impl.entities/->material","config","js/module$node_modules$three$build$three_module.Material","cljs.core/PROTOCOL_SENTINEL","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","threeagent.impl.entities/MeshEntity","threeagent.impl.entities/->MeshEntity","geo-fn","_","geo","mat","mesh","js/module$node_modules$three$build$three_module.Mesh","threeagent.impl.entities/default-light-shadow","threeagent.impl.entities/apply-shadow-settings!","light","shadow-cfg","shadow","camera-obj","map-size","cljs.core.merge","camera","or__4212__auto__","threeagent.impl.entities/LightEntity","threeagent.impl.entities/->LightEntity","create-fn","update-fn","cfg","obj","threeagent.impl.entities/apply-props-clj!","properties","seq__9894","cljs.core/seq","chunk__9895","count__9896","i__9897","vec__9904","cljs.core.nth","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__9907","cljs.core/first","cljs.core/next","k","v","goog.object/set","cljs.core/name","threeagent.impl.entities/builtin-entity-types","js/threeagent.impl.entities.t_threeagent$impl$entities9961","threeagent.impl.entities/t_threeagent$impl$entities9961","_9963","meta9962","threeagent.impl.entities/->t_threeagent$impl$entities9961","js/module$node_modules$three$build$three_module.Object3D","js/threeagent.impl.entities.t_threeagent$impl$entities9918","threeagent.impl.entities/t_threeagent$impl$entities9918","_9920","meta9919","threeagent.impl.entities/->t_threeagent$impl$entities9918","js/module$node_modules$three$build$three_module.Group","js/threeagent.impl.entities.t_threeagent$impl$entities9925","threeagent.impl.entities/t_threeagent$impl$entities9925","_9927","meta9926","p__9928","map__9929","cljs.core/--destructure-map","cljs.core.get","threeagent.impl.entities/->t_threeagent$impl$entities9925","object","js/threeagent.impl.entities.t_threeagent$impl$entities9930","threeagent.impl.entities/t_threeagent$impl$entities9930","_9932","meta9931","threeagent.impl.entities/->t_threeagent$impl$entities9930","cam","js/module$node_modules$three$build$three_module.PerspectiveCamera","o","js/threeagent.impl.entities.t_threeagent$impl$entities9968","threeagent.impl.entities/t_threeagent$impl$entities9968","_9970","meta9969","threeagent.impl.entities/->t_threeagent$impl$entities9968","js/module$node_modules$three$build$three_module.OrthographicCamera","p__9933","map__9934","width","height","width-segments","height-segments","js/module$node_modules$three$build$three_module.PlaneGeometry","p__9937","map__9938","depth","depth-segments","js/module$node_modules$three$build$three_module.BoxGeometry","p__9910","map__9911","radius","phi-start","phi-length","theta-start","theta-length","js/module$node_modules$three$build$three_module.SphereGeometry","threeagent.impl.util/pi-times-2","threeagent.impl.util/pi","p__9953","map__9954","radius-top","radius-bottom","radial-segments","open-ended?","js/module$node_modules$three$build$three_module.CylinderGeometry","p__9939","map__9940","segments","js/module$node_modules$three$build$three_module.CircleGeometry","p__9957","map__9958","js/module$node_modules$three$build$three_module.ConeGeometry","p__9966","map__9967","detail","js/module$node_modules$three$build$three_module.DodecahedronGeometry","p__9959","map__9960","js/module$node_modules$three$build$three_module.Icosahedron","p__9941","map__9942","js/module$node_modules$three$build$three_module.Octahedron","p__9964","map__9965","js/module$node_modules$three$build$three_module.TetrahedronGeometry","p__9923","map__9924","inner-radius","outer-radius","theta-segments","phi-segments","js/module$node_modules$three$build$three_module.RingGeometry","p__9949","map__9950","tube","tubular-segments","arc","js/module$node_modules$three$build$three_module.TorusGeometry","p__9935","map__9936","p","q","js/module$node_modules$three$build$three_module.TorusKnotGeometry","p__9955","map__9956","shape","js/module$node_modules$three$build$three_module.ShapeGeometry","p__9951","map__9952","intensity","color","js/module$node_modules$three$build$three_module.AmbientLight","p__9912","map__9913","distance","decay","js/module$node_modules$three$build$three_module.PointLight","p__9921","map__9922","sky-color","ground-color","js/module$node_modules$three$build$three_module.HemisphereLight","clojure.set/rename-keys","p__9914","map__9915","target","js/module$node_modules$three$build$three_module.DirectionalLight","p__9916","map__9917","cljs.core.dissoc","p__9947","map__9948","js/module$node_modules$three$build$three_module.RectAreaLight","p__9943","map__9944","angle","penumbra","js/module$node_modules$three$build$three_module.SpotLight","threeagent.impl.util/pi-over-2","p__9945","map__9946"],"sourcesContent":["(ns threeagent.impl.entities\n  \"Defines all of the built-in IEntityType types.\n  This namespace is meant for internal use only, these functions are subject to change.\"\n  (:require [threeagent.entity :refer [IEntityType IUpdateableEntityType]]\n            [threeagent.impl.threejs :as threejs]\n            [threeagent.impl.util :refer [pi pi-times-2 pi-over-2]]\n            [\"three\" :as three]\n            [clojure.set :refer [rename-keys]]\n            [goog.object :as gobject]))\n            \n\n(defonce ^:private material-cache (memoize threejs/mesh-phong-material))\n\n(defn- ->material [config]\n  (if (instance? three/Material config)\n    config\n    (material-cache config)))\n\n(deftype MeshEntity [geo-fn]\n  IEntityType\n  (create [_ _ config]\n    (let [geo (geo-fn config)\n          mat (->material (:material config))\n          mesh (three/Mesh. geo mat)]\n      (set! (.-castShadow mesh) (:cast-shadow config))\n      (set! (.-receiveShadow mesh) (:receive-shadow config))\n      mesh))\n  (destroy! [_ _ _ _])\n  IUpdateableEntityType\n  (update! [_ _ ^three/Mesh mesh config]\n    (let [geo (geo-fn config)\n          mat (->material (:material config))]\n      (set! (.-geometry mesh) geo)\n      (set! (.-material mesh) mat)\n      (set! (.-castShadow mesh) (:cast-shadow config))\n      (set! (.-receiveShadow mesh) (:receive-shadow config))\n      mesh)))\n\n(def ^:private default-light-shadow {:map-size {:width 512\n                                                :height 512}\n                                     :focus 1.0\n                                     :camera {:near 0.5\n                                              :far 500\n                                              :left -5\n                                              :right 5\n                                              :top 5\n                                              :bottom -5}})\n\n(defn- apply-shadow-settings! [light shadow-cfg]\n  (when shadow-cfg\n    (let [shadow (.-shadow light)\n          camera-obj (.-camera shadow)\n          map-size (merge (:map-size default-light-shadow)\n                          (:map-size shadow-cfg))\n          camera (merge (:camera default-light-shadow)\n                        (:camera shadow-cfg))]\n      (set! (.-width (.-mapSize shadow)) (:width map-size))\n      (set! (.-height (.-mapSize shadow)) (:height map-size))\n      (set! (.-near camera-obj) (:near camera))\n      (set! (.-far camera-obj) (:far camera))\n      (set! (.-left camera-obj) (:left camera))\n      (set! (.-right camera-obj) (:right camera))\n      (set! (.-top camera-obj) (:top camera))\n      (set! (.-bottom camera-obj) (:bottom camera))\n      (set! (.-focus shadow) (or (:focus shadow-cfg)\n                                 (:focus default-light-shadow)))\n      (.updateProjectionMatrix camera-obj)))\n  light)\n\n(deftype LightEntity [create-fn update-fn]\n  IEntityType\n  (create [_ _ cfg]\n    (let [light (create-fn cfg)]\n      (set! (.-castShadow light) (:cast-shadow cfg))\n      (set! (.-receiveShadow light) (:receive-shadow cfg))\n      (apply-shadow-settings! light (:shadow cfg))))\n  (destroy! [_ _ _ _])\n  IUpdateableEntityType\n  (update! [_ _ ^three/Light obj cfg]\n    (update-fn obj cfg)\n    (set! (.-castShadow obj) (:cast-shadow cfg))\n    (set! (.-receiveShadow obj) (:receive-shadow cfg))\n    (apply-shadow-settings! obj (:shadow cfg))))\n\n(defn- apply-props-clj! [^js obj properties]\n  (doseq [[k v] properties]\n    (gobject/set obj (name k) v))\n  obj)\n\n(def builtin-entity-types\n  {;; Common\n   :object (reify IEntityType\n             (create [_ _ _] (three/Object3D.))\n             (destroy! [_ _ _ _])\n             IUpdateableEntityType\n             (update! [_ _ obj _] obj))\n   :group (reify IEntityType\n            (create [_ _ _] (three/Group.))\n            (destroy! [_ _ _ _])\n            IUpdateableEntityType\n            (update! [_ _ obj _] obj))\n   :instance (reify IEntityType\n               (create [_ _ {:keys [object]}]\n                 object)\n               (destroy! [_ _ _ _]))\n\n   ;; Cameras\n   :perspective-camera (reify IEntityType\n                         (create [_ _ cfg]\n                           (let [cam (three/PerspectiveCamera. 75.0 1.0 0.1 2000.0)]\n                             (set! (.-active cam) true)\n                             (apply-props-clj! cam cfg)\n                             (.updateProjectionMatrix cam)\n                             cam))\n                         (destroy! [_ _ _ _])\n                         IUpdateableEntityType\n                         (update! [_ _ ^three/PerspectiveCamera o cfg]\n                           (apply-props-clj! o cfg)\n                           (.updateProjectionMatrix o)\n                           o))\n   :orthographic-camera (reify IEntityType\n                          (create [_ _ cfg]\n                            (let [cam (three/OrthographicCamera. -1 1 1 -1 0.1 2000.0)]\n                              (set! (.-active cam) true)\n                              (apply-props-clj! cam cfg)\n                              (.updateProjectionMatrix cam)\n                              cam))\n                          (destroy! [_ _ _ _])\n                          IUpdateableEntityType\n                          (update! [_ _ ^three/OrthographicCamera o cfg]\n                            (apply-props-clj! o cfg)\n                            (.updateProjectionMatrix o)\n                            o))\n   ;; Primitives\n   :plane (->MeshEntity (fn [{:keys [width height width-segments height-segments]}]\n                          (three/PlaneGeometry. (or width 1)\n                                                (or height 1)\n                                                (or width-segments 1)\n                                                (or height-segments 1))))\n   :box (->MeshEntity (fn [{:keys [width height depth width-segments height-segments depth-segments]}]\n                        (three/BoxGeometry. (or width 1)\n                                            (or height 1)\n                                            (or depth 1)\n                                            (or width-segments 1)\n                                            (or height-segments 1)\n                                            (or depth-segments 1))))\n   :sphere (->MeshEntity (fn [{:keys [radius width-segments height-segments phi-start\n                                      phi-length theta-start theta-length]}]\n                           (three/SphereGeometry. (or radius 1)\n                                                  (or width-segments 8)\n                                                  (or height-segments 6)\n                                                  (or phi-start 0)\n                                                  (or phi-length pi-times-2)\n                                                  (or theta-start 0)\n                                                  (or theta-length pi))))\n   :cylinder (->MeshEntity (fn [{:keys [radius-top radius-bottom height radial-segments\n                                        height-segments open-ended? theta-start theta-length]}]\n                             (three/CylinderGeometry. (or radius-top 1)\n                                                      (or radius-bottom 1)\n                                                      (or height 1)\n                                                      (or radial-segments 8)\n                                                      (or height-segments 1)\n                                                      open-ended?\n                                                      (or theta-start 0)\n                                                      (or theta-length pi-times-2))))\n   :circle (->MeshEntity (fn [{:keys [radius segments theta-start theta-length]}]\n                           (three/CircleGeometry. (or radius 1)\n                                                  (or segments 8)\n                                                  (or theta-start 0)\n                                                  (or theta-length pi-times-2))))\n   :cone (->MeshEntity (fn [{:keys [radius height radial-segments height-segments open-ended?\n                                    theta-start theta-length]}]\n                         (three/ConeGeometry. (or radius 1)\n                                              (or height 1)\n                                              (or radial-segments 8)\n                                              (or height-segments 1)\n                                              open-ended?\n                                              (or theta-start 0)\n                                              (or theta-length pi-times-2))))\n   :dodecahedron (->MeshEntity (fn [{:keys [radius detail]}]\n                                 (three/DodecahedronGeometry. (or radius 1)\n                                                              (or detail 0))))\n   :icosahedron (->MeshEntity (fn [{:keys [radius detail]}]\n                                (three/Icosahedron. (or radius 1)\n                                                    (or detail 0))))\n   :octahedron (->MeshEntity (fn [{:keys [radius detail]}]\n                               (three/Octahedron. (or radius 1)\n                                                  (or detail 0))))\n   :tetrahedron (->MeshEntity (fn [{:keys [radius detail]}]\n                                (three/TetrahedronGeometry. (or radius 1)\n                                                            (or detail 0))))\n   :ring (->MeshEntity (fn [{:keys [inner-radius outer-radius theta-segments phi-segments\n                                    theta-start theta-length]}]\n                         (three/RingGeometry. (or inner-radius 0.5)\n                                              (or outer-radius 1.0)\n                                              (or theta-segments 8)\n                                              (or phi-segments 8)\n                                              (or theta-start 0)\n                                              (or theta-length pi-times-2))))\n   :torus (->MeshEntity (fn [{:keys [radius tube radial-segments tubular-segments arc]}]\n                          (three/TorusGeometry. (or radius 1)\n                                                (or tube 0.4)\n                                                (or radial-segments 8)\n                                                (or tubular-segments 6)\n                                                (or arc pi-times-2))))\n   :torus-knot (->MeshEntity (fn [{:keys [radius tube tubular-segments radial-segments p q]}]\n                               (three/TorusKnotGeometry. (or radius 1)\n                                                         (or tube 0.4)\n                                                         (or tubular-segments 64)\n                                                         (or radial-segments 8)\n                                                         (or p 2)\n                                                         (or q 3))))\n   :shape (->MeshEntity (fn [{:keys [shape]}]\n                          (three/ShapeGeometry. shape)))\n   ;; Lights\n   :ambient-light (->LightEntity\n                   (fn [{:keys [intensity color]}]\n                     (three/AmbientLight. (or color 0xFFFFFF)\n                                          (or intensity 1.0)))\n                   (fn [^three/Light o cfg]\n                     (apply-props-clj! o cfg)\n                     o))\n   :point-light (->LightEntity\n                 (fn [{:keys [intensity color distance decay]}]\n                   (three/PointLight. (or color 0xFFFFFF)\n                                      (or intensity 1.0)\n                                      (or distance 0)\n                                      (or decay 1.0)))\n                 (fn [^three/Light o cfg]\n                   (apply-props-clj! o cfg)\n                   o))\n   :hemisphere-light (->LightEntity\n                      (fn [{:keys [sky-color ground-color intensity]}]\n                        (three/HemisphereLight.\n                         (or sky-color 0xFFFFFF)\n                         (or ground-color 0xFFFFFF)\n                         (or intensity 1)))\n                      (fn [^three/Light o cfg]\n                        (apply-props-clj! o (rename-keys cfg {:sky-color :skyColor\n                                                              :ground-color :groundColor}))\n                        o))\n   :directional-light (->LightEntity\n                       (fn [{:keys [intensity color target]}]\n                         (let [light (three/DirectionalLight. (or color 0xFFFFFF)\n                                                              (or intensity 1.0))]\n                           (set! (.-originalTarget light) (.-target light))\n                           (when target\n                             (set! (.-target light) target))\n                           light))\n                       (fn [^three/Light o {:keys [target] :as cfg}]\n                         (if target\n                           (set! (.-target o) target)\n                           (set! (.-target o) (.-originalTarget o)))\n                         (apply-props-clj! o (dissoc cfg :target))\n                         o))\n   :rect-area-light (->LightEntity\n                     (fn [{:keys [intensity color width height]}]\n                       (three/RectAreaLight. (or color 0xFFFFFF)\n                                             (or intensity 1.0)\n                                             (or width 10)\n                                             (or height 10)))\n                     (fn [^three/Light o cfg]\n                       (apply-props-clj! o cfg)\n                       o))\n   :spot-light (->LightEntity\n                (fn [{:keys [intensity color distance angle penumbra decay target]}]\n                  (let [light (three/SpotLight. (or color 0xFFFFFF)\n                                                (or intensity 1.0)\n                                                (or distance 0)\n                                                (or angle pi-over-2)\n                                                (or penumbra 0)\n                                                (or decay 1.0))]\n                    (set! (.-originalTarget light) (.-target light))\n                    (when target\n                      (set! (.-target light) target))\n                    light))\n                (fn [^three/Light o {:keys [target] :as cfg}]\n                  (if target\n                    (set! (.-target o) target)\n                    (set! (.-target o) (.-originalTarget o)))\n                  (apply-props-clj! o (dissoc cfg :target))\n                  o))})\n                                        \n                                  \n"]}