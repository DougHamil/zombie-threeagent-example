{"version":3,"sources":["malli/sci.cljc"],"mappings":";AAGA,sBAAA,tBAAMA,oDAAWC,QAAQC;AAAzB,AACE,IAAMC,oBAAa,KAAAC,0BAAA;AAAA,AAAA,GAAA,QAAAC,gCAAAC,qCAAAC;AAAoBO;;AAApB,IAAAN,qBAAA,AAAAC,eAAA,2CAAA,4DAAA,aAAA;AAAA,AAAA,oBAAAD;AAAA,IAAAE,mBAAAF;AAAA,AAAA,OAAAG,cAAAD;;AAAA,MAAA,KAAAE,MAAA,CAAA,mDAAA,AAAA,yFAAA,oBAAA,AAAAC,oBAAA,AAAA,yFAAA;;;GAAA;IACbE,OAAK,KAAAX,0BAAA;AAAA,AAAA,GAAA,QAAAC,gCAAAC,qCAAAU;AAAoBC;;AAApB,IAAAT,qBAAA,AAAAC,eAAA,2CAAA,4DAAA,aAAA;AAAA,AAAA,oBAAAD;AAAA,IAAAE,mBAAAF;AAAA,AAAA,OAAAG,cAAAD;;AAAA,MAAA,KAAAE,MAAA,CAAA,mDAAA,AAAA,yEAAA,oBAAA,AAAAC,oBAAA,AAAA,yEAAA;;;GAAA;IACLK,OAAK,KAAAd,0BAAA;AAAA,AAAA,GAAA,QAAAC,gCAAAC,qCAAAa;AAAoBC;;AAApB,IAAAZ,qBAAA,AAAAC,eAAA,2CAAA,4DAAA,aAAA;AAAA,AAAA,oBAAAD;AAAA,IAAAE,mBAAAF;AAAA,AAAA,OAAAG,cAAAD;;AAAA,MAAA,KAAAE,MAAA,CAAA,mDAAA,AAAA,0EAAA,oBAAA,AAAAC,oBAAA,AAAA,0EAAA;;;GAAA;AAFX,AAGE;AAAA,AAAO,oBAAI,iBAAAQ,oBAAA,AAAAC,gBAAMnB;AAAN,AAAA,oBAAAkB;AAAA,IAAAA,wBAAA,AAAAC,gBAAoBP;AAApB,AAAA,oBAAAM;AAAA,OAAAC,gBAA0BJ;;AAA1BG;;;AAAAA;;;AACF,IAAME,MAAI,CAACR,qCAAAA,8CAAAA,XAAKd,0BAAAA;AAAhB,AACE,4CAAUuB;AAAV,AAAa,IAAAC,WAAc,CAACP,qCAAAA,0CAAAA,PAAKK,sBAAAA;IAApBG,WAAyB,4CAAKF;AAA9B,AAAA,0GAAAC,SAAAC,wCAAAD,SAAAC,5JAACvB,kDAAAA,qEAAAA;;;AAChBD","names":["malli.sci/evaluator","options","fail!","eval-string*","borkdude.dynaload/LazyVar","js/sci","js/sci.core","js/sci.core.eval-string*","temp__5751__auto__","cljs.core/find","e__11071__auto__","cljs.core/val","js/Error","cljs.core/namespace","sci.core/eval-string*","init","js/sci.core.init","sci.core/init","fork","js/sci.core.fork","sci.core/fork","and__4210__auto__","cljs.core/deref","ctx","s","G__11129","G__11130"],"sourcesContent":["(ns malli.sci\n  (:require [borkdude.dynaload :as dynaload]))\n\n(defn evaluator [options fail!]\n  (let [eval-string* (dynaload/dynaload 'sci.core/eval-string* {:default nil})\n        init (dynaload/dynaload 'sci.core/init {:default nil})\n        fork (dynaload/dynaload 'sci.core/fork {:default nil})]\n    (fn [] (if (and @eval-string* @init @fork)\n             (let [ctx (init options)]\n               (fn eval [s] (eval-string* (fork ctx) (str s))))\n             fail!))))\n"]}