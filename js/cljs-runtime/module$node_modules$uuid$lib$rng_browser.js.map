{
"version":3,
"file":"module$node_modules$uuid$lib$rng_browser.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,wCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQrG,IAAIC,gBAAqC,WAArCA,EAAmB,MAAOC,OAA1BD,EAAoDC,MAAOD,CAAAA,eAA3DA,EAA8EC,MAAOD,CAAAA,eAAgBE,CAAAA,IAAvB,CAA4BD,MAA5B,CAA9ED,EACuC,WADvCA,EACmB,MAAOG,SAD1BH,EACgG,UADhGA,EACsD,MAAOI,OAAOD,CAAAA,QAASH,CAAAA,eAD7EA,EAC8GG,QAASH,CAAAA,eAAgBE,CAAAA,IAAzB,CAA8BC,QAA9B,CAElH,IAAIH,eAAJ,CAAqB,CAEnB,IAAIK,MAAQ,IAAIC,UAAJ,CAAe,EAAf,CAEZR,OAAOC,CAAAA,OAAP,CAAiBQ,QAAkB,EAAG,CACpCP,eAAA,CAAgBK,KAAhB,CACA,OAAOA,MAF6B,CAJnB,CAArB,IAQO,CAKL,IAAIG,KAAWC,KAAJ,CAAU,EAAV,CAEXX,OAAOC,CAAAA,OAAP,CAAiBQ,QAAgB,EAAG,CAClC,IADkC,IACzBG,EAAI,CADqB;AAClBC,CAAhB,CAAuB,EAAvB,CAAmBD,CAAnB,CAA2BA,CAAA,EAA3B,CACqB,CACnB,IADKA,CACL,CADS,CACT,IADsBC,CACtB,CAD0C,UAC1C,CAD0BC,IAAKC,CAAAA,MAAL,EAC1B,EAAAL,IAAA,CAAKE,CAAL,CAAA,CAAUC,CAAV,KAAkBD,CAAlB,CAAsB,CAAtB,GAA+B,CAA/B,EAAoC,GAGtC,OAAOF,KAN2B,CAP/B,CAnB8F;",
"sources":["node_modules/uuid/lib/rng-browser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$uuid$lib$rng_browser\"] = function(global,require,module,exports) {\n// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","getRandomValues","crypto","bind","msCrypto","window","rnds8","Uint8Array","module.exports","rnds","Array","i","r","Math","random"]
}
