{"version":3,"sources":["zombie/scene/system/physics/core.cljs"],"mappings":"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","names":["js/zombie","js/zombie.scene","js/zombie.scene.system","js/zombie.scene.system.physics","js/zombie.scene.system.physics.core","js/zombie.scene.system.physics.core.m-v1","zombie.scene.system.physics.core/m-v1","js/module$node_modules$matter_js$build$matter.Vector","js/zombie.scene.system.physics.core.up","zombie.scene.system.physics.core/up","js/module$node_modules$three$build$three_module.Vector3","js/zombie.scene.system.physics.core.v1","zombie.scene.system.physics.core/v1","js/zombie.scene.system.physics.core.physics-scale","zombie.scene.system.physics.core/physics-scale","p__13138","vec__13139","cljs.core.nth","zombie.scene.system.physics.core/tuple->world-position","x","_","z","cljs.core/clj->js","zombie.scene.system.physics.core/physics-vec->vector3","y","v","p__13142","vec__13143","zombie.scene.system.physics.core/tuple->into-physics-vec","zombie.scene.system.physics.core/update-transforms!","local-state","entities","cljs.core/deref","seq__13146","cljs.core/seq","chunk__13147","count__13148","i__13149","vec__13158","map__13161","cljs.core/--destructure-map","cljs.core.get","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__13162","cljs.core/first","map__13165","cljs.core/next","object","body","angle-offset","ignore-rotation?","body-pos","parent","wx","wz","world-pos","local-pos","angle","zombie.scene.system.physics.core/apply-movement!","seq__13166","chunk__13167","count__13168","i__13169","vec__13178","map__13181","vec__13182","map__13185","velocity","js/module$node_modules$matter_js$build$matter.Body","zombie.scene.system.physics.core/register-body!","obj","entity-id","body-def","map__13186","world","result","zombie.scene.system.physics.body/create-body","js/module$node_modules$matter_js$build$matter.Composite","zombie.scene.system.physics.core/unregister-body!","zombie.scene.system.physics.core/collision->map","y-pos","ray-start","collision","hit-point","start-point","distance","zombie.util.threejs/vector3->tuple","zombie.scene.system.physics.core/on-disable!","_payload","zombie.scene.system.physics.core/on-set-velocity!","entity-obj","cljs.core.swap_BANG_","cljs.core/assoc-in","p__13187","vec__13188","zombie.scene.system.physics.core/on-apply-impulse!","ix","iz","zombie.scene.system.physics.core/register-listeners!","bus","zombie.util.messaging/on","cljs.core.partial","zombie.scene.system.physics.core/on-collision-start","event","seq__13191","chunk__13192","count__13193","i__13194","p","a","b","cb","zombie$scene$system$physics$core$IPhysicsSystem$raycast_all$dyn","x__4509__auto__","m__4510__auto__","zombie.scene.system.physics.core/raycast-all","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","zombie.scene.system.physics.core/IPhysicsSystem","this","ray-end","cljs.core/PROTOCOL_SENTINEL","p__13196","map__13197","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","zombie.scene.system.physics.core/PhysicsSystem","zombie.scene.system.physics.core/->PhysicsSystem","delta-history","map__13195","bodies","cljs.core/second","hits","js/module$node_modules$matter_js$build$matter.Query","js/module$zombie$scene$system$physics$raycast.raycast","cljs.core.map","cljs.core.sort_by","engine","js/module$node_modules$matter_js$build$matter.Engine","runner","js/module$node_modules$matter_js$build$matter.Runner","render","js/module$node_modules$matter_js$build$matter.Render","zombie.state.databases/ui","js/module$node_modules$matter_js$build$matter.Events","cljs.core/assoc","parts","position-offset","map__13198","_cfg","cljs.core.get_in","medley.core/dissoc-in","_delta-time","zombie.scene.system.physics.core/create","event-bus","cljs.core.atom"],"sourcesContent":["(ns zombie.scene.system.physics.core\r\n  (:require [\"three\" :as three]\r\n            [medley.core :refer [dissoc-in]]\r\n            [\"matter-js\" :refer [Engine Composite Body Vector Render Query Runner Events]]\r\n            [\"./raycast\" :refer [raycast]]\r\n            [threeagent.system :refer [ISystem]]\r\n            [zombie.util.threejs :refer [vector3->tuple]]\r\n            [zombie.util.messaging :as message]\r\n            [zombie.state.databases :as db]\r\n            [zombie.scene.system.physics.body :as bodies]))\r\n\r\n(defonce ^:private m-v1 ^Vector (.create Vector 0 0))\r\n(defonce ^:private up (three/Vector3. 0 1 0))\r\n(defonce ^:private v1 (three/Vector3. 0 0 0))\r\n\r\n;; Scale up the physics world by 10\r\n;; because sizes less than 1 cause instability\r\n(defonce ^:private physics-scale 10.0)\r\n\r\n;; Util\r\n(defn- tuple->world-position [[x _ z]]\r\n  (clj->js {:x (* x physics-scale)\r\n            :y (* z physics-scale)}))\r\n\r\n(defn- physics-vec->vector3 [y ^js v]\r\n  (three/Vector3. (/ (.-x v) physics-scale)\r\n                  y\r\n                  (/ (.-y v) physics-scale)))\r\n\r\n(defn- tuple->into-physics-vec [[x _ z] ^Vector v]\r\n  (set! (.-x v) x)\r\n  (set! (.-y v) z)\r\n  v)\r\n\r\n;; Logic\r\n(defn- update-transforms! [local-state]\r\n  (let [entities (:objects @local-state)]\r\n    (doseq [[object {:keys [body\r\n                            angle-offset\r\n                            ignore-rotation?]}] entities]\r\n      (let [body-pos ^Vector (.-position body)\r\n            parent ^three/Object3D (.-parent object)\r\n            wx (/ (.-x body-pos)\r\n                  physics-scale)\r\n            wz (/ (.-y body-pos)\r\n                  physics-scale)\r\n            world-pos (.set v1 wx 0 wz)\r\n            local-pos (.worldToLocal parent world-pos)]\r\n        (.setX (.-position object) (.-x local-pos))\r\n        (.setZ (.-position object) (.-z local-pos)))\r\n      (when-not ignore-rotation?\r\n        (let [angle (- (.-angle body)\r\n                       angle-offset)]\r\n          (.setRotationFromAxisAngle object up angle))))))\r\n\r\n(defn- apply-movement! [local-state]\r\n  (doseq [[_ {:keys [body velocity]}] (:objects @local-state)]\r\n    (when velocity\r\n      (let [v velocity]\r\n        (.applyForce Body body (.-position body) (tuple->into-physics-vec v m-v1))))))\r\n\r\n(defn- register-body! [local-state ^three/Object3D obj entity-id body-def]\r\n  (let [world (:world @local-state)\r\n        {:keys [^Body body]\r\n         :as result} (bodies/create-body physics-scale obj body-def)]\r\n    (set! (.-entityId body) entity-id)\r\n    (.add Composite world body)\r\n    result))\r\n\r\n(defn- unregister-body! [local-state body]\r\n  (when body\r\n    (let [world (:world @local-state)]\r\n      (.remove Composite world body))))\r\n\r\n\r\n(defn- collision->map [y-pos ^js ray-start ^js collision]\r\n  (let [hit-point (physics-vec->vector3 0 (.-point collision))\r\n        start-point (physics-vec->vector3 0 ray-start)\r\n        distance (-> start-point\r\n                     (.sub hit-point)\r\n                     (.length))]\r\n    {:entity-id (-> collision\r\n                    (.-body)\r\n                    (.-entityId))\r\n     :hit-normal (vector3->tuple (.normalize (physics-vec->vector3 0 (.-normal collision))))\r\n     :distance distance\r\n     :hit-position (vector3->tuple (physics-vec->vector3 y-pos (.-point collision)))}))\r\n                              \r\n(defn- on-disable! [local-state body _payload]\r\n  (unregister-body! local-state body))\r\n\r\n(defn- on-set-velocity! [local-state entity-obj velocity]\r\n  (swap! local-state assoc-in [:objects entity-obj :velocity] velocity))\r\n\r\n(defn- on-apply-impulse! [body [ix _ iz]]\r\n  (.applyForce Body body (.-position body) (clj->js {:x ix :y iz})))\r\n\r\n(defn- register-listeners! [bus local-state entity-id obj body]\r\n  (message/on bus entity-id :physics/disable (partial on-disable! local-state body))\r\n  (message/on bus entity-id :physics/set-velocity (partial on-set-velocity! local-state obj))\r\n  (message/on bus entity-id :physics/apply-force (partial on-apply-impulse! body)))\r\n\r\n(defn- on-collision-start [^js event]\r\n  (doseq [p (.-pairs event)]\r\n    (let [a ^Body (.-bodyA p)\r\n          b ^Body (.-bodyB p)]\r\n      (when-let [cb ^js (.-onCollisionStart a)]\r\n        (cb))\r\n      (when-let [cb ^js (.-onCollisionStart b)]\r\n        (cb)))))\r\n  \r\n(defprotocol IPhysicsSystem\r\n  (raycast-all [this ray-start ray-end]))\r\n\r\n(deftype PhysicsSystem [bus local-state ^js/Array delta-history]\r\n  IPhysicsSystem\r\n  (raycast-all [_ ray-start ray-end]\r\n    (let [{:keys [world]} @local-state\r\n          bodies (.allBodies Composite world)\r\n          y-pos (second ray-start)\r\n          ray-start (tuple->world-position ray-start)\r\n          ray-end (tuple->world-position ray-end)\r\n          hits (-> (.ray Query bodies ray-start ray-end)\r\n                   (raycast ray-start ray-end))]\r\n      (->> hits\r\n           (map (partial collision->map y-pos ray-start))\r\n           (sort-by :depth))))\r\n  ISystem\r\n  (init [_ _]\r\n    (let [engine (.create Engine (clj->js {:gravity {:x 0 :y 0}}))\r\n          runner (.create Runner)\r\n          render (.create Render (clj->js {:canvas (:physics-debug-canvas @db/ui)\r\n                                           :engine engine\r\n                                           :options {:showDebug true\r\n                                                     :width 400\r\n                                                     :height 400\r\n                                                     :pixelRatio \"auto\"\r\n                                                     :showConvexHulls true\r\n                                                     :showVelocity true}}))\r\n          world (.-world engine)]\r\n      ;; MatterJS.Runner handles delta-smoothing for us\r\n      (.on Events runner \"beforeUpdate\" #(apply-movement! local-state))\r\n      (.on Events runner \"afterUpdate\" #(do\r\n                                          (.lookAt Render render (.allBodies Composite world))\r\n                                          (update-transforms! local-state)))\r\n      (.on Events engine \"collisionStart\" on-collision-start)\r\n      (.run Runner runner engine)\r\n      (.run Render render)\r\n      (swap! local-state assoc\r\n             :render render\r\n             :runner runner\r\n             :engine engine\r\n             :world world\r\n             :objects {}\r\n             :entities {})))\r\n  (destroy [_ _]\r\n    (.stop Runner (:runner @local-state))\r\n    (.stop Render (:render @local-state)))\r\n  (on-entity-added [_ _ entity-id obj {:keys [parts ignore-rotation? position-offset]}]\r\n    (let [{:keys [body angle-offset]} (register-body! local-state obj entity-id parts)]\r\n      (swap! local-state assoc-in [:objects obj] {:entity-id entity-id\r\n                                                  :ignore-rotation? ignore-rotation?\r\n                                                  :angle-offset angle-offset\r\n                                                  :position-offset position-offset\r\n                                                  :body body})\r\n      (when entity-id\r\n        (register-listeners! bus local-state entity-id obj body))))\r\n  (on-entity-removed [_ _ _ obj _cfg]\r\n    (let [body (get-in @local-state [:objects obj :body])]\r\n      (unregister-body! local-state body)\r\n      (swap! local-state dissoc-in [:objects obj])))\r\n  (tick [_ _delta-time]))\r\n\r\n(defn create [event-bus]\r\n  (->PhysicsSystem event-bus (atom {}) (array)))\r\n"]}