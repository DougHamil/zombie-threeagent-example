{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$initializer$Rate.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAAkB,IAAK,EAEvB,KAAIC,WAAaP,OAAA,CAAQ,kEAAR,CAAjB,CAEIQ,MAAQR,OAAA,CAAQ,uDAAR,CAERS,OAAAA,CAIJC,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEL,QAASK,GAAX,CAAvC,CAJlB,CAAuBX,OAAA,CAAQ,oEAAR,CAAvB,CAEnB;IAAIa,OAASb,OAAA,CAAQ,8DAAR,CAYb,MAAMc,KAAN,QAAmBL,OAAaH,CAAAA,OAAhC,CAQES,WAAW,CAACC,MAAA,CAAST,UAAWU,CAAAA,oBAArB,CAA2CC,OAAA,CAAUX,UAAWY,CAAAA,qBAAhE,CAAuF,CAChG,KAAA,CAAMN,MAAOO,CAAAA,qBAAb,CAMA,KAAKJ,CAAAA,MAAL,CAAc,CAAC,CAAA,CAAGR,KAAMa,CAAAA,UAAV,EAAsBL,MAAtB,CAMd,KAAKE,CAAAA,OAAL,CAAe,CAAC,CAAA,CAAGV,KAAMa,CAAAA,UAAV,EAAsBH,OAAtB,CAYf,KAAKI,CAAAA,QAAL,CANA,IAAKC,CAAAA,SAML,CANiB,CAOjB,KAAKC,CAAAA,IAAL,EA1BgG,CAmClGA,IAAI,EAAG,CACL,IAAKD,CAAAA,SAAL,CAAiB,CACjB,KAAKD,CAAAA,QAAL,CAAgB,IAAKJ,CAAAA,OAAQO,CAAAA,QAAb,EAFX,CAYPA,QAAQ,CAACC,IAAD,CAAO,CACb,IAAKH,CAAAA,SAAL,EAAkBG,IAElB,IAAI,IAAKH,CAAAA,SAAT,EAAsB,IAAKD,CAAAA,QAA3B,CAGE,GAFA,IAAKE,CAAAA,IAAL,EAEI;AAAiB,CAAjB,EAAA,IAAKR,CAAAA,MAAOW,CAAAA,CAAhB,CACE,IAAoC,EAApC,CAAI,IAAKX,CAAAA,MAAOS,CAAAA,QAAZ,CAAqB,OAArB,CAAJ,CAAyC,MAAO,EAAhD,CADF,IAGE,OAAO,KAAKT,CAAAA,MAAOS,CAAAA,QAAZ,CAAqB,KAArB,CAIX,OAAO,EAbM,CA2BRG,eAAQ,CAACC,IAAD,CAAO,CACpB,MAAM,CACJC,YADI,CAEJC,YAFI,CAGJC,YAHI,CAIJC,YAJI,CAAA,CAKFJ,IACJ,OAAO,KAAIf,IAAJ,CAAS,IAAIN,KAAM0B,CAAAA,IAAV,CAAeJ,YAAf,CAA6BC,YAA7B,CAAT,CAAqD,IAAIvB,KAAM0B,CAAAA,IAAV,CAAeF,YAAf,CAA6BC,YAA7B,CAArD,CAPa,CAlFxB,CA8FA/B,OAAQI,CAAAA,OAAR,CAAkBQ,IAxHsG;",
"sources":["node_modules/three-nebula/build/esm/initializer/Rate.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$initializer$Rate\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"./constants\");\n\nvar _math = require(\"../math\");\n\nvar _Initializer = _interopRequireDefault(require(\"./Initializer\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Calculates the rate of particle emission.\n *\n * NOTE This doesn't need to be an initializer, it doesn't have an initialize\n * method, it overrides the base init method and it is only relevent to the Emitter class.\n * It would be better to move this to the Emitter module itself as a standalone class.\n *\n */\nclass Rate extends _Initializer.default {\n  /**\n   * Constructs a Rate instance.\n   *\n   * @param {number|array|Span} numPan - The number of particles to emit\n   * @param {number|array|Span} timePan - The time between each particle emission\n   * @return void\n   */\n  constructor(numPan = _constants.DEFAULT_RATE_NUM_PAN, timePan = _constants.DEFAULT_RATE_TIME_PAN) {\n    super(_types.INITIALIZER_TYPE_RATE);\n    /**\n     * @desc Sets the number of particles to emit.\n     * @type {Span}\n     */\n\n    this.numPan = (0, _math.createSpan)(numPan);\n    /**\n     * @desc Sets the time between each particle emission.\n     * @type {Span}\n     */\n\n    this.timePan = (0, _math.createSpan)(timePan);\n    /**\n     * @desc The rate's start time.\n     * @type {number}\n     */\n\n    this.startTime = 0;\n    /**\n     * @desc The rate's next time.\n     * @type {number}\n     */\n\n    this.nextTime = 0;\n    this.init();\n  }\n  /**\n   * Sets the startTime and nextTime properties.\n   *\n   * @return void\n   */\n\n\n  init() {\n    this.startTime = 0;\n    this.nextTime = this.timePan.getValue();\n  }\n  /**\n   * Gets the number of particles to emit.\n   *\n   * @param {number} time - Current particle engine time\n   * @return {number}\n   */\n\n\n  getValue(time) {\n    this.startTime += time;\n\n    if (this.startTime >= this.nextTime) {\n      this.init();\n\n      if (this.numPan.b == 1) {\n        if (this.numPan.getValue('Float') > 0.5) return 1;else return 0;\n      } else {\n        return this.numPan.getValue('Int');\n      }\n    }\n\n    return 0;\n  }\n  /**\n   * Creates a Rate initializer from JSON.\n   *\n   * @param {object} json - The JSON to construct the instance from.\n   * @property {number} json.particlesMin - The minimum number of particles to emit\n   * @property {number} json.particlesMax - The maximum number of particles to emit\n   * @property {number} json.perSecondMin - The minimum per second emit rate\n   * @property {number} json.perSecondMax - The maximum per second emit rate\n   * @return {Rate}\n   */\n\n\n  static fromJSON(json) {\n    const {\n      particlesMin,\n      particlesMax,\n      perSecondMin,\n      perSecondMax\n    } = json;\n    return new Rate(new _math.Span(particlesMin, particlesMax), new _math.Span(perSecondMin, perSecondMax));\n  }\n\n}\n\nexports.default = Rate;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","_constants","_math","_Initializer","_interopRequireDefault","obj","__esModule","_types","Rate","constructor","numPan","DEFAULT_RATE_NUM_PAN","timePan","DEFAULT_RATE_TIME_PAN","INITIALIZER_TYPE_RATE","createSpan","nextTime","startTime","init","getValue","time","b","fromJSON","json","particlesMin","particlesMax","perSecondMin","perSecondMax","Span"]
}
