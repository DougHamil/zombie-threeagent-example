{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$renderer$GPURenderer$common$ParticleBuffer$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,2FAAA,CAAgH,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxJC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAAkB,IAAK,EAEvB,KAAIC,WAAaP,OAAA,CAAQ,iGAAR,CAEjB,KAAIQ,KAUJ,MAAMC,eAAN,CACEC,WAAW,CAACC,YAAA,CAAeJ,UAAWK,CAAAA,qBAA3B,CAAkDC,KAAlD,CAAyD,CAClEL,KAAA,CAAQK,KACR,KAAKF,CAAAA,YAAL,CAAoBA,YACpB,KAAKG,CAAAA,uBAAL,EAA+BC,CAAAA,oBAA/B,EAHkE,CAYpED,uBAAuB,EAAG,CACxB,MAAME;AAAc,IAAIC,WAAJ,CAAgB,IAAKN,CAAAA,YAArB,CAAoCJ,UAAWW,CAAAA,kBAA/C,CACpB,KAAKC,CAAAA,iBAAL,CAAyB,IAAIX,KAAMY,CAAAA,iBAAV,CAA4B,IAAIC,YAAJ,CAAiBL,WAAjB,CAA5B,CAA2DT,UAAWW,CAAAA,kBAAtE,CAEzB,OAAO,KAJiB,CAgB1BH,oBAAoB,EAAG,CACrB,IAAKO,CAAAA,QAAL,CAAgB,IAAId,KAAMe,CAAAA,cAC1B,OAAM,CACJJ,iBADI,CAEJG,QAFI,CAAA,CAGF,IACJnB,OAAOqB,CAAAA,IAAP,CAAYjB,UAAWkB,CAAAA,qBAAvB,CAA8CC,CAAAA,MAA9C,CAAqD,CAACC,MAAD,CAASC,SAAT,CAAA,EAAuB,CAC1E,MAAMC,KAAOtB,UAAWkB,CAAAA,qBAAX,CAAiCG,SAAjC,CACbN,SAASQ,CAAAA,YAAT,CAAsBF,SAAtB,CAAiC,IAAIpB,KAAMuB,CAAAA,0BAAV,CAAqCZ,iBAArC;AAAwDU,IAAxD,CAA8DF,MAA9D,CAAjC,CACA,OAAOA,OAAP,CAAiBE,IAHyD,CAA5E,CAIG,CAJH,CAKA,OAAO,KAXc,CAoBnB,UAAS,EAAA,CACX,MAAO,KAAKV,CAAAA,iBADD,CAIT,UAAS,EAAA,CACX,MAAOZ,WAAWW,CAAAA,kBADP,CArDf,CA2DAhB,OAAQI,CAAAA,OAAR,CAAkBG,cA/EsI;",
"sources":["node_modules/three-nebula/build/esm/renderer/GPURenderer/common/ParticleBuffer/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$renderer$GPURenderer$common$ParticleBuffer$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"./constants\");\n\nlet THREE;\n/**\n * Creates and provides performant buffers for mapping particle properties to geometry vertices.\n *\n * @author thrax <manthrax@gmail.com>\n * @author rohan-deshpande <rohan@creativelifeform.com>\n * @see https://threejs.org/examples/?q=buffe#webgl_buffergeometry_points_interleaved\n * @see https://threejs.org/examples/?q=points#webgl_custom_attributes_points\n */\n\nclass ParticleBuffer {\n  constructor(maxParticles = _constants.DEFAULT_MAX_PARTICLES, three) {\n    THREE = three;\n    this.maxParticles = maxParticles;\n    this.createInterleavedBuffer().createBufferGeometry();\n  }\n  /**\n   * Creates the interleaved buffer that will be used to write data to the GPU.\n   *\n   * @return {ParticleBuffer}\n   */\n\n\n  createInterleavedBuffer() {\n    const arrayBuffer = new ArrayBuffer(this.maxParticles * _constants.PARTICLE_BYTE_SIZE);\n    this.interleavedBuffer = new THREE.InterleavedBuffer(new Float32Array(arrayBuffer), _constants.PARTICLE_BYTE_SIZE); // this.interleavedBuffer.usage = THREE.DynamicDrawUsage;\n\n    return this;\n  }\n  /**\n   * Sets the geometry's buffer attributes.\n   *\n   * NOTE Each attribute needs to be set at the right index in the buffer right after the previous\n   * attribute that occupies a set amount of size in the buffer.\n   *\n   * @return {ParticleBufferGeometry}\n   */\n\n\n  createBufferGeometry() {\n    this.geometry = new THREE.BufferGeometry();\n    const {\n      interleavedBuffer,\n      geometry\n    } = this;\n    Object.keys(_constants.ATTRIBUTE_TO_SIZE_MAP).reduce((offset, attribute) => {\n      const size = _constants.ATTRIBUTE_TO_SIZE_MAP[attribute];\n      geometry.setAttribute(attribute, new THREE.InterleavedBufferAttribute(interleavedBuffer, size, offset));\n      return offset += size;\n    }, 0);\n    return this;\n  }\n  /**\n   * Gets the publicly accessible interleaved buffer.\n   *\n   * @return {THREE.InterleavedBuffer} buffers - The interleaved buffer\n   */\n\n\n  get buffer() {\n    return this.interleavedBuffer;\n  }\n\n  get stride() {\n    return _constants.PARTICLE_BYTE_SIZE;\n  }\n\n}\n\nexports.default = ParticleBuffer;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","_constants","THREE","ParticleBuffer","constructor","maxParticles","DEFAULT_MAX_PARTICLES","three","createInterleavedBuffer","createBufferGeometry","arrayBuffer","ArrayBuffer","PARTICLE_BYTE_SIZE","interleavedBuffer","InterleavedBuffer","Float32Array","geometry","BufferGeometry","keys","ATTRIBUTE_TO_SIZE_MAP","reduce","offset","attribute","size","setAttribute","InterleavedBufferAttribute"]
}
