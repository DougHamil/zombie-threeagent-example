{"version":3,"sources":["zombie/assets/model.cljs"],"mappings":"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","names":["zombie.assets.model/gltf-loader","js/module$node_modules$three$examples$jsm$loaders$GLTFLoader.GLTFLoader","zombie.assets.model/fbx-loader","js/module$node_modules$three$examples$jsm$loaders$FBXLoader.FBXLoader","zombie.assets.model/select-loader","path","clojure.string/ends-with?","zombie.assets.model/store-bounding-box!","key","obj","bb","js/module$node_modules$three$build$three_module.Box3","zombie.util.threejs/center-at-origin!","cljs.core.swap_BANG_","zombie.state.databases/model-colliders","cljs.core/assoc","zombie.assets.model/apply-scale!","scale","zombie.assets.model/apply-shadow!","zombie.assets.model/set-phong-material!","material","old-mat","phong-mat","or__4212__auto__","zombie.assets.material/create-phong-material","zombie.assets.model/replace-materials!","mats","temp__5753__auto__","mat","cljs.core.get","p__10497","map__10498","cljs.core/--destructure-map","zombie.assets.model/middleware","pool-size","material-replacements","G__10499","zombie.util.pooling/pool","p__10500","map__10501","zombie.assets.model/skin-middleware","_key","shininess","skin","skin-emissive","emissive","mesh","cljs.core/clj->js","zombie.assets.model/loader","_cfg","js/Promise","res","rej","data","temp__5751__auto__","scene","zombie.assets.model/claim-model!","model-key","pool","cljs.core/deref","zombie.state.databases/assets","zombie.util.pooling/claim!","zombie.assets.model/return-model!","model","zombie.util.pooling/return!"],"sourcesContent":["(ns zombie.assets.model\r\n  (:require [\"three/examples/jsm/loaders/GLTFLoader\" :refer [GLTFLoader]]\r\n            [\"three/examples/jsm/loaders/FBXLoader\" :refer [FBXLoader]]\r\n            [\"three\" :as three]\r\n            [clojure.string :as string]\r\n            [zombie.util.pooling :as pooling]\r\n            [zombie.util.threejs :refer [center-at-origin!]]\r\n            [zombie.assets.material :refer [create-phong-material]]\r\n            [zombie.state.databases :as db]))\r\n\r\n(def ^:private gltf-loader (GLTFLoader.))\r\n(def ^:private fbx-loader (FBXLoader.))\r\n\r\n(defn- select-loader [path]\r\n  (if (or (string/ends-with? path \".glb\")\r\n          (string/ends-with? path \".gltf\"))\r\n    gltf-loader\r\n    fbx-loader))\r\n\r\n(defn- store-bounding-box! [key ^three/Object3D obj]\r\n  (let [bb (.setFromObject (three/Box3.) obj)]\r\n    (center-at-origin! bb)\r\n    (swap! db/model-colliders assoc key {:bounding-box bb})\r\n    obj))\r\n\r\n(defn- apply-scale! [scale ^three/Object3D obj]\r\n  (.set (.-scale obj) scale scale scale)\r\n  obj)\r\n\r\n(defn- apply-shadow! [^three/Object3D obj]\r\n  (.traverse obj (fn [^js obj]\r\n                   (set! (.-castShadow obj) true)\r\n                   (set! (.-receiveShadow obj) true)))\r\n  obj)\r\n\r\n(defn- set-phong-material! [^three/Material material ^three/Object3D obj]\r\n  (.traverse obj (fn [^three/Object3D obj]\r\n                   (when (.-isMesh obj)\r\n                     (let [old-mat (.-material obj)\r\n                           phong-mat (or\r\n                                       material\r\n                                       (create-phong-material {:color (.-color old-mat)\r\n                                                               :map (.-map old-mat)\r\n                                                               :emissiveIntensity (.-emissiveIntensity old-mat)\r\n                                                               :emissive (.-emissive old-mat)\r\n                                                               :emissiveMap (.-emissiveMap old-mat)\r\n                                                               :shininess (.-shininess old-mat)}))]\r\n                       (set! (.-material obj) phong-mat)))))\r\n  obj)\r\n\r\n(defn- replace-materials! [mats ^three/Object3D obj]\r\n  (.traverse obj (fn [obj]\r\n                   (when-let [mat (get mats (.-name obj))]\r\n                     (set! (.-material obj) mat))))\r\n  obj)\r\n\r\n(defn middleware [key ^three/Object3D obj {:keys [scale pool-size material\r\n                                                  material-replacements]}]\r\n  (cond->> obj\r\n    true (set-phong-material! material)\r\n    material-replacements (replace-materials! material-replacements)\r\n    true (apply-shadow!)\r\n    scale (apply-scale! scale)\r\n    true (store-bounding-box! key)\r\n    true (pooling/pool (or pool-size 20))))\r\n\r\n(defn skin-middleware [_key obj {:keys [shininess skin skin-emissive emissive material]}]\r\n  (let [mesh    (aget (.-children obj) 0)\r\n        mat     ^three/Material (.-material mesh)]\r\n    (when-not material\r\n      (.setValues mat (clj->js {:map       skin\r\n                                :emissiveIntensity (when skin-emissive 1)\r\n                                :emissive emissive\r\n                                :emissiveMap skin-emissive\r\n                                :shininess (or shininess 0)})))\r\n    obj))\r\n\r\n(defn loader [_key path _cfg]\r\n  (js/Promise. (fn [res rej]\r\n                 (.load (select-loader path) path\r\n                        (fn [data]\r\n                          (let [data (if-let [scene (.-scene data)]\r\n                                       scene\r\n                                       data)]\r\n                            (res data)))\r\n                        nil\r\n                        rej))))\r\n\r\n(defn claim-model! [model-key]\r\n  (let [pool (get @db/assets model-key)]\r\n    (pooling/claim! pool)))\r\n\r\n(defn return-model! [model-key model]\r\n  (let [pool (get @db/assets model-key)]\r\n    (pooling/return! pool model)))\r\n"]}