{
"version":3,
"file":"module$zombie$scene$system$physics$raycast.js",
"lineCount":187,
"mappings":"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",
"sources":["zombie/scene/system/physics/raycast.js"],
"sourcesContent":["// MatterJS' built-in raycasting does not return intersection points\r\n// but this function does\r\n// Adapted from https://pastebin.com/7M2CvK29\r\n\r\nexport function raycast(query, start, end, sort = true){\r\n\t//convert the start & end parameters to my custom\r\n\t//'vec2' object type\r\n\tstart = vec2.fromOther(start);\r\n\tend = vec2.fromOther(end);\r\n\t\r\n\t//'cols': the array that will contain the ray \r\n\t//collision information\r\n\tvar cols = [];\r\n\t//'raytest': the ray object that will be tested for\r\n\t//collision against the bodies\r\n\tvar raytest = new ray(start, end);\r\n\t\r\n\t//Next, since all the bodies that the ray collides with\r\n\t//have already been queried, we iterate through each\r\n\t//one to see where the ray intersects with the body\r\n\t//and gather other information\r\n\tfor(var i = query.length - 1; i >= 0; i--){\r\n\t\tvar bcols = ray.bodyCollisions(raytest, query[i].body);\r\n\t\tfor(var k = bcols.length - 1; k >= 0; k--){\r\n\t\t\tcols.push(bcols[k]);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//if desired, we then sort the collisions based on the\r\n\t//disance from the ray's start\r\n\tif(sort)\r\n\t\tcols.sort(function(a,b){\r\n\t\t\treturn a.point.distance(start) > b.point.distance(start);\r\n\t\t});\r\n\t\r\n\treturn cols;\r\n}\r\n\r\n//data type that contains information about an intersection \r\n//between a ray and a body\r\nclass raycol{\r\n\t//initailizes a 'raycol' object with the given data\r\n\t//param 'body' - stores the body that the ray has \r\n\t//\tcollided with\r\n\t//param 'point' - stores the collision point\r\n\t//param 'normal' - stores the normal of the edge that\r\n\t//\tthe ray collides with\r\n\t//param 'verts' - stores the vertices of the edge that\r\n\t//\tthe ray collides with\r\n\tconstructor(body, point, normal, verts){\r\n\t\tthis.body = body;\r\n\t\tthis.point = point;\r\n\t\tthis.normal = normal;\r\n\t\tthis.verts = verts;\r\n\t}\r\n}\r\n\r\n//data type that contains information and methods for a \r\n//ray object\r\nclass ray{\r\n\t//initializes a ray instance with the given parameters\r\n\t//param 'start' - the starting point of the ray\r\n\t//param 'end' - the ending point of the ray\r\n\tconstructor(start, end){\r\n\t\tthis.start = start;\r\n\t\tthis.end = end;\r\n\t}\r\n\t\r\n\tyValueAt(x){\r\n\t\t//returns the y value on the ray at the specified x\r\n\t\t//slope-intercept form:\r\n\t\t//y = m * x + b\r\n\t\treturn this.offsetY + this.slope * x; \r\n\t} \r\n\txValueAt(y){\r\n\t\t//returns the x value on the ray at the specified y\r\n\t\t//slope-intercept form:\r\n\t\t//x = (y - b) / m\r\n\t\treturn (y - this.offsetY) / this.slope;\r\n\t}\r\n\t\r\n\tpointInBounds(point){\r\n\t\t//checks to see if the specified point is within\r\n\t\t//the ray's bounding box (inclusive)\r\n\t\tvar minX = Math.min(this.start.x, this.end.x);\r\n\t\tvar maxX = Math.max(this.start.x, this.end.x);\r\n\t\tvar minY = Math.min(this.start.y, this.end.y);\r\n\t\tvar maxY = Math.max(this.start.y, this.end.y);\r\n\t\treturn (\r\n\t\t\tpoint.x >= minX &&\r\n\t\t\tpoint.x <= maxX &&\r\n\t\t\tpoint.y >= minY &&\r\n\t\t\tpoint.y <= maxY );\r\n\t}\r\n\tcalculateNormal(ref){\r\n\t\t//calulates the normal based on a specified\r\n\t\t//reference point\r\n\t\tvar dif = this.difference;\r\n\t\t\r\n\t\t//gets the two possible normals as points that lie\r\n\t\t//perpendicular to the ray\r\n\t\tvar norm1 = dif.normalized().rotate(Math.PI / 2);\r\n\t\tvar norm2 = dif.normalized().rotate(Math.PI / -2);\r\n\t\t\r\n\t\t//returns the normal that is closer to the provided\r\n\t\t//reference point\r\n\t\tif(this.start.plus(norm1).distance(ref) < this.start.plus(norm2).distance(ref))\r\n\t\t\treturn norm1;\r\n\t\treturn norm2;\r\n\t}\r\n\t\r\n\tget difference(){\r\n\t\t//pretty self explanitory\r\n\t\treturn this.end.minus(this.start);\r\n\t}\r\n\tget slope(){\r\n\t\tvar dif = this.difference;\r\n\t\treturn dif.y / dif.x;\r\n\t}\t\r\n\tget offsetY(){\r\n\t\t//the y-offset at x = 0, in slope-intercept form:\r\n\t\t//b = y - m * x\r\n\t\t//offsetY = start.y - slope * start.x\r\n\t\treturn this.start.y - this.slope * this.start.x;\r\n\t}\r\n\tget isHorizontal(){ return compareNum(this.start.y, this.end.y); }\r\n\tget isVertical(){ return compareNum(this.start.x, this.end.x); }\r\n\t\r\n\tstatic intersect(rayA, rayB){\r\n\t\t//returns the intersection point between two rays\r\n\t\t//null if no intersection\r\n\t\t\r\n\t\t//conditional checks for axis aligned rays\r\n\t\tif(rayA.isVertical && rayB.isVertical) return null;\r\n\t\tif(rayA.isVertical) return new vec2(rayA.start.x, rayB.yValueAt(rayA.start.x));\r\n\t\tif(rayB.isVertical) return new vec2(rayB.start.x, rayA.yValueAt(rayB.start.x));\r\n\t\tif(compareNum(rayA.slope, rayB.slope)) return null;\r\n\t\tif(rayA.isHorizontal) return new vec2(rayB.xValueAt(rayA.start.y), rayA.start.y);\r\n\t\tif(rayB.isHorizontal) return new vec2(rayA.xValueAt(rayB.start.y), rayB.start.y);\r\n\t\t\r\n\t\t//slope intercept form:\r\n\t\t//y1 = m2 * x + b2; where y1 = m1 * x + b1:\r\n\t\t//m1 * x + b1 = m2 * x + b2:\r\n\t\t//x = (b2 - b1) / (m1 - m2)\r\n\t\tvar x = (rayB.offsetY - rayA.offsetY) / (rayA.slope - rayB.slope)\r\n\t\treturn new vec2(x, rayA.yValueAt(x));\r\n\t}\r\n\tstatic collisionPoint(rayA, rayB){\r\n\t\t//returns the collision point of two rays\r\n\t\t//null if no collision\r\n\t\tvar intersection = ray.intersect(rayA, rayB);\r\n\t\tif(!intersection) return null;\r\n\t\tif(!rayA.pointInBounds(intersection)) return null;\r\n\t\tif(!rayB.pointInBounds(intersection)) return null;\r\n\t\treturn intersection;\r\n\t}\r\n\tstatic bodyEdges(body){\r\n\t\t//returns all of the edges of a body in the\r\n\t\t//form of an array of ray objects\r\n\t\tvar r = [];\r\n\t\tfor (var i = body.parts.length - 1; i >= 0; i--){\r\n\t\t\tfor(var k = body.parts[i].vertices.length - 1; k >= 0; k--){\r\n\t\t\t\tvar k2 = k + 1;\r\n\t\t\t\tif(k2 >= body.parts[i].vertices.length)\r\n\t\t\t\t\tk2 = 0;\r\n\t\t\t\tvar tray = new ray(\r\n\t\t\t\t\tvec2.fromOther(body.parts[i].vertices[k]) , \r\n\t\t\t\t\tvec2.fromOther(body.parts[i].vertices[k2]) );\r\n\t\t\t\t\r\n\t\t\t\t//stores the vertices inside the edge\r\n\t\t\t\t//ray for future reference\r\n\t\t\t\ttray.verts = [\r\n\t\t\t\t\tbody.parts[i].vertices[k] , \r\n\t\t\t\t\tbody.parts[i].vertices[k2] ];\r\n\t\t\t\t\r\n\t\t\t\tr.push(tray);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn r;\r\n\t}\r\n\tstatic bodyCollisions(rayA, body){\r\n\t\t//returns all the collisions between a specified ray\r\n\t\t//and body in the form of an array of 'raycol' objects\r\n\t\tvar r = [];\r\n\t\t\r\n\t\t//gets the edge rays from the body\r\n\t\tvar edges = ray.bodyEdges(body);\r\n\t\t\r\n\t\t//iterates through each edge and tests for collision\r\n\t\t//with 'rayA'\r\n\t\tfor(var i = edges.length - 1; i >= 0; i--){\r\n\t\t\t//gets the collision point\r\n\t\t\tvar colpoint = ray.collisionPoint(rayA, edges[i]);\r\n\t\t\t\r\n\t\t\t//if there is no collision, then go to next edge\r\n\t\t\tif(!colpoint) continue;\r\n\t\t\t\r\n\t\t\t//calculates the edge's normal\r\n\t\t\tvar normal = edges[i].calculateNormal(rayA.start);\r\n\t\t\t\r\n\t\t\t//adds the ray collision to the return array\r\n\t\t\tr.push(new raycol(body, colpoint, normal, edges[i].verts));\r\n\t\t}\r\n\t\t\r\n\t\treturn r;\r\n\t}\r\n}\r\n\r\n//in order to avoid miscalculations due to floating points\r\n//error, which for whatever reason javascript has a ton of\r\n//example:\r\n//var m = 6; m -= 1; m -= 3; m += 4\r\n//now 'm' probably equals 6.0000000008361 or something stupid\r\nfunction compareNum(a, b, leniency = 0.00001){\r\n\treturn Math.abs(b - a) <= leniency;\r\n}\r\n\r\n//\r\n//included external dependencies:\r\n//\r\n//2d vector data type; contains information and methods for \r\n//2-dimensional vectors\r\nclass vec2{\r\n\t//initailizes a 'vec2' object with specified values\r\n\tconstructor(x = 0, y = x){\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\t\r\n\tnormalized(magnitude = 1){\r\n\t\t//returns a vector 2 with the same direction as this but\r\n\t\t//with a specified magnitude\r\n\t\treturn this.multiply(magnitude / this.distance());\r\n\t}\r\n\tget inverted(){\r\n\t\t//returns the opposite of this vector\r\n\t\treturn this.multiply(-1);\r\n\t}\r\n\tmultiply(factor){\r\n\t\t//returns this multiplied by a specified factor    \r\n\t\treturn new vec2(this.x * factor, this.y * factor);\r\n\t}\r\n\tplus(vec){\r\n\t\t//returns the result of this added to another \r\n\t\t//specified 'vec2' object\r\n\t\treturn new vec2(this.x + vec.x, this.y + vec.y);\r\n\t}\r\n\tminus(vec){\r\n\t\t//returns the result of this subtracted by another \r\n\t\t//specified 'vec2' object\r\n\t\treturn this.plus(vec.inverted);\r\n\t}\r\n\trotate(rot){\r\n\t\t//rotates the vector by the specified angle\r\n\t\tvar ang = this.direction;\r\n\t\tvar mag = this.distance();\r\n\t\tang += rot;\r\n\t\treturn vec2.fromAng(ang, mag)\r\n\t}\r\n\t\r\n\tget direction(){\r\n\t\t//returns the angle this vector is pointing in radians\r\n\t\treturn Math.atan2(this.y, this.x);\r\n\t}\r\n\tdistance(vec = new vec2()){\r\n\t\t//returns the distance between this and a specified \r\n\t\t//'vec2' object\r\n\t\tvar d = Math.sqrt(\r\n\t\t\tMath.pow(this.x - vec.x, 2) + \r\n\t\t\tMath.pow(this.y - vec.y, 2));\r\n\t\treturn d;\r\n\t}\r\n\t\r\n\tclone(){\r\n\t\t//returns a new instance of a 'vec2' object with the\r\n\t\t//same value\r\n\t\treturn new vec2(this.x, this.y);\r\n\t}\r\n\tstatic fromAng(angle, magnitude = 1){\r\n\t\t//returns a vector which points in the specified angle\r\n\t\t//and has the specified magnitude\r\n\t\treturn new vec2(\r\n\t\t\tMath.cos(angle) * magnitude, \r\n\t\t\tMath.sin(angle) * magnitude);\r\n\t}\r\n\tstatic fromOther(vector){\r\n\t\t//converts other data types that contain 'x' and 'y'\r\n\t\t//properties to a 'vec2' object type\r\n\t\treturn new vec2(vector.x, vector.y);\r\n\t}\r\n\t\r\n\ttoString(){\r\n\t\treturn \"vector<\" + this.x + \", \" + this.y + \">\";\r\n\t}\r\n}\r\n"],
"names":["raycast","query","start","end","sort","vec2","fromOther","cols","raytest","ray","i","length","bcols","bodyCollisions","body","k","push","a","b","point","distance","raycol","constructor","normal","verts","yValueAt","x","offsetY","slope","xValueAt","y","pointInBounds","minX","Math","min","maxX","max","minY","maxY","calculateNormal","ref","dif","difference","norm1","normalized","rotate","PI","norm2","plus","minus","compareNum","intersect","rayA","rayB","isVertical","isHorizontal","collisionPoint","intersection","bodyEdges","r","parts","vertices","k2","tray","edges","colpoint","leniency","abs","magnitude","multiply","factor","vec","inverted","rot","ang","direction","mag","fromAng","atan2","d","sqrt","pow","clone","angle","cos","sin","vector","toString","$jscomp$tmp$exports$module$name"]
}
