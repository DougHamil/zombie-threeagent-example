{"version":3,"sources":["medley/core.cljc"],"mappings":"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","names":["var_args","G__7700","medley.core/find-first","js/Error","pred","rf","result","x","cljs.core/ensure-reduced","coll","cljs.core.reduce","_","cljs.core/reduced","medley.core/dissoc-in","m","ks","temp__5751__auto__","vec__7702","seq__7703","cljs.core/seq","first__7704","cljs.core/first","cljs.core/next","k","v","G__7705","G__7706","cljs.core.get","cljs.core/empty?","cljs.core.dissoc","cljs.core.assoc","G__7712","medley.core/assoc-some","args-arr__4839__auto__","len__4818__auto__","i__4819__auto__","argseq__4840__auto__","cljs.core/IndexedSeq","seq7708","G__7709","G__7710","G__7711","self__4805__auto__","kvs","p__7713","vec__7714","cljs.core.nth","medley.core.assoc_some","cljs.core.partition","medley.core/editable?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IEditableCollection","medley.core/reduce-map","f","cljs.core/persistent!","cljs.core/reduce-kv","cljs.core/assoc!","cljs.core/transient","cljs.core/empty","cljs.core/assoc","medley.core/map-entry","medley.core/map-kv","xf","vec__7718","medley.core/map-keys","G__7721","G__7722","G__7723","medley.core/map-vals","G__7724","G__7725","G__7726","medley.core/filter-kv","medley.core/filter-keys","medley.core/filter-vals","medley.core/remove-kv","cljs.core/complement","medley.core/remove-keys","medley.core/remove-vals","G__7728","medley.core/queue","cljs.core/PersistentQueue","cljs.core.into","medley.core.queue","medley.core/queue?","medley.core/boolean?","G__7733","medley.core/least","seq7730","G__7731","G__7732","a","b","cljs.core/compare","more","medley.core.least","G__7742","medley.core/greatest","seq7736","G__7737","G__7738","medley.core.greatest","G__7757","medley.core/mapply","seq7754","G__7755","G__7756","cljs.core.apply","cljs.core/concat","args","cljs.core/butlast","cljs.core/last","G__7767","medley.core/interleave-all","seq7762","G__7763","G__7764","c1","cljs.core/LazySeq","c2","s1","s2","cljs.core/cons","medley.core.interleave_all","cljs.core/rest","colls","ss","cljs.core.remove","cljs.core/nil?","cljs.core.map","cljs.core.conj","cljs.core.concat","G__7780","medley.core/distinct-by","seen","cljs.core/volatile!","fx","cljs.core/deref","cljs.core/contains?","step","xs","p__7783","vec__7784","temp__5753__auto__","s","G__7788","medley.core/dedupe-by","pv","prior","cljs.core/vreset!","cljs.core._EQ_","cljs.core.sequence","medley.core.dedupe_by","G__7794","medley.core/take-upto","cljs.core/not","medley.core.take_upto","G__7798","medley.core/drop-upto","dv","cljs.core.drop_while","G__7808","medley.core/indexed","i","G__7815","G__7816","cljs.core.map_indexed","cljs.core/vector","medley.core/abs","G__7823","medley.core/deref-swap!","seq7820","G__7821","G__7822","atom","value","cljs.core/reset!","p1__7818#","medley.core.deref_swap_BANG_","medley.core/deref-reset!","newval","cljs.core/constantly","medley.core/ex-message","ex","cljs.core/ex-message","medley.core/ex-cause","cljs.core/ex-cause","medley.core/uuid?","cljs.core/UUID","medley.core/uuid","cljs.core/uuid","medley.core/random-uuid","cljs.core/random-uuid"],"sourcesContent":["(ns medley.core\n  \"A small collection of useful, mostly pure functions that might not look out\n  of place in the clojure.core namespace.\"\n  (:refer-clojure :exclude [boolean? ex-cause ex-message uuid uuid? random-uuid]))\n\n(defn find-first\n  \"Finds the first item in a collection that matches a predicate.\"\n  ([pred]\n   (fn [rf]\n     (fn\n       ([] (rf))\n       ([result] (rf result))\n       ([result x]\n        (if (pred x)\n          (ensure-reduced (rf result x))\n          result)))))\n  ([pred coll]\n   (reduce (fn [_ x] (if (pred x) (reduced x))) nil coll)))\n\n(defn dissoc-in\n  \"Dissociate a value in a nested assocative structure, identified by a sequence\n  of keys. Any collections left empty by the operation will be dissociated from\n  their containing structures.\"\n  [m ks]\n  (if-let [[k & ks] (seq ks)]\n    (if (seq ks)\n      (let [v (dissoc-in (get m k) ks)]\n        (if (empty? v)\n          (dissoc m k)\n          (assoc m k v)))\n      (dissoc m k))\n    m))\n\n(defn assoc-some\n  \"Associates a key with a value in a map, if and only if the value is not nil.\"\n  ([m k v]\n   (if (nil? v) m (assoc m k v)))\n  ([m k v & kvs]\n   (reduce (fn [m [k v]] (assoc-some m k v))\n           (assoc-some m k v)\n           (partition 2 kvs))))\n\n(defn- editable? [coll]\n  #?(:clj  (instance? clojure.lang.IEditableCollection coll)\n     :cljs (satisfies? cljs.core.IEditableCollection coll)))\n\n(defn- reduce-map [f coll]\n  (if (editable? coll)\n    (persistent! (reduce-kv (f assoc!) (transient (empty coll)) coll))\n    (reduce-kv (f assoc) (empty coll) coll)))\n\n(defn map-entry\n  \"Create a map entry for a key and value pair.\"\n  [k v]\n  #?(:clj  (clojure.lang.MapEntry. k v)\n     :cljs [k v]))\n\n(defn map-kv\n  \"Maps a function over the key/value pairs of an associate collection. Expects\n  a function that takes two arguments, the key and value, and returns the new\n  key and value as a collection of two elements.\"\n  [f coll]\n  (reduce-map (fn [xf] (fn [m k v] (let [[k v] (f k v)] (xf m k v)))) coll))\n\n(defn map-keys\n  \"Maps a function over the keys of an associative collection.\"\n  [f coll]\n  (reduce-map (fn [xf] (fn [m k v] (xf m (f k) v))) coll))\n\n(defn map-vals\n  \"Maps a function over the values of an associative collection.\"\n  [f coll]\n  (reduce-map (fn [xf] (fn [m k v] (xf m k (f v)))) coll))\n\n(defn filter-kv\n  \"Returns a new associative collection of the items in coll for which\n  `(pred (key item) (val item))` returns true.\"\n  [pred coll]\n  (reduce-map (fn [xf] (fn [m k v] (if (pred k v) (xf m k v) m))) coll))\n\n(defn filter-keys\n  \"Returns a new associative collection of the items in coll for which\n  `(pred (key item))` returns true.\"\n  [pred coll]\n  (reduce-map (fn [xf] (fn [m k v] (if (pred k) (xf m k v) m))) coll))\n\n(defn filter-vals\n  \"Returns a new associative collection of the items in coll for which\n  `(pred (val item))` returns true.\"\n  [pred coll]\n  (reduce-map (fn [xf] (fn [m k v] (if (pred v) (xf m k v) m))) coll))\n\n(defn remove-kv\n  \"Returns a new associative collection of the items in coll for which\n  `(pred (key item) (val item))` returns false.\"\n  [pred coll]\n  (filter-kv (complement pred) coll))\n\n(defn remove-keys\n  \"Returns a new associative collection of the items in coll for which\n  `(pred (key item))` returns false.\"\n  [pred coll]\n  (filter-keys (complement pred) coll))\n\n(defn remove-vals\n  \"Returns a new associative collection of the items in coll for which\n  `(pred (val item))` returns false.\"\n  [pred coll]\n  (filter-vals (complement pred) coll))\n\n(defn queue\n  \"Creates an empty persistent queue, or one populated with a collection.\"\n  ([] #?(:clj  clojure.lang.PersistentQueue/EMPTY\n         :cljs cljs.core.PersistentQueue.EMPTY))\n  ([coll] (into (queue) coll)))\n\n(defn queue?\n  \"Returns true if x implements clojure.lang.PersistentQueue.\"\n  [x]\n  (instance? #?(:clj  clojure.lang.PersistentQueue\n                :cljs cljs.core.PersistentQueue) x))\n\n(defn boolean?\n  \"Returns true if x is a boolean.\"\n  [x]\n  #?(:clj  (instance? Boolean x)\n     :cljs (or (true? x) (false? x))))\n\n(defn least\n  \"Return the least argument (as defined by the compare function) in O(n) time.\"\n  {:arglists '([& xs])}\n  ([] nil)\n  ([a] a)\n  ([a b] (if (neg? (compare a b)) a b))\n  ([a b & more] (reduce least (least a b) more)))\n\n(defn greatest\n  \"Find the greatest argument (as defined by the compare function) in O(n) time.\"\n  {:arglists '([& xs])}\n  ([] nil)\n  ([a] a)\n  ([a b] (if (pos? (compare a b)) a b))\n  ([a b & more] (reduce greatest (greatest a b) more)))\n\n(defn mapply\n  \"Applies a function f to the argument list formed by concatenating\n  everything but the last element of args with the last element of\n  args. This is useful for applying a function that accepts keyword\n  arguments to a map.\"\n  {:arglists '([f & args])}\n  ([f m]        (apply f (apply concat m)))\n  ([f a & args] (apply f a (apply concat (butlast args) (last args)))))\n\n(defn interleave-all\n  \"Returns a lazy seq of the first item in each coll, then the second, etc.\n  Unlike `clojure.core/interleave`, the returned seq contains all items in the\n  supplied collections, even if the collections are different sizes.\"\n  {:arglists '([& colls])}\n  ([] ())\n  ([c1] (lazy-seq c1))\n  ([c1 c2]\n   (lazy-seq\n    (let [s1 (seq c1), s2 (seq c2)]\n      (if (and s1 s2)\n        (cons (first s1) (cons (first s2) (interleave-all (rest s1) (rest s2))))\n        (or s1 s2)))))\n  ([c1 c2 & colls]\n   (lazy-seq\n    (let [ss (remove nil? (map seq (conj colls c2 c1)))]\n      (if (seq ss)\n        (concat (map first ss) (apply interleave-all (map rest ss))))))))\n\n(defn distinct-by\n  \"Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f.\"\n  ([f]\n   (fn [rf]\n     (let [seen (volatile! #{})]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result x]\n          (let [fx (f x)]\n            (if (contains? @seen fx)\n              result\n              (do (vswap! seen conj fx)\n                  (rf result x)))))))))\n  ([f coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                 ((fn [[x :as xs] seen]\n                    (when-let [s (seq xs)]\n                      (let [fx (f x)]\n                        (if (contains? seen fx)\n                          (recur (rest s) seen)\n                          (cons x (step (rest s) (conj seen fx)))))))\n                  xs seen)))]\n     (step coll #{}))))\n\n(defn dedupe-by\n  \"Returns a lazy sequence of the elements of coll, removing any **consecutive**\n  elements that return duplicate values when passed to a function f.\"\n  ([f]\n   (fn [rf]\n     (let [pv (volatile! ::none)]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result x]\n          (let [prior @pv\n                fx    (f x)]\n            (vreset! pv fx)\n            (if (= prior fx)\n              result\n              (rf result x))))))))\n  ([f coll]\n   (sequence (dedupe-by f) coll)))\n\n(defn take-upto\n  \"Returns a lazy sequence of successive items from coll up to and including\n  the first item for which `(pred item)` returns true.\"\n  ([pred]\n   (fn [rf]\n     (fn\n       ([] (rf))\n       ([result] (rf result))\n       ([result x]\n        (let [result (rf result x)]\n          (if (pred x)\n            (ensure-reduced result)\n            result))))))\n  ([pred coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (let [x (first s)]\n        (cons x (if-not (pred x) (take-upto pred (rest s)))))))))\n\n(defn drop-upto\n  \"Returns a lazy sequence of the items in coll starting *after* the first item\n  for which `(pred item)` returns true.\"\n  ([pred]\n   (fn [rf]\n     (let [dv (volatile! true)]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result x]\n          (if @dv\n            (do (when (pred x) (vreset! dv false)) result)\n            (rf result x)))))))\n  ([pred coll]\n   (rest (drop-while (complement pred) coll))))\n\n(defn indexed\n  \"Returns an ordered, lazy sequence of vectors `[index item]`, where item is a\n  value in coll, and index its position starting from zero.\"\n  ([]\n   (fn [rf]\n     (let [i (volatile! -1)]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result x]\n          (rf result [(vswap! i inc) x]))))))\n  ([coll]\n   (map-indexed vector coll)))\n\n(defn abs\n  \"Returns the absolute value of a number.\"\n  [x]\n  (if (neg? x) (- x) x))\n\n(defn deref-swap!\n  \"Atomically swaps the value of the atom to be `(apply f x args)`, where x is\n  the current value of the atom, then returns the original value of the atom.\n  This function therefore acts like an atomic `deref` then `swap!`.\"\n  {:arglists '([atom f & args])}\n  ([atom f]\n   #?(:clj  (loop []\n              (let [value @atom]\n                (if (compare-and-set! atom value (f value))\n                  value\n                  (recur))))\n      :cljs (let [value @atom]\n              (reset! atom (f value))\n              value)))\n  ([atom f & args]\n   (deref-swap! atom #(apply f % args))))\n\n(defn deref-reset!\n  \"Sets the value of the atom without regard for the current value, then returns\n  the original value of the atom. See also: [[deref-swap!]].\"\n  [atom newval]\n  (deref-swap! atom (constantly newval)))\n\n(defn ex-message\n  \"Returns the message attached to the given Error/Throwable object. For all\n  other types returns nil. Same as `cljs.core/ex-message` except it works for\n  Clojure as well as ClojureScript.\"\n  [ex]\n  #?(:clj  (when (instance? Throwable ex) (.getMessage ^Throwable ex))\n     :cljs (cljs.core/ex-message ex)))\n\n(defn ex-cause\n  \"Returns the cause attached to the given ExceptionInfo/Throwable object. For\n  all other types returns nil. Same as `cljs.core/ex-clause` except it works for\n  Clojure as well as ClojureScript.\"\n  [ex]\n  #?(:clj  (when (instance? Throwable ex) (.getCause ^Throwable ex))\n     :cljs (cljs.core/ex-cause ex)))\n\n(defn uuid?\n  \"Returns true if the value is a UUID.\"\n  [x]\n  (instance? #?(:clj java.util.UUID :cljs cljs.core.UUID) x))\n\n(defn uuid\n  \"Returns a UUID generated from the supplied string. Same as `cljs.core/uuid`\n  in ClojureScript, while in Clojure it returns a `java.util.UUID` object.\"\n  [s]\n  #?(:clj  (java.util.UUID/fromString s)\n     :cljs (cljs.core/uuid s)))\n\n(defn random-uuid\n  \"Generates a new random UUID. Same as `cljs.core/random-uuid` except it works\n  for Clojure as well as ClojureScript.\"\n  []\n  #?(:clj  (java.util.UUID/randomUUID)\n     :cljs (cljs.core/random-uuid)))\n"]}