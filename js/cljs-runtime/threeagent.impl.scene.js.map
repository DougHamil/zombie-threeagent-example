{"version":3,"sources":["threeagent/impl/scene.cljs"],"mappings":"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","names":["js/threeagent","js/threeagent.impl","js/threeagent.impl.scene","js/threeagent.impl.scene.contexts","threeagent.impl.scene/contexts","threeagent.impl.scene/raw-context->context","raw-ctx","threeagent.impl.scene/in-place-update?","ctx","node","entity-type","cljs.core.get","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","threeagent.entity/IUpdateableEntityType","threeagent.impl.scene/portal?","threeagent.impl.scene/on-entity-removed","old-obj","old-component-config","temp__5753__auto__","callback","on-removed","callbacks","threeagent.impl.system/dispatch-on-removed","cams","threeagent.impl.scene/on-entity-added","obj","component-config","on-added","ref","threeagent.impl.system/dispatch-on-added","threeagent.impl.scene/create-entity-object","map__10246","cljs.core/--destructure-map","component-key","position","rotation","scale","temp__5751__auto__","threeagent.entity/create","threeagent.impl.threejs/set-position!","threeagent.impl.threejs/set-rotation!","threeagent.impl.threejs/set-scale!","js/Error","threeagent.impl.scene/resolve-portal-object","default-parent","path","parent","threeagent.impl.threejs/get-in","js/console.error","var_args","G__10248","threeagent.impl.scene/create-entity","parent-object","threeagent.impl.scene.create_entity","portal?","map__10249","post-added-fns","cljs.core.partial","seq__10250","cljs.core/seq","chunk__10251","count__10252","i__10253","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cb","threeagent.impl.scene/destroy-entity","map__10254","post-removed-fns","seq__10255","chunk__10256","count__10257","i__10258","threeagent.entity/destroy!","threeagent.impl.scene/update-entity","old-data","new-data","map__10259","seq__10260","chunk__10261","count__10262","i__10263","threeagent.entity/update!","seq__10264","chunk__10265","count__10266","i__10267","threeagent.impl.scene/transform-entity","_ctx","map__10268","threeagent.impl.scene/replace-entity","map__10269","old-component-key","old-entity-type","parent-obj","children","new-obj","seq__10270","chunk__10271","count__10272","i__10273","child","cljs.core/aclone","threeagent.impl.scene/init-scene!","context","virtual-scene","scene-root","threeagent.impl.scene/update-type","o","n","cljs.core.not_EQ_","p__10274","vec__10275","cljs.core.nth","threeagent.impl.scene/apply-change!","action","G__10278","cljs.core/Keyword","G__10279","e10280","ex","cljs.core/clj->js","e10281","e10282","threeagent.impl.scene/animate","stats","clock","renderer","composer","before-render-cb","after-render-cb","delta-time","changelog","threeagent.impl.system/dispatch-on-tick","threeagent.impl.virtual-scene/render!","seq__10283","chunk__10284","count__10285","i__10286","change","camera","threeagent.impl.scene/get-canvas","dom-root","cljs.core._EQ_","clojure.string/lower-case","c","js/document","threeagent.impl.scene/set-shadow-map!","shadow-map","sm","or__4212__auto__","js/module$node_modules$three$build$three_module.PCFShadowMap","p__10287","map__10288","threeagent.impl.scene/create-context","root-fn","on-before-render","on-after-render","systems","entity-types","canvas","width","height","js/module$node_modules$three$build$three_module.WebGLRenderer","js/module$node_modules$three$build$three_module.PerspectiveCamera","cameras","js/module$node_modules$three$build$three_module.Scene","js/module$node_modules$three$build$three_module.Clock","threeagent.impl.system/dispatch-init","threeagent.impl.virtual-scene/create","threeagent.impl.types/Context","cljs.core.merge","threeagent.impl.entities/builtin-entity-types","threeagent.impl.scene/clear-scene!","vscene-root","p__10289","map__10290","threeagent.impl.scene/reset-context!","old-context","threeagent.impl.system/dispatch-destroy","threeagent.impl.virtual-scene/destroy!","new-virtual-scene","threeagent.impl.scene/find-context","p1__10291#","cljs.core.filter","threeagent.impl.scene/create-or-reset-context","config","existing-context","threeagent.impl.scene/render"],"sourcesContent":["(ns threeagent.impl.scene\n  (:require [threeagent.impl.virtual-scene :as vscene]\n            [threeagent.impl.entities :refer [builtin-entity-types]]\n            [threeagent.entity :as entity]\n            [threeagent.impl.threejs :as threejs]\n            [threeagent.impl.types :refer [Context]]\n            [threeagent.impl.system :as systems]\n            [clojure.string :as string]\n            [\"three\" :as three]))\n\n(defonce ^:private contexts (array))\n\n(defn- raw-context->context [^Context raw-ctx]\n  {:threejs-renderer (.-renderer raw-ctx)\n   :threejs-scene (.-sceneRoot raw-ctx)\n   :threejs-default-camera (.-defaultCamera raw-ctx)\n   :canvas (.-canvas raw-ctx)})\n\n(defn- in-place-update? [^Context ctx ^vscene/Node node]\n  (let [entity-type (get (.-entityTypes ctx) (:component-key (.-data node)))]\n    (satisfies? entity/IUpdateableEntityType entity-type)))\n\n(defn- portal? [^vscene/Node node]\n  (some? (.-portalPath node)))\n\n(defn- on-entity-removed [^Context ctx ^vscene/Node node ^three/Object3D old-obj old-component-config]\n  ;; Lifecycle Hooks\n  (when-let [callback (:on-removed (.-meta node))]\n    (callback old-obj))\n  (when-let [on-removed (:on-removed old-component-config)]\n    (on-removed old-obj))\n  (let [callbacks (systems/dispatch-on-removed ctx (.-context node) (.-id node) old-obj old-component-config)]\n    (when (.-isCamera old-obj)\n      (when (.-active old-obj)\n        (set! (.-camera ctx) (.-lastCamera ctx)))\n      (let [cams (.-cameras ctx)]\n        (.splice cams (.indexOf cams old-obj) 1)))\n    callbacks))\n\n(defn- on-entity-added [^Context ctx ^vscene/Node node ^three/Object3D obj component-config]\n  ;; Lifecycle Hooks\n  (when-let [callback (:on-added (.-meta node))]\n    (callback obj))\n  (when-let [on-added (:on-added component-config)]\n    (on-added obj))\n  (when-let [ref (:ref component-config)]\n    (ref obj))\n  (let [callbacks (systems/dispatch-on-added ctx (.-context node) (.-id node) obj component-config)]\n    (when (.-isCamera obj)\n      (when (.-active obj)\n        (set! (.-lastCamera ctx) (.-camera ctx))\n        (set! (.-camera ctx) obj))\n      (.push (.-cameras ctx) obj))\n    callbacks))\n\n(defn- create-entity-object [^Context ctx ^vscene/Node node]\n  (let [{:keys [component-config\n                component-key\n                position\n                rotation\n                scale]} (.-data node)]\n    (if-let [entity-type (get (.-entityTypes ctx) component-key)]\n      (let [obj (entity/create entity-type (.-context node) component-config)]\n        (threejs/set-position! obj position)\n        (threejs/set-rotation! obj rotation)\n        (threejs/set-scale! obj scale)\n        obj)\n      (throw (js/Error. (str \"Cannot find entity-type for keyword '\" (str component-key) \"'\")\n                        node)))))\n\n(defn- resolve-portal-object [^three/Object3D default-parent ^vscene/Node node]\n  (let [path (.-portalPath node)\n        parent (threejs/get-in default-parent path)]\n    (when-not parent\n      (js/console.error (str \"Invalid portal path '\" path \"'\")\n                        default-parent)\n      (throw (js/Error. (str \"Portal path '\" path \"' is invalid.\"))))\n    parent))\n\n(defn- create-entity\n  ([^Context ctx ^three/Object3D parent-object ^vscene/Node node]\n   (create-entity ctx parent-object node (portal? node)))\n  ([^Context ctx ^three/Object3D parent ^vscene/Node node portal?]\n   (let [{:keys [component-config]} (.-data node)\n         obj (if portal?\n               (resolve-portal-object parent node)\n               (create-entity-object ctx node))]\n     (when-not portal?\n       (.add parent obj))\n     (set! (.-threejs node) obj)\n     (let [post-added-fns (on-entity-added ctx node obj component-config)]\n       (.for-each-child node (partial create-entity ctx obj))\n       (doseq [cb post-added-fns]\n         (cb)))\n     obj)))\n\n(defn- destroy-entity\n  ([^Context ctx ^vscene/Node node]\n   (if (portal? node)\n     (.for-each-child node (partial destroy-entity ctx))\n     (let [{:keys [component-key\n                   component-config]} (.-data node)\n           entity-type (get (.-entityTypes ctx) component-key)\n           obj  ^three/Object3D (.-threejs node)]\n       (let [post-removed-fns (on-entity-removed ctx node obj component-config)]\n         (.for-each-child node (partial destroy-entity ctx))\n         (doseq [cb post-removed-fns]\n           (cb))\n         (when-let [parent (.-parent obj)]\n           (.remove parent obj)))\n       (entity/destroy! entity-type (.-context node) obj component-config)))))\n\n(defn- update-entity\n  [^Context ctx ^vscene/Node node old-data new-data]\n  (let [{:keys [component-config\n                component-key\n                position\n                rotation\n                scale]} new-data\n        entity-type (get (.-entityTypes ctx) component-key)\n        obj  ^three/Object3D (.-threejs node)]\n    (doseq [cb (on-entity-removed ctx node obj (:component-config old-data))]\n      (cb))\n    (entity/update! entity-type (.-context node) obj component-config)\n    (threejs/set-position! obj position)\n    (threejs/set-rotation! obj rotation)\n    (threejs/set-scale! obj scale)\n    (doseq [cb (on-entity-added ctx node obj component-config)]\n      (cb))\n    obj))\n\n(defn- transform-entity\n  [^Context _ctx ^vscene/Node node]\n  (let [{:keys [position\n                rotation\n                scale]} (.-data node)\n        obj ^three/Object3D (.-threejs node)]\n    (threejs/set-position! obj position)\n    (threejs/set-rotation! obj rotation)\n    (threejs/set-scale! obj scale)))\n\n(defn- replace-entity\n  \"Destroy and recreate an entity at a given node in the scene-graph\"\n  [^Context ctx ^vscene/Node node old-data new-data]\n  (let [old-obj (.-threejs node)\n        {old-component-key :component-key\n         old-component-config :component-config} old-data\n        old-entity-type (get (.-entityTypes ctx) old-component-key)\n        parent-obj (.-parent old-obj)\n        children (.-children old-obj)]\n    (on-entity-removed ctx node old-obj old-component-config)\n    (entity/destroy! old-entity-type (.-context node) old-obj old-component-config)\n    (let [new-obj (create-entity-object ctx node)]\n      (set! (.-threejs node) new-obj)\n      (.remove parent-obj old-obj)\n      (.add parent-obj new-obj)\n      (when-not (.terminal? node)\n        (doseq [child (aclone children)]\n          (.add new-obj child)))\n      (on-entity-added ctx node new-obj (:component-config new-data)))))\n\n(defn- init-scene! [^Context context virtual-scene scene-root]\n  (create-entity context scene-root (.-root virtual-scene)))\n\n(defn- update-type [^Context context ^vscene/Node node o n]\n  (cond\n    (not= (:component-key o)\n          (:component-key n)) :replace-entity\n\n    (not= (:component-config o)\n          (:component-config n))\n    (if (in-place-update? context node)\n      :update-entity\n      :replace-entity)\n\n    :else :transform-entity))\n\n(defn- apply-change! [^Context context [^vscene/Node node action old-data new-data]]\n  (case action\n    :add\n    (create-entity context ^three/Object3D (.-threejs (.-parent node)) node)\n\n    :remove\n    (destroy-entity context node)\n\n    :update\n    (case (update-type context node old-data new-data)\n      :replace-entity (try\n                        (replace-entity context node old-data new-data)\n                        (catch :default ex\n                          (js/console.error \"Failed to replace entity\" ex\n                                            (clj->js (.-data node)))))\n      :update-entity (try\n                       (update-entity context node old-data new-data)\n                       (catch :default ex\n                         (js/console.error \"Failed to update entity\" ex\n                                           (clj->js (.-data node)))))\n      :transform-entity (try\n                          (transform-entity context node)\n                          (catch :default ex\n                            (js/console.error \"Failed to transform entity\" ex\n                                              (clj->js (.-data node))))))))\n\n(defn- animate [^Context context]\n  (let [stats (.-stats context)\n        clock (.-clock context)\n        virtual-scene ^vscene/Scene (.-virtualScene context)\n        renderer (.-renderer context)\n        composer (.-composer context)\n        scene-root (.-sceneRoot context)\n        before-render-cb (.-beforeRenderCb context)\n        after-render-cb (.-afterRenderCb context)]\n    (when stats\n      (.begin stats))\n    (let [delta-time (.getDelta clock)\n          changelog (array)]\n      (systems/dispatch-on-tick context delta-time)\n      ;; Invoke callbacks\n      (when before-render-cb (before-render-cb delta-time))\n      ;; Render virtual scene\n      (vscene/render! virtual-scene changelog)\n      ;; Apply virtual scene changes to ThreeJs scene\n      (doseq [change changelog]\n        (apply-change! context change))\n      ;; Fetch camera after applying the scene changes since it might have been updated\n      (let [camera (.-camera context)]\n        ;; Render ThreeJS Scene\n        (if composer\n          (.render composer delta-time)\n          (.render renderer scene-root camera)))\n      (when after-render-cb (after-render-cb delta-time)))\n    (when stats\n      (.end stats))))\n\n(defn- get-canvas [dom-root]\n  (if (= \"canvas\" (string/lower-case (.-tagName dom-root)))\n    dom-root\n    (let [c (.createElement js/document \"canvas\")]\n      (.appendChild dom-root c))))\n\n(defn- set-shadow-map! [renderer shadow-map]\n  (when shadow-map\n    (let [sm ^js (.-shadowMap renderer)]\n      (set! (.-enabled sm) (:enabled shadow-map))\n      (set! (.-type sm) (or (:type shadow-map)\n                            three/PCFShadowMap)))))\n\n\n(defn- ^Context create-context [root-fn dom-root {:keys [on-before-render\n                                                         on-after-render\n                                                         shadow-map\n                                                         systems\n                                                         entity-types]}]\n  (let [canvas (get-canvas dom-root)\n        width (.-offsetWidth canvas)\n        height (.-offsetHeight canvas)\n        renderer (new three/WebGLRenderer (clj->js {:canvas canvas}))\n        camera (three/PerspectiveCamera. 75 (/ width height) 0.1 1000)\n        cameras (array)\n        scene-root (new three/Scene)\n        clock (new three/Clock)]\n    (.setSize renderer width height)\n    (set-shadow-map! renderer shadow-map)\n    ;; Systems are initialized before first virtual-render\n    (systems/dispatch-init systems {:threejs-renderer renderer\n                                    :threejs-scene scene-root\n                                    :threejs-default-camera camera\n                                    :canvas canvas})\n    (let [virtual-scene (vscene/create root-fn)\n          context (Context. virtual-scene\n                                 scene-root\n                                 dom-root nil\n                                 canvas camera cameras\n                                 clock renderer\n                                 on-before-render\n                                 on-after-render\n                                 (merge builtin-entity-types entity-types)\n                                 systems\n                                 camera)]\n      (init-scene! context virtual-scene scene-root)\n      (.push contexts context)\n      (.setAnimationLoop renderer #(animate context))\n      context)))\n\n(defn- clear-scene! [^Context context ^vscene/Node vscene-root]\n  (.for-each-child vscene-root (partial destroy-entity context))\n  (.clear (.-sceneRoot context)))\n\n(defn- reset-context! [^Context old-context root-fn {:keys [on-before-render on-after-render shadow-map\n                                                            entity-types systems]}]\n  (let [scene-root        ^js (.-sceneRoot old-context)\n        virtual-scene     ^vscene/Scene (.-virtualScene old-context)\n        renderer          ^js (.-renderer old-context)]\n    (systems/dispatch-destroy (.-systems old-context)\n                              (raw-context->context old-context))\n    (clear-scene! old-context (.-root virtual-scene))\n    (vscene/destroy! virtual-scene)\n    (set-shadow-map! renderer shadow-map)\n    (set! (.-cameras old-context) (array))\n    (set! (.-systems old-context) systems)\n    (set! (.-entityTypes old-context) (merge builtin-entity-types entity-types))\n    (systems/dispatch-init systems {:threejs-renderer renderer\n                                    :threejs-scene scene-root\n                                    :threejs-default-camera (.-defaultCamera old-context)\n                                    :canvas (.-canvas old-context)})\n    (let [new-virtual-scene (vscene/create root-fn)]\n      (init-scene! old-context new-virtual-scene scene-root)\n      (set! (.-virtualScene old-context) new-virtual-scene)\n      (set! (.-beforeRenderCb old-context) on-before-render)\n      (set! (.-afterRenderCb old-context) on-after-render)\n      old-context)))\n\n(defn- find-context [dom-root]\n  (first (filter #(= (.-domRoot ^js %) dom-root) contexts)))\n\n(defn- create-or-reset-context [root-fn dom-root config]\n  (if-let [existing-context (find-context dom-root)]\n    (reset-context! existing-context root-fn config)\n    (create-context root-fn dom-root config)))\n\n(defn render [root-fn dom-root config]\n  (raw-context->context (create-or-reset-context root-fn dom-root config)))\n"]}