{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$zone$SphereZone.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/three-nebula/build/esm/zone/SphereZone.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$zone$SphereZone\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"../constants\");\n\nvar _Util = _interopRequireDefault(require(\"../utils/Util\"));\n\nvar _Vector3D = _interopRequireDefault(require(\"../math/Vector3D\"));\n\nvar _Zone = _interopRequireDefault(require(\"./Zone\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A spherical zone for particles to be emitted within.\n *\n */\nclass SphereZone extends _Zone.default {\n  /**\n   * @constructs {SphereZone}\n   *\n   * @param {number} centerX - the sphere's center x coordinate\n   * @param {number} centerY - the sphere's center y coordinate\n   * @param {number} centerZ - the sphere's center z coordinate\n   * @param {number} radius - the sphere's radius value\n   * @return void\n   */\n  constructor(centerX, centerY, centerZ, radius) {\n    super(_types.ZONE_TYPE_SPHERE); // TODO see below, these should probably be assigned properly\n    // eslint-disable-next-line\n\n    let x, y, z, r;\n\n    if (_Util.default.isUndefined(centerY, centerZ, radius)) {\n      x = y = z = 0;\n      r = centerX || 100;\n    } else {\n      x = centerX; // eslint-disable-next-line\n\n      y = centerY; // eslint-disable-next-line\n\n      z = centerZ;\n      r = radius;\n    }\n\n    this.x = x; // TODO shouldn't this be set to y?\n\n    this.y = x; // TODO shouldn't this be set to z?\n\n    this.z = x;\n    this.radius = r;\n    this.the = this.phi = 0;\n  }\n  /**\n   * Returns true to indicate this is a SphereZone.\n   *\n   * @return {boolean}\n   */\n\n\n  isSphereZone() {\n    return true;\n  }\n  /**\n   * Sets the particle to dead if the particle collides with the sphere.\n   *\n   * @param {object} particle\n   * @return void\n   */\n\n\n  _dead(particle) {\n    var d = particle.position.distanceTo(this);\n    if (d - particle.radius > this.radius) particle.dead = true;\n  }\n  /**\n   * Warns that this zone does not support the _cross method.\n   *\n   * @return void\n   */\n\n\n  _cross() {\n    console.warn(`${this.constructor.name} does not support the _cross method`);\n  }\n\n}\n\nexports.default = SphereZone;\n\nSphereZone.prototype.getPosition = function () {\n  var tha, phi, r;\n  return function () {\n    this.random = Math.random();\n    r = this.random * this.radius;\n    tha = _constants.PI * Math.random(); //[0-pi]\n\n    phi = _constants.PI * 2 * Math.random(); //[0-2pi]\n\n    this.vector.x = this.x + r * Math.sin(tha) * Math.cos(phi);\n    this.vector.y = this.y + r * Math.sin(phi) * Math.sin(tha);\n    this.vector.z = this.z + r * Math.cos(tha);\n    return this.vector;\n  };\n}();\n\nSphereZone.prototype._bound = function () {\n  var normal = new _Vector3D.default(),\n      v = new _Vector3D.default(),\n      k;\n  return function (particle) {\n    var d = particle.position.distanceTo(this);\n\n    if (d + particle.radius >= this.radius) {\n      normal.copy(particle.position).sub(this).normalize();\n      v.copy(particle.velocity);\n      k = 2 * v.dot(normal);\n      particle.velocity.sub(normal.scalar(k));\n    }\n  };\n}();\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_constants","_Util","_Vector3D","_Zone","_types","SphereZone","constructor","centerX","centerY","centerZ","radius","ZONE_TYPE_SPHERE","isUndefined","x","r","z","y","the","phi","isSphereZone","_dead","particle","position","distanceTo","d","dead","_cross","console","warn","name","prototype","getPosition","tha","random","Math","PI","vector","sin","cos","_bound","normal","v","k","copy","sub","normalize","velocity","dot","scalar"]
}
