{"version":3,"sources":["zombie/scene/system/audio.cljs"],"mappings":"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","names":["zombie.scene.system.audio/v1","js/module$node_modules$three$build$three_module.Vector3","zombie.scene.system.audio/v2","zombie.scene.system.audio/v3","zombie.scene.system.audio/quat1","js/module$node_modules$three$build$three_module.Quaternion","zombie.scene.system.audio/set-to-world-position!","howl","obj","sound-id","world-pos","world-dir","world-quat","world-up","zombie.scene.system.audio/random-sfx","type","cljs.core/rand-nth","cljs.core/deref","cljs.core.get","zombie.state.databases/assets","p__13294","map__13295","cljs.core/--destructure-map","zombie.scene.system.audio/play-sound!","local-state","p__13300","map__13301","zombie.scene.system.audio/play-sound-at-position!","position","vec__13302","cljs.core.nth","x","y","z","zombie.scene.system.audio/register-listeners!","bus","entity-id","zombie.util.messaging/on","cljs.core.partial","cljs.core/PROTOCOL_SENTINEL","p__13305","map__13306","p__13307","map__13308","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","zombie.scene.system.audio/AudioSystem","zombie.scene.system.audio/->AudioSystem","_","key","listener?","cljs.core.swap_BANG_","cljs.core/assoc","_key","_obj","cljs.core/dissoc","temp__5753__auto__","listener","js/module$node_modules$howler$dist$howler.Howler","zombie.scene.system.audio/create","event-bus","cljs.core.atom"],"sourcesContent":["(ns zombie.scene.system.audio\r\n  (:require [\"three\" :as three]\r\n            [\"howler\" :refer [Howler]]\r\n            [threeagent.system :refer [ISystem]]\r\n            [zombie.state.databases :as db]\r\n            [zombie.util.messaging :as message]))\r\n\r\n(def ^:private v1 (three/Vector3.))\r\n(def ^:private v2 (three/Vector3.))\r\n(def ^:private v3 (three/Vector3.))\r\n(def ^:private quat1 (three/Quaternion.))\r\n\r\n(defn- set-to-world-position! [^js howl ^three/Object3D obj sound-id]\r\n  (let [world-pos ^three/Vector3 (.getWorldPosition obj v1)\r\n        world-dir ^three/Vector3 (.getWorldDirection obj v2)\r\n        world-quat ^three/Quaternion (.getWorldQuaternion obj quat1)\r\n        world-up ^three/Vector3 (-> v3\r\n                                    (.copy (.-up obj))\r\n                                    (.applyQuaternion world-quat))]\r\n    (.orientation howl\r\n                  (.-x world-dir)\r\n                  (.-y world-dir)\r\n                  (.-z world-dir)\r\n                  (.-x world-up)\r\n                  (.-y world-up)\r\n                  (.-z world-up))\r\n    (.pos howl\r\n          (.-x world-pos)\r\n          (.-y world-pos)\r\n          (.-z world-pos)\r\n          sound-id)))\r\n\r\n\r\n(defn- random-sfx [type]\r\n  (rand-nth (get @db/assets type)))\r\n\r\n(defn- play-sound! [local-state ^three/Object3D obj {:keys [type]}]\r\n  (let [howl (random-sfx type)\r\n        sound-id (.play howl)]\r\n    (set-to-world-position! howl obj sound-id)))\r\n\r\n(defn- play-sound-at-position! [{:keys [type position]}]\r\n  (let [[x y z] position\r\n        howl (random-sfx type)\r\n        sound-id (.play howl)]\r\n    (.pos howl x y z sound-id)))\r\n\r\n(defn- register-listeners! [bus local-state entity-id obj]\r\n  (message/on bus entity-id :audio/play-sound (partial play-sound! local-state obj)))\r\n\r\n(deftype AudioSystem [bus local-state]\r\n  ISystem\r\n  (init [_ _]\r\n    (message/on bus :audio/play-sound play-sound-at-position!))\r\n  (destroy [_ _])\r\n  (on-entity-added [_ _ key obj {:keys [listener?]}]\r\n    (when listener?\r\n      (swap! local-state assoc :listener obj))\r\n    (register-listeners! bus local-state key obj))\r\n  (on-entity-removed [_ _ _key _obj {:keys [listener?]}]\r\n    (when listener?\r\n      (swap! local-state dissoc :listener)))\r\n  (tick [_ _]\r\n    (when-let [listener (:listener @local-state)]\r\n      (set-to-world-position! Howler listener nil))))\r\n\r\n(defn create [event-bus]\r\n  (->AudioSystem event-bus (atom {})))\r\n"]}