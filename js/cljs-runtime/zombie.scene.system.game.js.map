{"version":3,"sources":["zombie/scene/system/game.cljs"],"mappings":"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","names":["zombie.scene.system.game/door-tween!","state","on-complete","t","js/module$node_modules$$tweenjs$tween_js$dist$tween_esm.Tween","p1__13331#","cljs.core/reset!","zombie.scene.system.game/room-fsm","G__13338","p1__13337#","statecharts.core/machine","p__13339","map__13340","cljs.core/--destructure-map","cljs.core.get","outro-tween","on-clear","zombie.scene.system.game/register-enemy!","bus","enemy-list","room-fsm","enemy-id","zombie.util.messaging/on","enemies","cljs.core.swap_BANG_","cljs.core/disj","cljs.core/empty?","statecharts.core.send","cljs.core/PROTOCOL_SENTINEL","p__13357","p__13358","map__13359","map__13360","map__13361","p__13367","map__13368","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","zombie.scene.system.game/GameSystem","zombie.scene.system.game/->GameSystem","local-state","_","room-id","room-enemies","id","_obj","room","enemy?","cur","zombie.util.common/cursor","fsm","G__13366","statecharts.core/service","cljs.core.assoc","statecharts.core/start","cljs.core/deref","cljs.core/conj","_id","_delta-time","zombie.scene.system.game/create","event-bus","cljs.core.atom"],"sourcesContent":["(ns zombie.scene.system.game\r\n  (:require [zombie.util.messaging :as message]\r\n            [zombie.util.common :refer [cursor]]\r\n            [\"@tweenjs/tween.js\" :as tween]\r\n            [statecharts.core :as fsm]\r\n            [threeagent.system :refer [ISystem]]))\r\n\r\n(defn- door-tween! [state on-complete]\r\n  (let [t (-> (tween/Tween. #js {:x 0})\r\n              (.to #js {:x 1} 200)\r\n              (.start))]\r\n    (.onUpdate t #(reset! state (.-x %)))\r\n    (when on-complete\r\n      (.onComplete t on-complete))))\r\n\r\n(def ^:private room-fsm \r\n  (fsm/machine {:id :game\r\n                :initial :start\r\n                :states {:start {:on {:reset :clearing}}\r\n                         :clearing {:entry #(reset! (:outro-tween %1) 0)\r\n                                    :on {:cleared :cooldown\r\n                                         :reset :clearing}}\r\n                         :cooldown {:after [{:delay 200\r\n                                             :target :cleared}]\r\n                                    :on {:reset :clearing}}\r\n                         :cleared {:entry (fn [{:keys [outro-tween on-clear]}]\r\n                                            (door-tween! outro-tween on-clear))}}}))\r\n\r\n(defn- register-enemy! [bus enemy-list room-fsm enemy-id]\r\n  (message/on bus enemy-id :entity/killed (fn []\r\n                                            (let [enemies (swap! enemy-list disj enemy-id)]\r\n                                              (when (empty? enemies)\r\n                                                (fsm/send room-fsm :cleared))))))\r\n\r\n\r\n(deftype GameSystem [bus local-state]\r\n  ISystem\r\n  (init [_ _]\r\n    (reset! local-state {:rooms {}}))\r\n  (destroy [_ _])\r\n  (on-entity-added [_ {{room-id :id\r\n                        room-enemies :enemies}\r\n                       :room}\r\n                    id\r\n                    _obj\r\n                    {:keys [room enemy?]}]\r\n    (let [cur (cursor local-state [:rooms room-id])]\r\n      (when room\r\n        (let [fsm (fsm/service (assoc room-fsm :context room))]\r\n          (fsm/start fsm)\r\n          (reset! cur {:fsm fsm})))\r\n      (when enemy?\r\n        (fsm/send (:fsm @cur) :reset)\r\n        (register-enemy! bus room-enemies (:fsm @cur) id)\r\n        (swap! room-enemies conj id))))\r\n  (on-entity-removed [_ _ _id _obj {:keys []}])\r\n  (tick [_ _delta-time]))\r\n\r\n(defn create [event-bus]\r\n  (->GameSystem event-bus (atom {})))\r\n"]}