{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$behaviour$Rotate.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/three-nebula/build/esm/behaviour/Rotate.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$behaviour$Rotate\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"../constants\");\n\nvar _math = require(\"../math\");\n\nvar _Behaviour = _interopRequireDefault(require(\"./Behaviour\"));\n\nvar _ease = require(\"../ease\");\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Behaviour that rotates particles.\n */\nclass Rotate extends _Behaviour.default {\n  /**\n   * Constructs a Rotate behaviour instance.\n   *\n   * @param {number} x - X axis rotation\n   * @param {number} y - Y axis rotation\n   * @param {number} z - Z axis rotation\n   * @param {number} life - The life of the behaviour\n   * @param {function} easing - The easing equation to use for transforms\n   * @param {boolean} [isEnabled=true] - Determines if the behaviour will be applied or not\n   * @return void\n   */\n  constructor(x, y, z, life, easing, isEnabled = true) {\n    super(life, easing, _types.BEHAVIOUR_TYPE_ROTATE, isEnabled);\n    this.reset(x, y, z);\n  }\n  /**\n   * Gets the rotation type.\n   *\n   * @return {string}\n   */\n\n\n  get rotationType() {\n    return this._rotationType;\n  }\n  /**\n   * Sets the rotation type.\n   *\n   * @param {string}\n   * @return void\n   */\n\n\n  set rotationType(rotationType) {\n    /**\n     * @desc The rotation type. ENUM of ['same', 'set', 'to', 'add'].\n     * @type {string}\n     */\n    this._rotationType = rotationType;\n  }\n  /**\n   * Resets the behaviour properties.\n   *\n   * @param {number} x - X axis rotation\n   * @param {number} y - Y axis rotation\n   * @param {number} z - Z axis rotation\n   * @param {number} life - the life of the behaviour\n   * @param {function} easing - the easing equation to use for transforms\n   * @return void\n   */\n\n\n  reset(x, y, z, life, easing) {\n    /**\n     * @desc X axis rotation.\n     * @type {number|Span}\n     */\n    this.x = x || 0;\n    /**\n     * @desc Y axis rotation.\n     * @type {number|Span}\n     */\n\n    this.y = y || 0;\n    /**\n     * @desc Z axis rotation.\n     * @type {number|Span}\n     */\n\n    this.z = z || 0;\n\n    if (x === undefined || x == 'same') {\n      this.rotationType = 'same';\n    } else if (y == undefined) {\n      this.rotationType = 'set';\n    } else if (z === undefined) {\n      this.rotationType = 'to';\n    } else {\n      this.rotationType = 'add';\n      this.x = (0, _math.createSpan)(this.x * _constants.DR);\n      this.y = (0, _math.createSpan)(this.y * _constants.DR);\n      this.z = (0, _math.createSpan)(this.z * _constants.DR);\n    }\n\n    life && super.reset(life, easing);\n  }\n  /**\n   * Initializes the behaviour on a particle.\n   *\n   * @param {object} particle - the particle to initialize the behaviour on\n   * @return void\n   */\n\n\n  initialize(particle) {\n    switch (this.rotationType) {\n      case 'same':\n        break;\n\n      case 'set':\n        this._setRotation(particle.rotation, this.x);\n\n        break;\n\n      case 'to':\n        particle.transform.fR = particle.transform.fR || new _math.Vector3D();\n        particle.transform.tR = particle.transform.tR || new _math.Vector3D();\n\n        this._setRotation(particle.transform.fR, this.x);\n\n        this._setRotation(particle.transform.tR, this.y);\n\n        break;\n\n      case 'add':\n        particle.transform.addR = new _math.Vector3D(this.x.getValue(), this.y.getValue(), this.z.getValue());\n        break;\n    }\n  }\n  /**\n   * Sets the particle's rotation prior to the behaviour being applied.\n   *\n   * NOTE It's hard to see here, but this is mutating the particle's rotation\n   * even though the particle is not being passed in directly.\n   *\n   * NOTE the else if below will never be reached because the value being passed in\n   * will never be of type Vector3D.\n   *\n   * @param {Vector3D} particleRotation - the particle's rotation vector\n   * @param {string|number} value - the value to set the rotation value to, if 'random'\n   * rotation is randomised\n   * @return void\n   */\n\n\n  _setRotation(particleRotation, value) {\n    particleRotation = particleRotation || new _math.Vector3D();\n\n    if (value == 'random') {\n      var x = _math.MathUtils.randomAToB(-_constants.PI, _constants.PI);\n\n      var y = _math.MathUtils.randomAToB(-_constants.PI, _constants.PI);\n\n      var z = _math.MathUtils.randomAToB(-_constants.PI, _constants.PI);\n\n      particleRotation.set(x, y, z);\n    } // we can't ever get here because value will never be a Vector3D!\n    // consider refactoring to\n    //  if (value instance of Span) { vec3.add(value.getValue()); }\n    else if (value instanceof _math.Vector3D) {\n        particleRotation.copy(value);\n      }\n  }\n  /**\n   * Mutates the particle.rotation property.\n   *\n   * @see http://stackoverflow.com/questions/21622956/how-to-convert-direction-vector-to-euler-angles\n   * @param {object} particle - the particle to apply the behaviour to\n   * @param {number} time - engine time\n   * @param {integer} index - the particle index\n   * @return void\n   */\n\n\n  mutate(particle, time, index) {\n    this.energize(particle, time, index);\n\n    switch (this.rotationType) {\n      // orients the particle in the direction it is moving\n      case 'same':\n        if (!particle.rotation) {\n          particle.rotation = new _math.Vector3D();\n        }\n\n        particle.rotation.eulerFromDir(particle.velocity);\n        break;\n\n      case 'set':\n        //\n        break;\n\n      case 'to':\n        particle.rotation.x = _math.MathUtils.lerp(particle.transform.fR.x, particle.transform.tR.x, this.energy);\n        particle.rotation.y = _math.MathUtils.lerp(particle.transform.fR.y, particle.transform.tR.y, this.energy);\n        particle.rotation.z = _math.MathUtils.lerp(particle.transform.fR.z, particle.transform.tR.z, this.energy);\n        break;\n\n      case 'add':\n        particle.rotation.add(particle.transform.addR);\n        break;\n    }\n  }\n\n  static fromJSON(json) {\n    const {\n      x,\n      y,\n      z,\n      life,\n      easing,\n      isEnabled = true\n    } = json;\n    return new Rotate(x, y, z, life, (0, _ease.getEasingByName)(easing), isEnabled);\n  }\n\n}\n\nexports.default = Rotate;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","_constants","_math","_Behaviour","_interopRequireDefault","obj","__esModule","_ease","_types","Rotate","constructor","x","y","z","life","easing","isEnabled","BEHAVIOUR_TYPE_ROTATE","reset","_rotationType","rotationType","undefined","createSpan","DR","initialize","particle","_setRotation","rotation","transform","fR","Vector3D","tR","addR","getValue","particleRotation","MathUtils","randomAToB","PI","set","copy","mutate","time","index","energize","eulerFromDir","velocity","lerp","energy","add","fromJSON","json","getEasingByName"]
}
