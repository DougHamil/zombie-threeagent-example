{
"version":3,
"file":"module$node_modules$three$examples$jsm$utils$SkeletonUtils.js",
"lineCount":18,
"mappings":"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",
"sources":["node_modules/three/examples/jsm/utils/SkeletonUtils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three$examples$jsm$utils$SkeletonUtils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.retarget = retarget;\nexports.retargetClip = retargetClip;\nexports.getHelperFromSkeleton = getHelperFromSkeleton;\nexports.getSkeletonOffsets = getSkeletonOffsets;\nexports.renameBones = renameBones;\nexports.getBones = getBones;\nexports.getBoneByName = getBoneByName;\nexports.getNearestBone = getNearestBone;\nexports.findBoneTrackData = findBoneTrackData;\nexports.getEqualsBonesNames = getEqualsBonesNames;\nexports.clone = clone;\n\nvar _three = require(\"three\");\n\nfunction retarget(target, source, options = {}) {\n  const pos = new _three.Vector3(),\n        quat = new _three.Quaternion(),\n        scale = new _three.Vector3(),\n        bindBoneMatrix = new _three.Matrix4(),\n        relativeMatrix = new _three.Matrix4(),\n        globalMatrix = new _three.Matrix4();\n  options.preserveMatrix = options.preserveMatrix !== undefined ? options.preserveMatrix : true;\n  options.preservePosition = options.preservePosition !== undefined ? options.preservePosition : true;\n  options.preserveHipPosition = options.preserveHipPosition !== undefined ? options.preserveHipPosition : false;\n  options.useTargetMatrix = options.useTargetMatrix !== undefined ? options.useTargetMatrix : false;\n  options.hip = options.hip !== undefined ? options.hip : 'hip';\n  options.names = options.names || {};\n  const sourceBones = source.isObject3D ? source.skeleton.bones : getBones(source),\n        bones = target.isObject3D ? target.skeleton.bones : getBones(target);\n  let bindBones, bone, name, boneTo, bonesPosition; // reset bones\n\n  if (target.isObject3D) {\n    target.skeleton.pose();\n  } else {\n    options.useTargetMatrix = true;\n    options.preserveMatrix = false;\n  }\n\n  if (options.preservePosition) {\n    bonesPosition = [];\n\n    for (let i = 0; i < bones.length; i++) {\n      bonesPosition.push(bones[i].position.clone());\n    }\n  }\n\n  if (options.preserveMatrix) {\n    // reset matrix\n    target.updateMatrixWorld();\n    target.matrixWorld.identity(); // reset children matrix\n\n    for (let i = 0; i < target.children.length; ++i) {\n      target.children[i].updateMatrixWorld(true);\n    }\n  }\n\n  if (options.offsets) {\n    bindBones = [];\n\n    for (let i = 0; i < bones.length; ++i) {\n      bone = bones[i];\n      name = options.names[bone.name] || bone.name;\n\n      if (options.offsets && options.offsets[name]) {\n        bone.matrix.multiply(options.offsets[name]);\n        bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n        bone.updateMatrixWorld();\n      }\n\n      bindBones.push(bone.matrixWorld.clone());\n    }\n  }\n\n  for (let i = 0; i < bones.length; ++i) {\n    bone = bones[i];\n    name = options.names[bone.name] || bone.name;\n    boneTo = getBoneByName(name, sourceBones);\n    globalMatrix.copy(bone.matrixWorld);\n\n    if (boneTo) {\n      boneTo.updateMatrixWorld();\n\n      if (options.useTargetMatrix) {\n        relativeMatrix.copy(boneTo.matrixWorld);\n      } else {\n        relativeMatrix.copy(target.matrixWorld).invert();\n        relativeMatrix.multiply(boneTo.matrixWorld);\n      } // ignore scale to extract rotation\n\n\n      scale.setFromMatrixScale(relativeMatrix);\n      relativeMatrix.scale(scale.set(1 / scale.x, 1 / scale.y, 1 / scale.z)); // apply to global matrix\n\n      globalMatrix.makeRotationFromQuaternion(quat.setFromRotationMatrix(relativeMatrix));\n\n      if (target.isObject3D) {\n        const boneIndex = bones.indexOf(bone),\n              wBindMatrix = bindBones ? bindBones[boneIndex] : bindBoneMatrix.copy(target.skeleton.boneInverses[boneIndex]).invert();\n        globalMatrix.multiply(wBindMatrix);\n      }\n\n      globalMatrix.copyPosition(relativeMatrix);\n    }\n\n    if (bone.parent && bone.parent.isBone) {\n      bone.matrix.copy(bone.parent.matrixWorld).invert();\n      bone.matrix.multiply(globalMatrix);\n    } else {\n      bone.matrix.copy(globalMatrix);\n    }\n\n    if (options.preserveHipPosition && name === options.hip) {\n      bone.matrix.setPosition(pos.set(0, bone.position.y, 0));\n    }\n\n    bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n    bone.updateMatrixWorld();\n  }\n\n  if (options.preservePosition) {\n    for (let i = 0; i < bones.length; ++i) {\n      bone = bones[i];\n      name = options.names[bone.name] || bone.name;\n\n      if (name !== options.hip) {\n        bone.position.copy(bonesPosition[i]);\n      }\n    }\n  }\n\n  if (options.preserveMatrix) {\n    // restore matrix\n    target.updateMatrixWorld(true);\n  }\n}\n\nfunction retargetClip(target, source, clip, options = {}) {\n  options.useFirstFramePosition = options.useFirstFramePosition !== undefined ? options.useFirstFramePosition : false;\n  options.fps = options.fps !== undefined ? options.fps : 30;\n  options.names = options.names || [];\n\n  if (!source.isObject3D) {\n    source = getHelperFromSkeleton(source);\n  }\n\n  const numFrames = Math.round(clip.duration * (options.fps / 1000) * 1000),\n        delta = 1 / options.fps,\n        convertedTracks = [],\n        mixer = new _three.AnimationMixer(source),\n        bones = getBones(target.skeleton),\n        boneDatas = [];\n  let positionOffset, bone, boneTo, boneData, name;\n  mixer.clipAction(clip).play();\n  mixer.update(0);\n  source.updateMatrixWorld();\n\n  for (let i = 0; i < numFrames; ++i) {\n    const time = i * delta;\n    retarget(target, source, options);\n\n    for (let j = 0; j < bones.length; ++j) {\n      name = options.names[bones[j].name] || bones[j].name;\n      boneTo = getBoneByName(name, source.skeleton);\n\n      if (boneTo) {\n        bone = bones[j];\n        boneData = boneDatas[j] = boneDatas[j] || {\n          bone: bone\n        };\n\n        if (options.hip === name) {\n          if (!boneData.pos) {\n            boneData.pos = {\n              times: new Float32Array(numFrames),\n              values: new Float32Array(numFrames * 3)\n            };\n          }\n\n          if (options.useFirstFramePosition) {\n            if (i === 0) {\n              positionOffset = bone.position.clone();\n            }\n\n            bone.position.sub(positionOffset);\n          }\n\n          boneData.pos.times[i] = time;\n          bone.position.toArray(boneData.pos.values, i * 3);\n        }\n\n        if (!boneData.quat) {\n          boneData.quat = {\n            times: new Float32Array(numFrames),\n            values: new Float32Array(numFrames * 4)\n          };\n        }\n\n        boneData.quat.times[i] = time;\n        bone.quaternion.toArray(boneData.quat.values, i * 4);\n      }\n    }\n\n    mixer.update(delta);\n    source.updateMatrixWorld();\n  }\n\n  for (let i = 0; i < boneDatas.length; ++i) {\n    boneData = boneDatas[i];\n\n    if (boneData) {\n      if (boneData.pos) {\n        convertedTracks.push(new _three.VectorKeyframeTrack('.bones[' + boneData.bone.name + '].position', boneData.pos.times, boneData.pos.values));\n      }\n\n      convertedTracks.push(new _three.QuaternionKeyframeTrack('.bones[' + boneData.bone.name + '].quaternion', boneData.quat.times, boneData.quat.values));\n    }\n  }\n\n  mixer.uncacheAction(clip);\n  return new _three.AnimationClip(clip.name, -1, convertedTracks);\n}\n\nfunction getHelperFromSkeleton(skeleton) {\n  const source = new _three.SkeletonHelper(skeleton.bones[0]);\n  source.skeleton = skeleton;\n  return source;\n}\n\nfunction getSkeletonOffsets(target, source, options = {}) {\n  const targetParentPos = new _three.Vector3(),\n        targetPos = new _three.Vector3(),\n        sourceParentPos = new _three.Vector3(),\n        sourcePos = new _three.Vector3(),\n        targetDir = new _three.Vector2(),\n        sourceDir = new _three.Vector2();\n  options.hip = options.hip !== undefined ? options.hip : 'hip';\n  options.names = options.names || {};\n\n  if (!source.isObject3D) {\n    source = getHelperFromSkeleton(source);\n  }\n\n  const nameKeys = Object.keys(options.names),\n        nameValues = Object.values(options.names),\n        sourceBones = source.isObject3D ? source.skeleton.bones : getBones(source),\n        bones = target.isObject3D ? target.skeleton.bones : getBones(target),\n        offsets = [];\n  let bone, boneTo, name, i;\n  target.skeleton.pose();\n\n  for (i = 0; i < bones.length; ++i) {\n    bone = bones[i];\n    name = options.names[bone.name] || bone.name;\n    boneTo = getBoneByName(name, sourceBones);\n\n    if (boneTo && name !== options.hip) {\n      const boneParent = getNearestBone(bone.parent, nameKeys),\n            boneToParent = getNearestBone(boneTo.parent, nameValues);\n      boneParent.updateMatrixWorld();\n      boneToParent.updateMatrixWorld();\n      targetParentPos.setFromMatrixPosition(boneParent.matrixWorld);\n      targetPos.setFromMatrixPosition(bone.matrixWorld);\n      sourceParentPos.setFromMatrixPosition(boneToParent.matrixWorld);\n      sourcePos.setFromMatrixPosition(boneTo.matrixWorld);\n      targetDir.subVectors(new _three.Vector2(targetPos.x, targetPos.y), new _three.Vector2(targetParentPos.x, targetParentPos.y)).normalize();\n      sourceDir.subVectors(new _three.Vector2(sourcePos.x, sourcePos.y), new _three.Vector2(sourceParentPos.x, sourceParentPos.y)).normalize();\n      const laterialAngle = targetDir.angle() - sourceDir.angle();\n      const offset = new _three.Matrix4().makeRotationFromEuler(new _three.Euler(0, 0, laterialAngle));\n      bone.matrix.multiply(offset);\n      bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n      bone.updateMatrixWorld();\n      offsets[name] = offset;\n    }\n  }\n\n  return offsets;\n}\n\nfunction renameBones(skeleton, names) {\n  const bones = getBones(skeleton);\n\n  for (let i = 0; i < bones.length; ++i) {\n    const bone = bones[i];\n\n    if (names[bone.name]) {\n      bone.name = names[bone.name];\n    }\n  }\n\n  return this;\n}\n\nfunction getBones(skeleton) {\n  return Array.isArray(skeleton) ? skeleton : skeleton.bones;\n}\n\nfunction getBoneByName(name, skeleton) {\n  for (let i = 0, bones = getBones(skeleton); i < bones.length; i++) {\n    if (name === bones[i].name) return bones[i];\n  }\n}\n\nfunction getNearestBone(bone, names) {\n  while (bone.isBone) {\n    if (names.indexOf(bone.name) !== -1) {\n      return bone;\n    }\n\n    bone = bone.parent;\n  }\n}\n\nfunction findBoneTrackData(name, tracks) {\n  const regexp = /\\[(.*)\\]\\.(.*)/,\n        result = {\n    name: name\n  };\n\n  for (let i = 0; i < tracks.length; ++i) {\n    // 1 is track name\n    // 2 is track type\n    const trackData = regexp.exec(tracks[i].name);\n\n    if (trackData && name === trackData[1]) {\n      result[trackData[2]] = i;\n    }\n  }\n\n  return result;\n}\n\nfunction getEqualsBonesNames(skeleton, targetSkeleton) {\n  const sourceBones = getBones(skeleton),\n        targetBones = getBones(targetSkeleton),\n        bones = [];\n\n  search: for (let i = 0; i < sourceBones.length; i++) {\n    const boneName = sourceBones[i].name;\n\n    for (let j = 0; j < targetBones.length; j++) {\n      if (boneName === targetBones[j].name) {\n        bones.push(boneName);\n        continue search;\n      }\n    }\n  }\n\n  return bones;\n}\n\nfunction clone(source) {\n  const sourceLookup = new Map();\n  const cloneLookup = new Map();\n  const clone = source.clone();\n  parallelTraverse(source, clone, function (sourceNode, clonedNode) {\n    sourceLookup.set(clonedNode, sourceNode);\n    cloneLookup.set(sourceNode, clonedNode);\n  });\n  clone.traverse(function (node) {\n    if (!node.isSkinnedMesh) return;\n    const clonedMesh = node;\n    const sourceMesh = sourceLookup.get(node);\n    const sourceBones = sourceMesh.skeleton.bones;\n    clonedMesh.skeleton = sourceMesh.skeleton.clone();\n    clonedMesh.bindMatrix.copy(sourceMesh.bindMatrix);\n    clonedMesh.skeleton.bones = sourceBones.map(function (bone) {\n      return cloneLookup.get(bone);\n    });\n    clonedMesh.bind(clonedMesh.skeleton, clonedMesh.bindMatrix);\n  });\n  return clone;\n}\n\nfunction parallelTraverse(a, b, callback) {\n  callback(a, b);\n\n  for (let i = 0; i < a.children.length; i++) {\n    parallelTraverse(a.children[i], b.children[i], callback);\n  }\n}\n};"],
"names":["shadow$provide","global","require","module","exports","retarget","target","source","options","pos","_three","Vector3","quat","Quaternion","scale","bindBoneMatrix","Matrix4","relativeMatrix","globalMatrix","preserveMatrix","undefined","preservePosition","preserveHipPosition","useTargetMatrix","hip","names","sourceBones","isObject3D","skeleton","bones","getBones","bindBones","bone","name","bonesPosition","pose","i","length","push","position","clone","updateMatrixWorld","matrixWorld","identity","children","offsets","matrix","multiply","decompose","quaternion","boneTo","getBoneByName","copy","invert","setFromMatrixScale","set","x","y","z","makeRotationFromQuaternion","setFromRotationMatrix","boneIndex","indexOf","wBindMatrix","boneInverses","copyPosition","parent","isBone","setPosition","getHelperFromSkeleton","SkeletonHelper","Array","isArray","getNearestBone","parallelTraverse","a","b","callback","Object","defineProperty","value","retargetClip","clip","useFirstFramePosition","fps","numFrames","Math","round","duration","delta","convertedTracks","mixer","AnimationMixer","boneDatas","positionOffset","clipAction","play","update","time","j","boneData","times","Float32Array","values","sub","toArray","VectorKeyframeTrack","QuaternionKeyframeTrack","uncacheAction","AnimationClip","getSkeletonOffsets","targetParentPos","targetPos","sourceParentPos","sourcePos","targetDir","Vector2","sourceDir","nameKeys","keys","nameValues","boneParent","boneToParent","setFromMatrixPosition","subVectors","normalize","laterialAngle","angle","offset","makeRotationFromEuler","Euler","renameBones","findBoneTrackData","tracks","regexp","result","trackData","exec","getEqualsBonesNames","targetSkeleton","targetBones","boneName","sourceLookup","Map","cloneLookup","sourceNode","clonedNode","traverse","node","isSkinnedMesh","sourceMesh","get","bindMatrix","map","bind"]
}
