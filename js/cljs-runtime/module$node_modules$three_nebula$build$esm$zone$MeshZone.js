shadow$provide.module$node_modules$three_nebula$build$esm$zone$MeshZone=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;global=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require("module$node_modules$three_nebula$build$esm$zone$Zone"));var _types=require("module$node_modules$three_nebula$build$esm$zone$types");class MeshZone extends global.default{constructor(bounds,scale=1,ThreeGeometry){super(_types.ZONE_TYPE_MESH);
this.geometry=null;this.scale=scale;this.supportsCrossing=!1;bounds.type&&"Geometry"===bounds.type&&(this.geometry=bounds);bounds.geometry&&(this.geometry=bounds.geometry);if(!this.geometry)throw Error("MeshZone unable to set geometry from the supplied bounds");this.geometry.isBufferGeometry&&(this.geometry=(new ThreeGeometry).fromBufferGeometry(this.geometry))}isMeshZone(){return!0}getPosition(){var vertices=this.geometry.vertices;vertices=vertices[vertices.length*Math.random()>>0];this.vector.x=
vertices.x*this.scale;this.vector.y=vertices.y*this.scale;this.vector.z=vertices.z*this.scale;return this.vector}}exports.default=MeshZone}
//# sourceMappingURL=module$node_modules$three_nebula$build$esm$zone$MeshZone.js.map
