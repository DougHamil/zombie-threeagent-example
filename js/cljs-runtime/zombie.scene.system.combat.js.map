{"version":3,"sources":["zombie/scene/system/combat.cljs"],"mappings":"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","names":["zombie.scene.system.combat/hit-reaction-flash!","materials","t1","js/module$node_modules$$tweenjs$tween_js$dist$tween_esm.Tween","p1__13044#","seq__13045","cljs.core/seq","chunk__13046","count__13047","i__13048","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","m","cljs.core/clj->js","p__13049","p__13050","map__13051","cljs.core/--destructure-map","cljs.core.get","map__13052","zombie.scene.system.combat/handle-reaction!","bus","object","text?","flash?","sound","particles","hit-position","hit-normal","damage","zombie.util.messaging/send","cljs.core.assoc","zombie.util.threejs/world-position-as-tuple","p__13053","map__13054","zombie.scene.system.combat/on-hit","local-state","entity-id","hit","map__13055","health","hit-reaction","death-reaction","on-killed","total-health","cljs.core/deref","new-health","x__4295__auto__","y__4296__auto__","cljs.core.swap_BANG_","zombie.state.databases/health-bars","cljs.core/assoc-in","zombie.scene.system.combat/register-listeners!","zombie.util.messaging/on","cljs.core.partial","zombie.scene.system.combat/get-materials","obj","mats","p1__13056#","mat","js/module$node_modules$three$build$three_module.MeshPhongMaterial","c","cljs.core/PROTOCOL_SENTINEL","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","zombie.scene.system.combat/CombatSystem","zombie.scene.system.combat/->CombatSystem","_","id","cfg","cljs.core/assoc","_obj","_cfg","cljs.core/dissoc","_delta-time","zombie.scene.system.combat/create","event-bus","cljs.core.atom"],"sourcesContent":["(ns zombie.scene.system.combat\r\n  (:require [threeagent.system :refer [ISystem]]\r\n            [\"three\" :as three]\r\n            [\"@tweenjs/tween.js\" :as tween]\r\n            [zombie.state.databases :as db]\r\n            [zombie.util.threejs :refer [world-position-as-tuple]]\r\n            [zombie.util.messaging :as message]))\r\n\r\n(defn- hit-reaction-flash! [materials]\r\n  (let [t1 (-> (tween/Tween. #js {:x 0})\r\n               (.to #js {:x 1} 200)\r\n               (.repeat 1)\r\n               (.yoyo true)\r\n               (.start))]\r\n    (.onUpdate t1 #(doseq [m materials]\r\n                     (.setValues ^three/Material m (clj->js {:emissive \"white\"\r\n                                                             :emissiveIntensity (.-x %)}))))))\r\n\r\n(defn- handle-reaction! [bus\r\n                         object\r\n                         materials\r\n                         {:keys [text? flash? sound particles]}\r\n                         {:keys [hit-position hit-normal damage]}]\r\n      (when text?\r\n        (message/send bus :particles/spawn {:type :floating-text\r\n                                            :position (assoc (world-position-as-tuple object)\r\n                                                             1 2)\r\n                                            :color \"orange\"\r\n                                            :speed 5\r\n                                            :spread 8\r\n                                            :text (str damage)}))\r\n      (when flash?\r\n        (hit-reaction-flash! materials))\r\n      (when sound\r\n        (message/send bus :audio/play-sound {:type sound\r\n                                             :position hit-position}))\r\n      (when particles\r\n        (message/send bus :particles/spawn {:type particles\r\n                                            :position hit-position\r\n                                            :rotation hit-normal})))\r\n\r\n(defn- on-hit [bus local-state entity-id {:keys [damage] :as hit}]\r\n  (let [{:keys [health hit-reaction materials object\r\n                death-reaction\r\n                on-killed total-health]} (get @local-state entity-id)\r\n        new-health (max (- health damage) 0)]\r\n    (swap! db/health-bars assoc-in [entity-id :visible?] true)\r\n    (swap! db/health-bars assoc-in [entity-id :percent] (/ new-health total-health))\r\n    (handle-reaction! bus object materials hit-reaction hit)\r\n    (when (pos? health)\r\n      (swap! local-state assoc-in [entity-id :health] new-health)\r\n      (if (pos? new-health)\r\n        (message/send bus entity-id :entity/damaged (assoc hit\r\n                                                           :damage damage\r\n                                                           :old-health health\r\n                                                           :new-health new-health))\r\n        (do\r\n          (when on-killed\r\n            (on-killed))\r\n          (handle-reaction! bus object materials death-reaction hit)\r\n          (message/send bus entity-id :entity/killed (assoc hit\r\n                                                            :damage damage\r\n                                                            :old-health health\r\n                                                            :new-health 0)))))))\r\n\r\n(defn register-listeners! [bus local-state entity-id]\r\n  (message/on bus entity-id :combat/hit (partial on-hit bus local-state entity-id)))\r\n\r\n(defn- get-materials [^three/Object3D obj]\r\n  (let [mats (array)]\r\n    (.traverse obj #(do\r\n                      (when-let [mat (.-material %)]\r\n                        (when (instance? three/MeshPhongMaterial mat)\r\n                          (let [c (.clone mat)]\r\n                            (set! (.-material %) c)\r\n                            (.push mats c))))))\r\n    mats))\r\n\r\n(deftype CombatSystem [bus local-state]\r\n  ISystem\r\n  (init [_ _])\r\n  (destroy [_ _])\r\n  (on-entity-added [_ _ id ^three/Object3D obj cfg]\r\n    (register-listeners! bus local-state id)\r\n    (fn []\r\n      (let [materials (get-materials obj)]\r\n        (swap! db/health-bars assoc id {:visible? false\r\n                                        :entity-id id\r\n                                        :percent 1.0})\r\n        (swap! local-state assoc id (assoc cfg\r\n                                           :total-health (:health cfg)\r\n                                           :object obj\r\n                                           :materials materials)))))\r\n  (on-entity-removed [_ _ id _obj _cfg]\r\n    (swap! db/health-bars dissoc id)\r\n    (swap! local-state dissoc id))\r\n  (tick [_ _delta-time]))\r\n\r\n(defn create [event-bus]\r\n  (->CombatSystem event-bus (atom {})))\r\n"]}