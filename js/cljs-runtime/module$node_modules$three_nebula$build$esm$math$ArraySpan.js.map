{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$math$ArraySpan.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CActHC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CAXrCG,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQQ,CAAAA,eAAR,CAA0BR,OAAQI,CAAAA,OAAlC,CAA4C,IAAK,EAE7CK,OAAAA,CAAQR,sBAAA,CAAuBH,OAAA,CAAQ,sDAAR,CAAvB,CAEZ,KAAIY,QAAUT,sBAAA,CAAuBH,OAAA,CAAQ,mCAAR,CAAvB,CAAd,CAEIa,OAASb,OAAA,CAAQ,uDAAR,CASb;KAAMc,UAAN,QAAwBH,OAAML,CAAAA,OAA9B,CAOES,WAAW,CAACC,KAAD,CAAQ,CACjB,KAAA,EAMA,KAAKC,CAAAA,IAAL,CAAYJ,MAAOK,CAAAA,oBAMnB,KAAKF,CAAAA,KAAL,CAAaG,KAAMC,CAAAA,OAAN,CAAcJ,KAAd,CAAA,CAAuBA,KAAvB,CAA+B,CAACA,KAAD,CAb3B,CAsBnBK,QAAQ,EAAG,CACT,MAAO,CAAC,CAAA,CAAGT,OAAQN,CAAAA,OAAZ,EAAqB,IAAKU,CAAAA,KAA1B,CADE,CA7Bb,CA0CAd,OAAQI,CAAAA,OAAR,CAAkBQ,SAclBZ,QAAQQ,CAAAA,eAAR,CAZwBM,KAAAN,EACjBM,KAAL,CAIIA,KAAJ,WAAqBF,UAArB,CACSE,KADT,CAIO,IAAIF,SAAJ,CAAcE,KAAd,CARP,CACS,IAnE2G;",
"sources":["node_modules/three-nebula/build/esm/math/ArraySpan.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$math$ArraySpan\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createArraySpan = exports.default = void 0;\n\nvar _Span = _interopRequireDefault(require(\"./Span\"));\n\nvar _sample = _interopRequireDefault(require(\"lodash/sample\"));\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Class for storing items of mixed type and fetching a randomised\n * value from these items.\n *\n */\nclass ArraySpan extends _Span.default {\n  /**\n   * Constructs an ArraySpan instance.\n   *\n   * @param {mixed|array<mixed>} items - Items\n   * @return void\n   */\n  constructor(items) {\n    super();\n    /**\n     * @desc The class type.\n     * @type {string}\n     */\n\n    this.type = _types.MATH_TYPE_ARRAY_SPAN;\n    /**\n     * @desc An array of colors\n     * @type {array}\n     */\n\n    this.items = Array.isArray(items) ? items : [items];\n  }\n  /**\n   * Gets a random item.\n   *\n   * @return {mixed}\n   */\n\n\n  getValue() {\n    return (0, _sample.default)(this.items);\n  }\n\n}\n/**\n * Attempts to create an ArraySpan from the items provided.\n *\n * @param {mixed} items - Items to try and create an ArraySpan from\n * @return {?ArraySpan}\n */\n\n\nexports.default = ArraySpan;\n\nconst createArraySpan = items => {\n  if (!items) {\n    return null;\n  }\n\n  if (items instanceof ArraySpan) {\n    return items;\n  }\n\n  return new ArraySpan(items);\n};\n\nexports.createArraySpan = createArraySpan;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","createArraySpan","_Span","_sample","_types","ArraySpan","constructor","items","type","MATH_TYPE_ARRAY_SPAN","Array","isArray","getValue"]
}
