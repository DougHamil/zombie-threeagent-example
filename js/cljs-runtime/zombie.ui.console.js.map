{"version":3,"sources":["zombie/ui/console.cljs"],"mappings":";AAIA,6BAAA,2CAAA,xEAAKA,uFAAyB;AAAA,AACE,qGAAA,9FAACC,mDAAMC,0BAAMC,qFAAoBC;;AACjE,2BAAA,3BAAOC,8DAAQC,MAAMC;AAArB,AACE,IAAAC,WAAM,AAAYD;AAAlB,AAAA,QAAAC;KAAA;AAEE,IAAMC,UAAQ,AAAA,oFAAA,AAAAC,gBAAQJ;AAAtB,AACE,IAAAK,2BAAa,AAACE,4CAAIb,2BAASS;AAA3B,AAAA,oBAAAE;AAAA,AAAA,cAAAA,VAAWC;AAAX,AACE,CAACA,wCAAAA,0CAAAA;;AADH;;AAEA,iFAAA,jFAACX,0DAAMK,MAAMH,4EAAgBW,iEAAKL;;AAClC,gFAAA,sDAAA,/HAACR,mDAAMK,MAAMS;;;;AANjB;;;;AAUF,2BAAA,3BAAOC,8DAAQV;AAAf,AACE,cAAA,AAAAI,VAAMO,0BAAS,0BAAA,mFAAA,7GAACC,oBAASZ;AAAzB,AAAA,0FAAA,mDAEG,iBAAAa,qBAAA,iDAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAT,qBAAA,AAAAW,cAAAF;AAAA,AAAA,GAAAT;AAAA,AAAA,IAAAS,eAAAT;AAAA,AAAA,GAAA,AAAAY,6BAAAH;AAAA,IAAAI,kBAu6E8C,AAAAoB,sBAAAxB;IAv6E9CK,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,QAAA,AAAAK,eAAAN,gBAAAK,nCAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SAAA,mFAAA,mDACQY;;AADR,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,uCAAA,AAAAC,qBAAAf;;AAAA,OAAAY,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAAS,gBAAAhB,pBAAMmB;AAAN,AAAA,OAAAF,eAAA,mFAAA,6DAAA,AAAAH,uCAAA,AAAAI,eAAAlB,hEACQmB;;;AADR;;;;GAAA,KAAA;;AAAA,AAAA,OAAApB,mBAAQF;;;AAGb,2BAAA,3BAAMuB;AAAN,AACE,IAAMlC,QAAM,gDAAA,2CAAA,sDAAA,GAAA,2DAAA,/MAACmC;AAAb,AAEE;AAAA,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,uDAAA,QAAA,yDAAA,OAAA,0DAAA,OAAA,uDAAA,QAAA,mEAAA,YAAA,iFAAA,YAAA,4EAAA,qCAAA,0HAAA,mFAAA,sDAAA,2CAAA,qDAAA,OAAA,kKAAA,iEAAA,KAAA,+DAAA,WAAAC,zkBAQI1B,yBAAOV,oTAEQ,AAAA,oFAAA,AAAAI,gBAAQJ;AAV3B,AAYwB,gFAAA,zEAACL,mDAAMK,MAAMS,sEAAY,AAAS,AAAA2B;GAZ1D,qJAAA,uDAAA,2CAAA,mEAAA,rPAa0B,AAACC,gDAAQtC,yBAAOC","names":["zombie.ui.console/commands","cljs.core.swap_BANG_","zombie.state.databases/ui","cljs.core/update","cljs.core/not","zombie.ui.console/on-key","state","evt","G__13416","command","cljs.core/deref","temp__5753__auto__","f","cljs.core.get","cljs.core/conj","cljs.core/assoc","zombie.ui.console/output","history","reagent.core/cursor","iter__4611__auto__","s__13418","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__13420","cljs.core/chunk-buffer","i__13419","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__13417","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","zombie.ui.console/render","reagent.core.atom","p1__13421#","cljs.core.partial","cljs.core/chunk-first"],"sourcesContent":["(ns zombie.ui.console\r\n  (:require [reagent.core :as r]\r\n            [zombie.state.databases :as db]))\r\n\r\n(def commands {\"toggle-debug\" (fn []\r\n                                (swap! db/ui update :show-debug? not))})\r\n(defn- on-key [state evt]\r\n  (case (.-charCode evt)\r\n    13\r\n    (let [command (:text @state)]\r\n      (when-let [f (get commands command)]\r\n        (f))\r\n      (swap! state update :history conj command)\r\n      (swap! state assoc :text \"\"))\r\n\r\n    :else))\r\n\r\n(defn- output [state]\r\n  (let [history @(r/cursor state [:history])]\r\n    [:div\r\n     (for [i history]\r\n       [:div i])]))\r\n\r\n(defn render []\r\n  (let [state (r/atom {:text \"\"\r\n                       :history []})]\r\n    (fn []\r\n      [:div {:style {:width \"100vw\"\r\n                     :height \"50vh\"\r\n                     :display \"grid\"\r\n                     :color \"white\"\r\n                     :font-family \"monospace\"\r\n                     :grid-template-rows \"auto 20px\"\r\n                     :background-color \"rgba(0, 0, 0, 0.8)\"}}\r\n       [output state]\r\n       [:input {:type \"text\"\r\n                :value (:text @state)\r\n                :auto-focus true\r\n                :on-change #(swap! state assoc :text (.-value (.-target %)))\r\n                :on-key-press (partial on-key state)\r\n                :style {:font-family \"monospace\"}}]])))\r\n"]}