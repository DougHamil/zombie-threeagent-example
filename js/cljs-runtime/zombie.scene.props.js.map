{"version":3,"sources":["zombie/scene/props.cljs"],"mappings":";AAOA,6BAAA,iDAAAA,9EAAMI,kEAASC,SAASC;AAAxB,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;uBAAA,AAAAE,4CAAAF,eAAA,9EAAmCM;WAAnC,AAAAJ,4CAAAF,eAAA,lEAAoDO;eAApD,AAAAL,4CAAAF,eAAA,tEAAyDQ;AAAzD,AACE,IAAMC,SAAO,AAACC;AAAd,AACE;AAAA,AACE,IAAMC,IAAE,AAACC,SAAY,CAAA,MACG,UAAA,AAAAC,TAAGJ,yBAAQ,iBAAAK,WAAWG;IAAXF,WAAA,mFAAA;AAAA,AAAA,oHAAAD,SAAAC,6CAAAD,SAAAC,3KAACC,uDAAAA,0EAAAA;;AADpC,AAAA,0FAAA,yDAAA,2CAAA,qDAAA,4DAAA,2CAAA,sDAAA,2CAAA,qDAAA,2CAAA,qDAAA,8DAAA,uDAAA,IAAA,yDAAA,IAAA,6DAAA,2CAAA,4DAAA,KAAA,6DAAA,KAAA,2EAAA,2CAAA,oGAAA,6GAAA,iFAAA,zpCAEgBX,o7BAM6Da,4FACLC;AATxE,AAU0D,AACE,4GAAA,mFAAA,/LAACC,0DAAMC,8BAAUC,oKACE,AAAA,oFAAOd,kBACnBe,iEACA,AAAA,sFAASf;;AAChB,OAACY,mDAAMhB,SAASoB,iBAAOnB;2BAfnF,uFAAA,mFAAA,yDAAA,2CAAA,8DAAA,mFAAA,sBAAA,oBAAA,mFAAA,mDAAA,2CAAA,+NAAA,uDAAA,mFAAA,IAAA,IAAA,YAAA,8DAAA,mFAAA,MAAA,4BAAA,mFAAA,sDAAA,2CAAA,2DAAA,8DAAA,SAAA,uDAAA,mFAAA,IAAA,IAAA,YAAA,8DAAA,mFAAA,yBAAA,YAAA,8DAAA,mFAAA,IAAA,IAAA,/4DAgBsBC,qWACI,aAAA,ZAAG,KAAA,JAAGK,iRACX,AAAA,mHAAA,AAAAE,gBAAyBY,mVAEtBd,wQACNJ,+XAGOmB","names":["p__10627","map__10628","cljs.core/--destructure-map","cljs.core.get","zombie.scene.props/powerup","database","id","initial-position","name","modifier","jitter","js/Math.random","t","js/Math.sin","cljs.core/deref","G__10629","G__10630","threeagent.core/cursor","zombie.state.databases/game","zombie.util.common/physics-layer-props","zombie.util.common/physics-layer-player","cljs.core.swap_BANG_","zombie.state.databases/player","cljs.core/update-in","cljs.core/conj","cljs.core/dissoc","zombie.state.databases/assets","zombie.util.math/pi4"],"sourcesContent":["(ns zombie.scene.props\r\n  \"Threeagent components for gameplay props\"\r\n  (:require [threeagent.core :as th]\r\n            [zombie.util.common :refer [physics-layer-props physics-layer-player]]\r\n            [zombie.state.databases :as db]\r\n            [zombie.util.math :refer [pi4]]))\r\n\r\n(defn powerup [database id {:keys [initial-position name modifier]}]\r\n  (let [jitter (js/Math.random)]\r\n    (fn []\r\n      (let [t (js/Math.sin (* 2.0\r\n                              (+ jitter @(th/cursor db/game [:time]))))]\r\n        [:object {:id id\r\n                  :physics {:parts {:hull {:type :rectangle\r\n                                           :width 0.5\r\n                                           :height 0.5\r\n                                           :settings {:isSensor true\r\n                                                      :isStatic true\r\n                                                      :collisionFilter {:category  physics-layer-props\r\n                                                                        :mask physics-layer-player}}\r\n                                           :on-collision-start #(do\r\n                                                                  (swap! db/player update-in\r\n                                                                         [:modifiers (:stat modifier)]\r\n                                                                         conj\r\n                                                                         (:amount modifier))\r\n                                                                  (swap! database dissoc id))}}}\r\n                  :position initial-position}\r\n         [:object {:position [0 (/ (+ t 1.5) 2.0) 0]}\r\n          [:box {:material (:material/powerup-blue @db/assets)\r\n                 :scale [0.5 0.5 0.5]\r\n                 :rotation [0 t 0]}]\r\n          [:text {:text name\r\n                  :anchor-x \"center\"\r\n                  :scale [5 5 5]\r\n                  :rotation [0 pi4 0]\r\n                  :position [0 1 0]}]]]))))\r\n\r\n\r\n"]}