{
"version":3,
"file":"module$node_modules$three_nebula$build$esm$core$Particle.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/three-nebula/build/esm/core/Particle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_nebula$build$esm$core$Particle\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"./constants\");\n\nvar _utils = require(\"../utils\");\n\nvar _constants2 = require(\"../constants\");\n\nvar _math = require(\"../math\");\n\nvar _types = require(\"./types\");\n\n/**\n * A Particle is an object that is emitted by an emitter.\n *\n */\nclass Particle {\n  /**\n   * Constructs a Particle instance.\n   *\n   * @param {object} properties - The properties to instantiate the particle with\n   * @property {number} properties.life - The particle's life\n   * @property {number} properties.age - The particle's age\n   * @property {number} properties.energy - The particle's energy loss\n   * @property {boolean} properties.dead - Determines if the particle is dead or not\n   * @property {boolean} properties.sleep - Determines if the particle is sleeping or not\n   * @property {object} properties.target - The particle's target\n   * @property {object} properties.body - The particle's body\n   * @property {number} properties.mass - The particle's mass\n   * @property {number} properties.radius - The particle's radius\n   * @property {number} properties.alpha - The particle's alpha\n   * @property {number} properties.scale - The particle's scale\n   * @property {number} properties.rotation - The particle's rotation\n   * @property {string|number} properties.color - The particle's color\n   * @property {function} properties.easing - The particle's easing\n   * @property {Vector3D} properties.position - The particle's position\n   * @property {Vector3D} properties.velocity - The particle's velocity\n   * @property {Vector3D} properties.acceleration - The particle's acceleration\n   * @property {array} properties.behaviours - The particle's behaviours array\n   * @property {object} properties.transform - The particle's transform collection\n   * @return void\n   */\n  constructor(properties) {\n    /**\n     * @desc The particle's unique id\n     * @type {number}\n     */\n    this.id = `particle-${(0, _utils.uid)()}`;\n    /**\n     * @desc The class type.\n     * @type {string}\n     */\n\n    this.type = _types.CORE_TYPE_PARTICLE;\n    /**\n     * @desc The particle's life\n     * @type {number}\n     */\n\n    this.life = _constants.DEFAULT_LIFE;\n    /**\n     * @desc The particle's age\n     * @type {number}\n     */\n\n    this.age = _constants.DEFAULT_AGE;\n    /**\n     * @desc The particle's energy loss\n     * @type {number}\n     */\n\n    this.energy = _constants.DEFAULT_ENERGY;\n    /**\n     * @desc Determines if the particle is dead or not\n     * @type {number}\n     */\n\n    this.dead = _constants.DEFAULT_DEAD;\n    /**\n     * @desc Determines if the particle is sleeping or not\n     * @type {number}\n     */\n\n    this.sleep = _constants.DEFAULT_SLEEP;\n    /**\n     * @desc The particle's body\n     * @type {object}\n     */\n\n    this.body = _constants.DEFAULT_BODY;\n    /**\n     * @desc The particle's parent\n     * @type {?Emitter}\n     */\n\n    this.parent = _constants.DEFAULT_PARENT;\n    /**\n     * @desc The particle's mass\n     * @type {number}\n     */\n\n    this.mass = _constants.DEFAULT_MASS;\n    /**\n     * @desc The particle's radius\n     * @type {number}\n     */\n\n    this.radius = _constants.DEFAULT_RADIUS;\n    /**\n     * @desc The particle's alpha\n     * @type {number}\n     */\n\n    this.alpha = _constants.DEFAULT_ALPHA;\n    /**\n     * @desc The particle's scale\n     * @type {number}\n     */\n\n    this.scale = _constants.DEFAULT_SCALE;\n    /**\n     * @desc Determines whether to use color or not\n     * @type {boolean}\n     */\n\n    this.useColor = _constants.DEFAULT_USE_COLOR;\n    /**\n     * @desc Determines whether to use alpha or not\n     * @type {boolean}\n     */\n\n    this.useAlpha = _constants.DEFAULT_USE_ALPHA;\n    /**\n     * @desc The particle's easing\n     * @type {string}\n     */\n\n    this.easing = _constants.DEFAULT_EASING;\n    /**\n     * @desc The particle's position\n     * @type {Vector3D}\n     */\n\n    this.position = new _math.Vector3D();\n    /**\n     * @desc The particle's velocity\n     * @type {Vector3D}\n     */\n\n    this.velocity = new _math.Vector3D();\n    /**\n     * @desc The particle's acceleration\n     * @type {Vector3D}\n     */\n\n    this.acceleration = new _math.Vector3D();\n    /**\n     * @desc The particle's last position, velocity and acceleration\n     * @type {Vector3D}\n     */\n\n    this.old = {};\n    /**\n     * @desc The particle's old position\n     * @type {Vector3D}\n     */\n\n    this.old.position = this.position.clone();\n    /**\n     * @desc The particle's old velocity\n     * @type {Vector3D}\n     */\n\n    this.old.velocity = this.velocity.clone();\n    /**\n     * @desc The particle's old acceleration\n     * @type {Vector3D}\n     */\n\n    this.old.acceleration = this.acceleration.clone();\n    /**\n     * @desc The particle's behaviours array\n     * @type {array}\n     */\n\n    this.behaviours = [];\n    /**\n     * @desc The particle's transform collection\n     * @type {object}\n     */\n\n    this.transform = {};\n    /**\n     * @desc The particle's color store\n     * @type {object}\n     */\n\n    this.color = {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n    /**\n     * @desc The particle's rotation\n     * @type {number}\n     */\n\n    this.rotation = new _math.Vector3D();\n    /**\n     * @desc The particle's distance to the camera, only set by the GPURenderer for depth sorting purposes.\n     * @type {number}\n     */\n\n    this.distanceToCamera = 0; // override constructor props with passed properties.\n\n    _utils.Util.setPrototypeByObj(this, properties);\n  }\n  /**\n   * Gets the particle's current direction.\n   *\n   * @return {number}\n   */\n\n\n  getDirection() {\n    return Math.atan2(this.velocity.x, -this.velocity.y) * (180 / _constants2.PI);\n  }\n  /**\n   * Resets the particle's default properties and clear's its particle's position,\n   * velocity, acceleration, color and rotation. Also destroy's the particle's\n   * transform collection & removes all behaviours.\n   *\n   * @return {Particle}\n   */\n\n\n  reset() {\n    this.life = _constants.DEFAULT_LIFE;\n    this.age = _constants.DEFAULT_AGE;\n    this.energy = _constants.DEFAULT_ENERGY;\n    this.dead = _constants.DEFAULT_DEAD;\n    this.sleep = _constants.DEFAULT_SLEEP;\n    this.body = _constants.DEFAULT_BODY;\n    this.parent = _constants.DEFAULT_PARENT;\n    this.mass = _constants.DEFAULT_MASS;\n    this.radius = _constants.DEFAULT_RADIUS;\n    this.alpha = _constants.DEFAULT_ALPHA;\n    this.scale = _constants.DEFAULT_SCALE;\n    this.useColor = _constants.DEFAULT_USE_COLOR;\n    this.useAlpha = _constants.DEFAULT_USE_ALPHA;\n    this.easing = _constants.DEFAULT_EASING;\n    this.position.set(0, 0, 0);\n    this.velocity.set(0, 0, 0);\n    this.acceleration.set(0, 0, 0);\n    this.old.position.set(0, 0, 0);\n    this.old.velocity.set(0, 0, 0);\n    this.old.acceleration.set(0, 0, 0);\n    this.color.r = 0;\n    this.color.g = 0;\n    this.color.b = 0;\n    this.rotation.clear();\n\n    _utils.Util.destroyObject(this.transform);\n\n    this.removeAllBehaviours();\n    return this;\n  }\n  /**\n   * Updates the particle's properties by applying each behaviour to the particle.\n   * Will also update the particle's energy, unless it's age is greater than it's life\n   * in which case it will be destroyed.\n   *\n   * @param {number} time - Integration time\n   * @param {integer} index - Particle index\n   * @return void\n   */\n\n\n  update(time, index) {\n    if (!this.sleep) {\n      this.age += time;\n      let i = this.behaviours.length;\n\n      while (i--) {\n        let behaviour = this.behaviours[i]; //behaviour && \n\n        behaviour.applyBehaviour(this, time, index);\n      }\n    }\n\n    if (this.age >= this.life) {\n      this.destroy();\n    } else {\n      const scale = this.easing(this.age / this.life);\n      this.energy = Math.max(1 - scale, 0);\n    }\n  }\n  /**\n   * Adds a behaviour to the particle.\n   *\n   * @param {Behaviour} behaviour - The behaviour to add to the particle\n   * @return void\n   */\n\n\n  addBehaviour(behaviour) {\n    this.behaviours.push(behaviour);\n    behaviour.initialize(this);\n  }\n  /**\n   * Adds multiple behaviours to the particle.\n   *\n   * @param {array<Behaviour>} behaviours - An array of behaviours to add to the particle\n   * @return void\n   */\n\n\n  addBehaviours(behaviours) {\n    let i = behaviours.length;\n\n    while (i--) {\n      this.addBehaviour(behaviours[i]);\n    }\n  }\n  /**\n   * Removes the behaviour from the particle.\n   *\n   * @param {Behaviour} behaviour - The behaviour to remove from the particle\n   * @return void\n   */\n\n\n  removeBehaviour(behaviour) {\n    const index = this.behaviours.indexOf(behaviour);\n\n    if (index > -1) {\n      this.behaviours.splice(index, 1);\n    }\n  }\n  /**\n   * Removes all behaviours from the particle.\n   *\n   * @return void\n   */\n\n\n  removeAllBehaviours() {\n    _utils.Util.destroyArray(this.behaviours);\n  }\n  /**\n   * Destroys the particle.\n   *\n   * @return void\n   */\n\n\n  destroy() {\n    this.removeAllBehaviours();\n    this.energy = 0;\n    this.dead = true;\n    this.parent = null;\n  }\n\n}\n\nexports.default = Particle;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","_constants","_utils","_constants2","_math","_types","Particle","constructor","properties","id","uid","type","CORE_TYPE_PARTICLE","life","DEFAULT_LIFE","age","DEFAULT_AGE","energy","DEFAULT_ENERGY","dead","DEFAULT_DEAD","sleep","DEFAULT_SLEEP","body","DEFAULT_BODY","parent","DEFAULT_PARENT","mass","DEFAULT_MASS","radius","DEFAULT_RADIUS","alpha","DEFAULT_ALPHA","scale","DEFAULT_SCALE","useColor","DEFAULT_USE_COLOR","useAlpha","DEFAULT_USE_ALPHA","easing","DEFAULT_EASING","position","Vector3D","velocity","acceleration","old","clone","behaviours","transform","color","r","g","b","rotation","distanceToCamera","Util","setPrototypeByObj","getDirection","PI","Math","atan2","x","y","reset","set","clear","destroyObject","removeAllBehaviours","update","time","index","i","length","behaviour","applyBehaviour","destroy","max","addBehaviour","push","initialize","addBehaviours","removeBehaviour","indexOf","splice","destroyArray"]
}
